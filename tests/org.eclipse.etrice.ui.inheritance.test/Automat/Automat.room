RoomModel Automat {

	import room.basic.types.* from "../../org.eclipse.etrice.modellib.cpp/model/Types.room"

	LogicalSystem Automat {
		SubSystemRef main: MainSubSystem
	}

	SubSystemClass MainSubSystem {
		ActorRef appl: Application
		LogicalThread defaultThread
	}

	ActorClass Application {
		Structure {
			ActorRef a: A
			ActorRef aa: AA
			ActorRef b: B
			ActorRef bb: BB
			ActorRef c: C
			ActorRef cc: CC
			ActorRef d: D
			ActorRef dd: DD
			ActorRef e: E
			ActorRef ee: EE
			ActorRef f: F
			ActorRef ff: FF
			ActorRef aaa: AAA
		}
	}

	ProtocolClass TestProtocol {
		incoming {
			Message incMsg1()
			Message incMsg2()
			Message incMsg3()
		}
	}

	ActorClass TopActor {
		Interface {
			Port p0: TestProtocol
		}
		Structure {
			external Port p0
		}
	}

	ActorClass A extends TopActor {
		Behavior {
			StateMachine {
				State z1
				Transition init: initial -> z1
				State z2
				State z3
				Transition tr0: z1 -> z2 {
					triggers {
						<incMsg1: p0>
					}
				}
				Transition tr1: z2 -> z3 {
					triggers {
						<incMsg1: p0>
					}
				}
				Transition tr2: z3 -> z1 {
					triggers {
						<incMsg1: p0>
					}
				}
			}
		}
	}

	ActorClass B extends TopActor {
		Behavior {
			StateMachine {
				State z1
				State z2 {
					subgraph {
						State z1
						State z2
						Transition tr0: z1 -> z2 {
							triggers {
								<incMsg1: p0>
							}
						}
						Transition init: initial -> z1
					}
				}
				Transition init: initial -> z1
				Transition tr0: z1 -> z2 {
					triggers {
						<incMsg1: p0>
					}
				}
				Transition tr1: z2 -> z1 {
					triggers {
						<incMsg2: p0>
					}
				}
			}
		}
	}

	ActorClass C extends TopActor {
		Behavior {
			StateMachine {
				State z1 {
					subgraph {
						EntryPoint tp0
						ExitPoint tp1
						Transition tr0: my tp0 -> z1
						State z1
						Transition tr1: z1 -> my tp1 {
							triggers {
								<incMsg1: p0>
							}
						}
					}
				}
				State z2
				Transition init: initial -> tp0 of z1
				Transition tr0: tp1 of z1 -> z2
			}
		}
	}

	ActorClass D extends TopActor {
		Structure {
			Attribute testId: room.basic.types.int16
		}
		Behavior {
			StateMachine {
				State z1 {
					subgraph {
						State z1 {
							entry {
								"EXPECT_EQUAL_INT16(testId, \"int16 not eqal\", 5, 6),"
								"etUnit_closeAll(testId);"
							}
						}
						TransitionPoint tp1
						Transition init: initial -> z1 {
							action {
								"testId = etUnit_openAll(\"log\", \"mytest\", \"ClassD\", \"InitSubFSM\");"
							}
						}
						Transition tr1: my tp1 -> z2 {
							triggers {
								<incMsg1: p0>
							}
						}
						State z2
					}
				}
				Transition init: initial -> z1
			}
		}
	}

	ActorClass E {
		Behavior {
			StateMachine {
				State z1
				State z2
				State z3
				ChoicePoint cp0
				Transition init: initial -> cp cp0
				Transition tr0: cp cp0 -> z1
				Transition tr1: cp cp0 -> z2 {
					cond {
						"true"
					}
				}
				Transition tr2: cp cp0 -> z3 {
					cond {
						"false"
					}
				}
				ChoicePoint cp1
				Transition tr5: cp cp0 -> cp cp1 {
					cond {
						"true"
					}
				}
				Transition tr4: cp cp1 -> z1
				Transition tr6: cp cp1 -> z3 {
					cond {
						"false"
					}
				}
			}
		}
	}

	ActorClass F extends TopActor {
		Behavior {
			StateMachine {
				State z1
				State z2
				handler TransitionPoint tp0
				Transition tr0: my tp0 -> z1 {
					triggers {
						<incMsg1: p0>
					}
				}
				Transition init: initial -> z2
			}
		}
	}

	ActorClass Z extends TopActor {
		Behavior {
			StateMachine {
				State z1
				ChoicePoint cp0
				ChoicePoint cp1
				Transition init: initial -> cp cp0
				Transition tr0: cp cp0 -> z1
				Transition tr1: cp cp0 -> cp cp1 {
					cond {
						"true"
					}
				}
				Transition tr2: cp cp1 -> z1
			}
		}
	}

	ActorClass AA extends A {
		Behavior {
			StateMachine {
				State z4
				Transition tr3: z1 -> z4 {
					triggers {
						<incMsg2: p0>
					}
				}
				Transition tr4: z3 -> z4 {
					triggers {
						<incMsg2: p0>
					}
				}
			}
		}
	}

	ActorClass BB extends B {
		Behavior {
			StateMachine {
				RefinedState B.sm.z2 {
					subgraph {
						State z3
						Transition tr1: z2 -> z3 {
							triggers {
								<incMsg1: p0>
							}
						}
					}
				}
			}
		}
	}

	ActorClass CC extends C {
		Behavior {
			StateMachine {
				RefinedState C.sm.z1 {
					subgraph {
						State z2
						EntryPoint tp2
						ExitPoint tp3
						Transition tr2: z1 -> z2 {
							triggers {
								<incMsg2: p0>
							}
						}
						Transition tr3: my tp2 -> z2
						Transition tr4: z2 -> my tp3 {
							triggers {
								<incMsg1: p0>
							}
						}
					}
				}
				State state0
				Transition tr1: z2 -> state0 {
					triggers {
						<incMsg1: p0>
					}
				}
				Transition tr2: state0 -> tp2 of z1 {
					triggers {
						<incMsg1: p0>
					}
				}
				Transition tr3: tp3 of z1 -> z2
			}
		}
	}

	ActorClass DD extends D {
		Behavior {
			StateMachine { }
		}
	}

	ActorClass EE extends E {
		Behavior {
			StateMachine {
				State z4
				Transition tr3: cp cp0 -> z4 {
					cond {
						"false"
					}
				}
			}
		}
	}

	ActorClass FF extends F {
		Behavior {
			StateMachine {
				Transition tr1: my tp0 -> my tp0 {
					triggers {
						<incMsg2: p0>
					}
				}
			}
		}
	}

	ActorClass AAA extends AA { }

}