RoomModel org.eclipse.etrice.integration.PingPongThreadTest {

	import room.basic.service.timing.* from "../../../runtime/org.eclipse.etrice.modellib/models/TimingService.room"
	import room.basic.types.java.* from "../../../runtime/org.eclipse.etrice.modellib/models/JavaTypes.room"

	LogicalSystem System_PingPong {
		SubSystemRef subsystem: SubSystem_PingPong
	}

	SubSystemClass SubSystem_PingPong {
		ActorRef application: PingPongTop
		ActorRef services: ATimingService
		LayerConnection ref application satisfied_by services.timer
		LayerConnection ref application satisfied_by services.timeout
		LogicalThread mrPingThread prio=5 {application.MrPing}
		LogicalThread mrPong1Thread prio=5 {application.MrPong1}
		LogicalThread mrPong2Thread prio=5 {application.MrPong2}
		LogicalThread mrPong3Thread prio=5 {application.MrPong3}
	}

	ActorClass PingPongTop {
		Structure {
			ActorRef MrPing: MrPingActor
			ActorRef MrPong1: MrPongActor1
			ActorRef MrPong2: MrPongActor1
			ActorRef MrPong3: MrPongActor2
			Binding MrPing.PingPongPort and MrPong1.PingPongPort
			Binding MrPing.PingPongPort2 and MrPong2.PingPongPort
			Binding MrPing.PingPongPort3 and MrPong3.PingPongPort
		}
	}

	ActorClass MrPingActor {
		Interface {
			conjugated Port PingPongPort  : PingPongProtocol
			conjugated Port PingPongPort2 : PingPongProtocol
			conjugated Port PingPongPort3 : PingPongProtocol 
		}
		Structure {
			usercode1 {
				"import org.eclipse.etrice.runtime.java.messaging.RTServices;"
			}

			external Port PingPongPort 
			external Port PingPongPort2
			external Port PingPongPort3
			SAP timer: PTimeout
			Attribute count : int32
			Attribute pongCount : int32
		}
		Behavior {
			StateMachine {
				Transition tr0: initial -> waitForTimer {
					action {
						"count = 0;"
						"timer.Start(10);"
					}
				}
				Transition tr1: waitForTimer -> waitForPong {
					triggers {
						<timeoutTick: timer>
					}
					action {
						"PingPongPort.ping();"
						"PingPongPort2.ping();"
						"pongCount = 0;"
					}
				}
				Transition tr3: waitForPong -> cp cp0 {
					triggers {
						<pong: PingPongPort2>
						or
 						<pong: PingPongPort>					
					}
					action {
						"pongCount++;"
					}
				}
				Transition tr5: cp cp0 -> waitForTimer {
					action {
						"if (count++ > 100) {"
						"RTServices.getInstance().getSubSystem().testFinished(0);"
						"} else {"
						"System.out.println(count);"
						"timer.Start(5);}"
					}
				}
				Transition tr6: cp cp0 -> waitForPong {
					cond {
						"pongCount < 2"
					}
				}
				ChoicePoint cp0
				State waitForTimer { }
				State waitForPong { }
			}
		}
	}

	ActorClass MrPongActor1 {
		Interface {
			Port PingPongPort: PingPongProtocol
		}
		Structure {
			external Port PingPongPort
		}
		Behavior {
			StateMachine {
				Transition tr0: initial -> waitForPing { }
				Transition myTrigger: waitForPing -> waitForPing {
					triggers {
						<ping: PingPongPort>
					}
					action {
						"PingPongPort.pong();"
					}
				}
				State waitForPing { }
			}
		}
	}
	
	ActorClass MrPongActor2 {
		Interface {
			Port PingPongPort: PingPongProtocol
		}
		Structure {
			external Port PingPongPort
		}
		Behavior {
			StateMachine {
				Transition tr0: initial -> waitForPing {
					action {
						"// simulate blocking call e.g. Queue"
						"try{"
						"Thread.sleep(5000);"
						"}catch (InterruptedException e){}"
					}
				}
				Transition myTrigger: waitForPing -> waitForPing {
					triggers {
						<ping: PingPongPort>
					}
					action {
						"PingPongPort.pong();"
					}
				}
				State waitForPing { }
			}
		}
	}	
	
	ProtocolClass PingPongProtocol {
		incoming {
			Message ping()
		}
		outgoing {
			Message pong()
		}
	}

}