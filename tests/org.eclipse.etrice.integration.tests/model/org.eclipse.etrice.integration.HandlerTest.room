RoomModel org.eclipse.etrice.integration.HandlerTest {

	import room.basic.types.* from "../../../runtime/org.eclipse.etrice.modellib.java/models/Types.room"
	
	LogicalSystem System_HandlerTest {
		SubSystemRef SubSystem_HandlerTest: SubSystem_HandlerTest
	}

	SubSystemClass SubSystem_HandlerTest {
		ActorRef HandlerTest_Top: HandlerTest_Top
//		LogicalThread t1 prio=5 {HandlerTest_Top.tester}
//		LogicalThread t2 prio=5 {HandlerTest_Top.handlerUser}
	}

	ActorClass HandlerTest_Top {
		Structure {
			ActorRef tester: Tester
			ActorRef handlerUser: HandlerUser
			
			Binding tester.TestPort1 and handlerUser.TestPort1
		}
		Behavior { }
	}

	ActorClass HandlerUser {
		Interface {
			Port TestPort1: TestProtocol
		}
		Structure {	
			usercode1{
				"import org.eclipse.etrice.runtime.java.messaging.RTServices;"
			}
			external Port TestPort1
			Attribute counter: int32
			Attribute caseId: int32
		}
		Behavior {
			Operation HandlerUser() {
				"caseId = etUnit_openAll(\"tmp\", \"HandlerTest.etu\", \"HandlerTest_suite\", \"HandlerTest_case\");"
			}
			Operation ~HandlerUser() {
				"etUnit_closeAll(caseId);"
			}
			StateMachine {
				Transition tr0: my tp0 -> my tp0 {
					triggers {
						<msg1: TestPort1>
					}
					action {
						"System.out.println(\"top level handler action no guard \");"
						"EXPECT_ORDER(caseId, \"<|MODEL_LOCATION|>\", 11);"
					}
				}
				Transition tr1: my tp1 -> my tp1 {
					triggers {
						<msg1: TestPort1 guard {
							"p1==3"
						}>
					}
					action {
						"System.out.println(\"top level self transition action P1=>3\");"
						"EXPECT_ORDER(caseId, \"<|MODEL_LOCATION|>\", 12);"
					}
				}
				Transition init: initial -> tp2 of state0 {
					action {
						"System.out.println(\"top level initial transition\");"
						"short list[] = {13,15,16,22,23,11,24,17,14,12,13,16,23,70,24,17,14,114,113,111,11,70,24,17,120,16,23,24,17,121,18,19,25,18,20,19,21,18,19,25,18,19,14,117};"
						"EXPECT_ORDER_START(caseId, list, list.length);"
					}
				}
				Transition tr9: state0 -> cp cp1 {
					triggers {
						<msg1: TestPort1 guard {
							"p1==4"
						}>
					}
					action {
						"System.out.println(\"tr9 transition action\");"
						"EXPECT_ORDER(caseId, \"<|MODEL_LOCATION|>\", 114);"
					}
				}
				Transition tr5: my tp1 -> my tp1 {
					triggers {
						<msg2: TestPort1 guard {
							"p1==4"
						}>
					}
					action {
						"System.out.println(\"top level self transition action P1=>4\");"
						"EXPECT_ORDER(caseId, \"<|MODEL_LOCATION|>\", 50);"
					}
				}
				Transition tr7: my tp0 -> state0 {
					triggers {
						<msg1: TestPort1 guard {
							"p1==7"
						}>
					}
					action {
						"System.out.println(\"top level handler action p1=>7 \");"
						"EXPECT_ORDER(caseId, \"<|MODEL_LOCATION|>\", 70);"
					}
				}
				Transition tr6: my tp0 -> my tp0 {
					triggers {
						<msg1: TestPort1 guard {
							"p1==12"
						}>
					}
					action {
						"System.out.println(\"top level handler action p1=>12 \");"
						"EXPECT_ORDER(caseId, \"<|MODEL_LOCATION|>\", 110);"
					}
				}
				Transition tr8: cp cp1 -> state1 {
					action {
						"System.out.println(\"tr8 transition action\");"
						"EXPECT_ORDER(caseId, \"<|MODEL_LOCATION|>\", 113);"
					}
				}
				Transition tr10: cp cp1 -> state0 {
					cond {
						"p1!=4"
					}
					action {
						"System.out.println(\"tr4 transition action\");"
						"EXPECT_ORDER(caseId, \"<|MODEL_LOCATION|>\", 115);"
					}
				}
				Transition tr4: my tp1 -> testOk {
					triggers {
						<msg6: TestPort1>
					}
					action {
						"System.out.println(\"tp1 transition to choice action\");"
						"EXPECT_ORDER_END(caseId, \"<|MODEL_LOCATION|>\", 117);"
					}
				}
				ChoicePoint cp1
				handler TransitionPoint tp0
				TransitionPoint tp1
				State state0 {
					entry {
						"System.out.println(\"state 0 entry action\");"
						"EXPECT_ORDER(caseId, \"<|MODEL_LOCATION|>\", 13);"
					}
					exit {
						"System.out.println(\"state 0 exit action\");"
						"EXPECT_ORDER(caseId, \"<|MODEL_LOCATION|>\", 14);"
					}
					subgraph {
						Transition tr0: state1 -> state2 {
							triggers {
								<msg5: TestPort1>
							}
						}
						Transition tr1: my tp0 -> my tp0 {
							triggers {
								<msg3: TestPort1>
							}
							action {
								"System.out.println(\"state 0 handler action no guard\");"
								"EXPECT_ORDER(caseId, \"<|MODEL_LOCATION|>\", 20);"
							}
						}
						Transition tr2: my tp1 -> my tp1 {
							triggers {
								<msg4: TestPort1>
							}
							action {
								"System.out.println(\"state 0 tp1 self transition action\");"
								"EXPECT_ORDER(caseId, \"<|MODEL_LOCATION|>\", 21);"
							}
						}
						Transition tr3: state2 -> state2 {
							triggers {
								<msg1: TestPort1>
							}
							action {
								"System.out.println(\"state 0/2 self transition action\");"
								"EXPECT_ORDER(caseId, \"<|MODEL_LOCATION|>\", 25);"
							}
						}
						Transition tr4: my tp2 -> tp0 of state1 {
							action {
								"System.out.println(\"state 0 tp2 transition action\");"
								"EXPECT_ORDER(caseId, \"<|MODEL_LOCATION|>\", 15);"
							}
						}
						Transition tr5: my tp0 -> my tp0 {
							triggers {
								<msg1: TestPort1 guard {
									"p1==5"
								}>
							}
							action {
								"System.out.println(\"state 0 handler action P1 => 5\");"
								"EXPECT_ORDER(caseId, \"<|MODEL_LOCATION|>\", 52);"
							}
						}
						Transition init: initial -> state2 {
							action {
								"System.out.println(\"state 0 initial transition\");"
								"EXPECT_ORDER(caseId, \"<|MODEL_LOCATION|>\", 53);"
							}
						}
						Transition tr6: state1 -> state1 {
							triggers {
								<msg1: TestPort1 guard {
									"p1==8"
								}>
							}
							action {
								"System.out.println(\"state 0/1 self transition\");"
								"EXPECT_ORDER(caseId, \"<|MODEL_LOCATION|>\", 54);"
							}
						}
						Transition tr7: my tp1 -> state1 {
							triggers {
								<msg2: TestPort1 guard {
									"p1==5"
								}>
							}
							action {
								"System.out.println(\"state 0 tp1 p1=>5\");"
								"EXPECT_ORDER(caseId, \"<|MODEL_LOCATION|>\", 120);"
							}
						}
						Transition tr8: my tp1 -> state2 {
							triggers {
								<msg2: TestPort1 guard {
									"p1==6"
								}>
							}
							action {
								"System.out.println(\"state 0 tp1 action P1 => 6\");"
								"EXPECT_ORDER(caseId, \"<|MODEL_LOCATION|>\", 121);"
							}
						}
						handler TransitionPoint tp0
						TransitionPoint tp1
						EntryPoint tp2
						State state1 {
							entry {
								"System.out.println(\"state 0/1 entry action\");"
								"EXPECT_ORDER(caseId, \"<|MODEL_LOCATION|>\", 16);"
							}
							exit {
								"System.out.println(\"state 0/1 exit action\");"
								"EXPECT_ORDER(caseId, \"<|MODEL_LOCATION|>\", 17);"
							}
							subgraph {
								Transition tr0: my tp0 -> state7 {
									action {
										"System.out.println(\"state 0/1 transition entry action\");"
										"EXPECT_ORDER(caseId, \"<|MODEL_LOCATION|>\", 22);"
									}
								}
								Transition init: initial -> state7 {
									action {
										"System.out.println(\"state 0/1 initial transition\");"
										"EXPECT_ORDER(caseId, \"<|MODEL_LOCATION|>\", 121);"
									}
								}
								EntryPoint tp0
								State state7 {
									entry {
										"System.out.println(\"state 0/1/7 entry action\");"
										"EXPECT_ORDER(caseId, \"<|MODEL_LOCATION|>\", 23);"
									}
									exit {
										"System.out.println(\"state 0/1/7 exit action\");"
										"EXPECT_ORDER(caseId, \"<|MODEL_LOCATION|>\", 24);"
									}
								}
							}
						}
						State state2 {
							entry {
								"System.out.println(\"state 0/2 entry action\");"
								"EXPECT_ORDER(caseId, \"<|MODEL_LOCATION|>\", 18);"
							}
							exit {
								"System.out.println(\"state 0/2 exit action\");"
								"EXPECT_ORDER(caseId, \"<|MODEL_LOCATION|>\", 19);"
							}
						}
					}
				}
				State testOk {
					entry {
						"System.out.println(\"Test ok\");"
						"RTServices.getInstance().getSubSystem().testFinished(etUnit_isSuccess(caseId)?0:1);"
					}
				}
				State state1 {
					entry {
						"System.out.println(\"state 1 entry action\");"
						"EXPECT_ORDER(caseId, \"<|MODEL_LOCATION|>\", 111);"
					}
					exit {
						"System.out.println(\"state 1 exit action\");"
						"EXPECT_ORDER(caseId, \"<|MODEL_LOCATION|>\", 112);"
					}
				}
			}
		}
	}

	ActorClass Tester {
		Interface {
			conjugated Port TestPort1: TestProtocol
		}
		Structure {
			external Port TestPort1
		}
		Behavior {
			StateMachine {
				Transition init: initial -> state0 {
					action {
						"TestPort1.msg1(2);"
						"System.out.println(\"msg1(2) sent \");"
						"TestPort1.msg1(3);"
						"System.out.println(\"msg1(3) sent \");"
						"TestPort1.msg1(7);"
						"System.out.println(\"msg1(7) sent \");"
						"TestPort1.msg1(4);"
						"System.out.println(\"msg1(4) sent \");"
						"TestPort1.msg1(5);"
						"System.out.println(\"msg1(5) sent \");"
						"TestPort1.msg1(7);"
						"System.out.println(\"msg1(7) sent \");"
						"TestPort1.msg2(5);"
						"System.out.println(\"msg2(5) sent \");"
						"TestPort1.msg2(6);"
						"System.out.println(\"msg2(6) sent \");"
						""
						""
						""
						"TestPort1.msg1(5);"
						"System.out.println(\"msg1(5) sent \");"
						"TestPort1.msg3();"
						"System.out.println(\"msg3() sent \");"
						"TestPort1.msg4();"
						"System.out.println(\"msg4() sent \");"
						"TestPort1.msg1(8);"
						"System.out.println(\"msg1(8) sent \");"
						"TestPort1.msg6(12);"
						"System.out.println(\"msg6(12) sent \");"
					}
				}
				State state0
			}
		}
	}

	ProtocolClass TestProtocol {
		incoming {
			Message msg1(p1:int32)
			Message msg2(p1:int32)
			Message msg3()
			Message msg4()
			Message msg5(p1:int32)
			Message msg6(p1:int32)
		}
	}

}