RoomModel org.eclipse.etrice.integration.ChoicePointTest {
	
	LogicalSystem System_HandlerTest {
		SubSystemRef SubSystem_CPTest: SubSystem_CPTest
	}

	SubSystemClass SubSystem_CPTest {
		ActorRef HandlerTest_Top: CPTest_Top
	}

	ActorClass CPTest_Top {
		Structure {
			ActorRef cp_tester: CPTester
			ActorRef cp_user: CPUser
			Binding cp_tester.TestPort1 and cp_user.TestPort1
		}
		Behavior { }
	}

	ActorClass CPUser {
		Interface {
			Port TestPort1: TestProtocol
		}
		Structure {
			usercode1{
				"import org.eclipse.etrice.integration.tests.helpers.*;"
				"import org.eclipse.etrice.runtime.java.messaging.RTServices;"
			}
			usercode2 {
				"private CRC16Generator crcGen = new CRC16Generator();"
			}
			external Port TestPort1
			Attribute counter: int32
		}
		Behavior {
			StateMachine {
				Transition init: initial -> cp cp0 {
					action {
						"System.out.println(\"Top Level init transition\");"
						"crcGen.update(10);"
						"counter = 0;"
					}
				}
				Transition tr4: cp cp0 -> state0 {
					action {
						"System.out.println(\"choice0: else code\");"
						"crcGen.update(17);"
					}
				}
				Transition LastCheck: cp cp0 -> state0 {
					cond {
						"counter == 0"
					}
					action {
						"System.out.println(\"choice0: true code\");"
						"crcGen.update(15);"
					}
				}
				Transition tr1: state0 -> cp cp1 {
					triggers {
						<msg1: TestPort1>
					}
					action {
						"System.out.println(\"state0: msg1: transition code\");"
						"crcGen.update(18);"
					}
				}
				Transition tr2: cp cp1 -> state0 {
					action {
						"System.out.println(\"choice1: else code\");"
						"crcGen.update(10);"
						"counter=3;"
					}
				}
				Transition tr3: cp cp1 -> tp0 of state1 {
					cond {
						"counter == 4"
					}
					action {
						"System.out.println(\"choice1: to entry state1 code\");"
						"crcGen.update(30);"
					}
				}
				Transition tr5: state1 -> cp cp2 {
					triggers {
						<msg1: TestPort1 guard {
							"counter==2"
						}>
					}
					action {
						"System.out.println(\"state1: msg1: transition code\");"
						"crcGen.update(30);"
						"System.out.printf(\"CRC: %d \\n\", crcGen.getCrc());"
					}
				}
				Transition tr0: cp cp2 -> testFalse {
					action {
						"System.out.println(\"Test false\");"
						"RTServices.getInstance().getSubSystem().testFinished(1);"
					}
				}
				Transition tr6: cp cp2 -> testOk {
					cond {
						"crcGen.getCrc()==26639"
					}
					action {
						"System.out.println(\"Test ok\");"
						"RTServices.getInstance().getSubSystem().testFinished(0);"
					}
				}
				Transition tr11: cp cp1 -> state1 {
					cond {
						"counter == 3"
					}
					action {
						"System.out.println(\"choice1: history to State1 transition code\");"
						"crcGen.update(25);"
						"counter = 1;"
					}
				}
				Transition tr7: state1 -> state0 {
					triggers {
						<msg1: TestPort1 guard {
							"counter==1"
						}>
					}
					action {
						"System.out.println(\"state1: msg1: transition code to state0\");"
						"crcGen.update(51);"
						"counter=4;"
					}
				}
				Transition tr8: my tp0 -> my tp0 {
					triggers {
						<msg1: TestPort1>
					}
					action {
						"System.out.println(\"Handler: msg1 received \");"
						"crcGen.update(115);"
						"counter = 2;"
					}
				}
				ChoicePoint cp0
				ChoicePoint cp1
				ChoicePoint cp2
				handler TransitionPoint tp0
				State state0 {
					entry {
						"System.out.println(\"state0: entry code\");"
						"crcGen.update(12);"
					}
					exit {
						"System.out.println(\"state0: exit code\");"
						"crcGen.update(13);"
					}
				}
				State state1 {
					entry {
						"System.out.println(\"state1: entry code\");"
						"crcGen.update(20);"
					}
					exit {
						"System.out.println(\"state1: exit code\");"
						"crcGen.update(21);"
					}
					subgraph {
						Transition tr1: my tp0 -> cp cp0 {
							action {
								"System.out.println(\"state1: tp0: transition code\");"
								"crcGen.update(25);"
							}
						}
						Transition tr2: cp cp0 -> state0 {
							action {
								"System.out.println(\"state1: choice false code\");"
								"crcGen.update(57);"
							}
						}
						Transition tr0: cp cp0 -> state0 {
							cond {
								"counter == 4"
							}
							action {
								"System.out.println(\"state1 choice: true code\");"
								"crcGen.update(56);"
							}
						}
						Transition init: initial -> state0 {
							action {
								"System.out.println(\"state1 initial transition code\");"
								"crcGen.update(53);"
							}
						}
						ChoicePoint cp0
						EntryPoint tp0
						State state0 {
							entry {
								"System.out.println(\"state1\\\\0: entry code\");"
								"System.out.printf(\"counter => %d\\n\",counter);"
								"crcGen.update(22);"
							}
							exit {
								"System.out.println(\"state1\\\\0: exit code\");"
								"crcGen.update(23);"
							}
						}
					}
				}
				State testOk
				State testFalse
			}
		}
	}

	ActorClass CPTester {
		Interface {
			conjugated Port TestPort1: TestProtocol
		}
		Structure {
			external Port TestPort1
		}
		Behavior {
			StateMachine {
				Transition init: initial -> state0 {
					action {
						"TestPort1.msg1();"
						"System.out.println(\"msg1 sent \");"
						""
						"TestPort1.msg1();"
						"System.out.println(\"msg1 sent \");"
						""
						"TestPort1.msg1();"
						"System.out.println(\"msg1 sent \");"
						""
						"TestPort1.msg1();"
						"System.out.println(\"msg1 sent \");"
						""
						"TestPort1.msg1();"
						"System.out.println(\"msg1 sent \");"
						""
						"TestPort1.msg1();"
						"System.out.println(\"msg1 sent \");"
					}
				}
				State state0
			}
		}
	}

	ProtocolClass TestProtocol {
		incoming {
			Message msg1()
			Message msg2()
			Message msg3()
			Message msg4()
			Message msg5()
		}
		outgoing{}
	}

}