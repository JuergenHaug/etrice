apply plugin: 'c'
apply plugin: 'cpp'
apply plugin: 'java-base'

apply from: "$rootDir/gradle/etTest.gradle"

dependencies {
	modelpath_c project(path: ':runtime:org.eclipse.etrice.modellib.c', configuration: 'modelpath_c')
	modelpath_cpp project(path: ':runtime:org.eclipse.etrice.modellib.cpp', configuration: 'modelpath_cpp')
	modelpath_java project(path: ':runtime:org.eclipse.etrice.modellib.java', configuration: 'modelpath_java')
	modelpath_c files('models')
	modelpath_cpp files('models')
	modelpath_java files('models')
}

def genericPhysical = 'models/GenericPhysical.etphys'

def tests = [
	actorCommunicationTest: 	['models/ActorCommunicationTest.room', genericPhysical],
	choicePointTest: 			['models/ChoicePointTest.room', genericPhysical],
	choicePointTestExtended: 	['models/ChoicePointTestExtended.room', genericPhysical],
	dataDrivenTest:				['models/DataDrivenTest.room', genericPhysical],
	/* enumTest:				['models/EnumTest.room', genericPhysical],		not supported in c++	*/
	compileTest:				['models/CompileTest.room', genericPhysical, 'models/StatemachineInterfaceTest.room', 'models/StatemachineInterfaceInheritedTest.room', 'models/StatemachineInterfaceTest.room', 'models/ContinuationTransitionTest.room'],
	
	handlerTest:				['models/HandlerTest.room', genericPhysical],
	operationInheritanceTest:	['models/OperationInheritanceTest.room', genericPhysical],
	pingPongThreadTest:			['models/PingPongThreadTest.etmap', 'models/PingPongThreadTest.room'],
	pingPongThreadReplPortTest:	['models/PingPongThreadReplPortTest.etmap', 'models/PingPongThreadReplPortTest.room']
]

tests.each { name, models ->
	createTest('c', name, models)
	createTest('cpp', name, models)
	createTest('java', name, models)
}

// Enum Test
createTest('c', 'enumTest', ['models/EnumTest.room', genericPhysical])
createTest('java', 'enumTest', ['models/EnumTest.room', genericPhysical])

// DetailExpressionCompile Test
createTest('c', 'detailExpressionCompileTest', [genericPhysical, 'models/DetailExpressionTest.room', 'models/DetailExpressionEnum.room', 'models/DetailExpressionTypes.room'])
createTest('java', 'detailExpressionCompileTest', [genericPhysical, 'models/DetailExpressionTest.room', 'models/DetailExpressionEnum.room', 'models/DetailExpressionTypes.room'])

// VarargsTest
createTest('c', 'varargsTest', [genericPhysical, 'models/VarargsTest.room'])
createTest('java', 'varargsTest', [genericPhysical, 'models/VarargsTest.room'])

// SubSystemUserCodeTest
createTest('c', 'subSystemUserCodeTest', ['models/SubSystemUserCodeTest.room', genericPhysical])
