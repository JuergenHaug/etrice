/** generated */

RoomModel ContractMonitor_monitors {

	import etrice.api.types.*
	import etrice.api.contracts.definitions.*
	import ContractMonitor.*

	ActorClass LoginProtocolMonitor extends etrice.api.contracts.monitors.AContractMonitorBase {
		Interface {
			conjugated Port serverPort: PLoginProtocol
			Port loginPort: PLoginProtocol
		}
		Structure {
			Attribute attempts: int16
			external Port serverPort
			external Port loginPort
		}
		Behavior {
			StateMachine {
				State idle {
					entry '''attempts = 0;'''
				}
				State connecting
				State connected
				State checking {
					entry '''attempts += 1;'''
				}
				Transition init0: initial -> idle
				Transition tr0: idle -> connecting {
					triggers {
						<hello: loginPort>
					}
					action '''serverPort.hello();'''
				}
				Transition tr1: connecting -> connected {
					triggers {
						<hello: serverPort>
					}
					action '''loginPort.hello();'''
				}
				Transition tr2: connected -> idle {
					triggers {
						<cancel: loginPort>
					}
					action '''serverPort.cancel();'''
				}
				Transition tr3: connected -> checking {
					triggers {
						<login: loginPort>
					}
					action '''serverPort.login(transitionData);'''
				}
				Transition tr4: checking -> idle {
					triggers {
						<ok: serverPort>
					}
					action '''loginPort.ok();'''
				}
				Transition tr5: checking -> connected {
					triggers {
						<wrong: serverPort guard '''attempts <= 3'''>
					}
					action '''loginPort.wrong();'''
				}
				Transition tr6: checking -> idle {
					triggers {
						<attemptsLimitReached: serverPort guard '''attempts > 3'''>
					}
					action '''loginPort.attemptsLimitReached();'''
				}
				Transition idle_catch_from_loginPort_login: idle -> idle {
					triggers {
						<login: loginPort>
					}
					action '''
						onViolation("[Protocol ERROR] In protocol PLoginProtocol message login from port loginPort is not allowed in state idle");
						if(forwardInvalidMessages) {
							serverPort.login(transitionData);
						}
					'''
				}
				Transition idle_catch_from_loginPort_cancel: idle -> idle {
					triggers {
						<cancel: loginPort>
					}
					action '''
						onViolation("[Protocol ERROR] In protocol PLoginProtocol message cancel from port loginPort is not allowed in state idle");
						if(forwardInvalidMessages) {
							serverPort.cancel();
						}
					'''
				}
				Transition idle_catch_from_serverPort_hello: idle -> idle {
					triggers {
						<hello: serverPort>
					}
					action '''
						onViolation("[Protocol ERROR] In protocol PLoginProtocol message hello from port serverPort is not allowed in state idle");
						if(forwardInvalidMessages) {
							loginPort.hello();
						}
					'''
				}
				Transition idle_catch_from_serverPort_wrong: idle -> idle {
					triggers {
						<wrong: serverPort>
					}
					action '''
						onViolation("[Protocol ERROR] In protocol PLoginProtocol message wrong from port serverPort is not allowed in state idle");
						if(forwardInvalidMessages) {
							loginPort.wrong();
						}
					'''
				}
				Transition idle_catch_from_serverPort_attemptsLimitReached: idle -> idle {
					triggers {
						<attemptsLimitReached: serverPort>
					}
					action '''
						onViolation("[Protocol ERROR] In protocol PLoginProtocol message attemptsLimitReached from port serverPort is not allowed in state idle");
						if(forwardInvalidMessages) {
							loginPort.attemptsLimitReached();
						}
					'''
				}
				Transition idle_catch_from_serverPort_ok: idle -> idle {
					triggers {
						<ok: serverPort>
					}
					action '''
						onViolation("[Protocol ERROR] In protocol PLoginProtocol message ok from port serverPort is not allowed in state idle");
						if(forwardInvalidMessages) {
							loginPort.ok();
						}
					'''
				}
				Transition connecting_catch_from_loginPort_hello: connecting -> connecting {
					triggers {
						<hello: loginPort>
					}
					action '''
						onViolation("[Protocol ERROR] In protocol PLoginProtocol message hello from port loginPort is not allowed in state connecting");
						if(forwardInvalidMessages) {
							serverPort.hello();
						}
					'''
				}
				Transition connecting_catch_from_loginPort_login: connecting -> connecting {
					triggers {
						<login: loginPort>
					}
					action '''
						onViolation("[Protocol ERROR] In protocol PLoginProtocol message login from port loginPort is not allowed in state connecting");
						if(forwardInvalidMessages) {
							serverPort.login(transitionData);
						}
					'''
				}
				Transition connecting_catch_from_loginPort_cancel: connecting -> connecting {
					triggers {
						<cancel: loginPort>
					}
					action '''
						onViolation("[Protocol ERROR] In protocol PLoginProtocol message cancel from port loginPort is not allowed in state connecting");
						if(forwardInvalidMessages) {
							serverPort.cancel();
						}
					'''
				}
				Transition connecting_catch_from_serverPort_wrong: connecting -> connecting {
					triggers {
						<wrong: serverPort>
					}
					action '''
						onViolation("[Protocol ERROR] In protocol PLoginProtocol message wrong from port serverPort is not allowed in state connecting");
						if(forwardInvalidMessages) {
							loginPort.wrong();
						}
					'''
				}
				Transition connecting_catch_from_serverPort_attemptsLimitReached: connecting -> connecting {
					triggers {
						<attemptsLimitReached: serverPort>
					}
					action '''
						onViolation("[Protocol ERROR] In protocol PLoginProtocol message attemptsLimitReached from port serverPort is not allowed in state connecting");
						if(forwardInvalidMessages) {
							loginPort.attemptsLimitReached();
						}
					'''
				}
				Transition connecting_catch_from_serverPort_ok: connecting -> connecting {
					triggers {
						<ok: serverPort>
					}
					action '''
						onViolation("[Protocol ERROR] In protocol PLoginProtocol message ok from port serverPort is not allowed in state connecting");
						if(forwardInvalidMessages) {
							loginPort.ok();
						}
					'''
				}
				Transition connected_catch_from_loginPort_hello: connected -> connected {
					triggers {
						<hello: loginPort>
					}
					action '''
						onViolation("[Protocol ERROR] In protocol PLoginProtocol message hello from port loginPort is not allowed in state connected");
						if(forwardInvalidMessages) {
							serverPort.hello();
						}
					'''
				}
				Transition connected_catch_from_serverPort_hello: connected -> connected {
					triggers {
						<hello: serverPort>
					}
					action '''
						onViolation("[Protocol ERROR] In protocol PLoginProtocol message hello from port serverPort is not allowed in state connected");
						if(forwardInvalidMessages) {
							loginPort.hello();
						}
					'''
				}
				Transition connected_catch_from_serverPort_wrong: connected -> connected {
					triggers {
						<wrong: serverPort>
					}
					action '''
						onViolation("[Protocol ERROR] In protocol PLoginProtocol message wrong from port serverPort is not allowed in state connected");
						if(forwardInvalidMessages) {
							loginPort.wrong();
						}
					'''
				}
				Transition connected_catch_from_serverPort_attemptsLimitReached: connected -> connected {
					triggers {
						<attemptsLimitReached: serverPort>
					}
					action '''
						onViolation("[Protocol ERROR] In protocol PLoginProtocol message attemptsLimitReached from port serverPort is not allowed in state connected");
						if(forwardInvalidMessages) {
							loginPort.attemptsLimitReached();
						}
					'''
				}
				Transition connected_catch_from_serverPort_ok: connected -> connected {
					triggers {
						<ok: serverPort>
					}
					action '''
						onViolation("[Protocol ERROR] In protocol PLoginProtocol message ok from port serverPort is not allowed in state connected");
						if(forwardInvalidMessages) {
							loginPort.ok();
						}
					'''
				}
				Transition checking_catch_from_loginPort_hello: checking -> checking {
					triggers {
						<hello: loginPort>
					}
					action '''
						onViolation("[Protocol ERROR] In protocol PLoginProtocol message hello from port loginPort is not allowed in state checking");
						if(forwardInvalidMessages) {
							serverPort.hello();
						}
					'''
				}
				Transition checking_catch_from_loginPort_login: checking -> checking {
					triggers {
						<login: loginPort>
					}
					action '''
						onViolation("[Protocol ERROR] In protocol PLoginProtocol message login from port loginPort is not allowed in state checking");
						if(forwardInvalidMessages) {
							serverPort.login(transitionData);
						}
					'''
				}
				Transition checking_catch_from_loginPort_cancel: checking -> checking {
					triggers {
						<cancel: loginPort>
					}
					action '''
						onViolation("[Protocol ERROR] In protocol PLoginProtocol message cancel from port loginPort is not allowed in state checking");
						if(forwardInvalidMessages) {
							serverPort.cancel();
						}
					'''
				}
				Transition checking_catch_from_serverPort_hello: checking -> checking {
					triggers {
						<hello: serverPort>
					}
					action '''
						onViolation("[Protocol ERROR] In protocol PLoginProtocol message hello from port serverPort is not allowed in state checking");
						if(forwardInvalidMessages) {
							loginPort.hello();
						}
					'''
				}
				Transition checking_catch_from_serverPort_wrong: checking -> checking {
					triggers {
						<wrong: serverPort>
					}
					action '''
						onViolation("[Protocol ERROR] In protocol PLoginProtocol message wrong from port serverPort is not allowed in state checking");
						if(forwardInvalidMessages) {
							loginPort.wrong();
						}
					'''
				}
				Transition checking_catch_from_serverPort_attemptsLimitReached: checking -> checking {
					triggers {
						<attemptsLimitReached: serverPort>
					}
					action '''
						onViolation("[Protocol ERROR] In protocol PLoginProtocol message attemptsLimitReached from port serverPort is not allowed in state checking");
						if(forwardInvalidMessages) {
							loginPort.attemptsLimitReached();
						}
					'''
				}
			}
		}
	}
}
