/**
 * Copyright (c) 2014 protos software gmbh (http://www.protos.de).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * CONTRIBUTORS:
 * 		Henrik Rentz-Reichert
 */
package org.eclipse.etrice.core.fsm.postprocessing;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.etrice.core.common.postprocessing.PostprocessingHelpers;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.GeneratedMetamodel;

/**
 * This post processor adds documentation to the generated EMF model.
 * By intention no {@code null} checks are performed. This way developers
 * find easier if the referenced class, attribute or reference isn't found.
 */
@SuppressWarnings("all")
public class DocuPostprocessor {
  public void process(final GeneratedMetamodel metamodel) {
    final EPackage pckg = metamodel.getEPackage();
    EClass cls = PostprocessingHelpers.getClass(pckg, "AbstractInterfaceItem");
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("An abstract interface item to be overridden in derived grammars.");
    _builder.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder.toString());
    EAttribute _attribute = PostprocessingHelpers.getAttribute(cls, "name");
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("By this name the interface item is referred to in the model.");
    _builder_1.newLine();
    PostprocessingHelpers.setDocumentation(_attribute, _builder_1.toString());
    EClass _class = PostprocessingHelpers.getClass(pckg, "StateGraphNode");
    cls = _class;
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("The super class of");
    _builder_2.newLine();
    _builder_2.append("<ul>");
    _builder_2.newLine();
    _builder_2.append("  ");
    _builder_2.append("<li>{@link State}</li>");
    _builder_2.newLine();
    _builder_2.append("  ");
    _builder_2.append("<li>{@link ChoicePoint}</li>");
    _builder_2.newLine();
    _builder_2.append("  ");
    _builder_2.append("<li>{@link TrPoint}</li>");
    _builder_2.newLine();
    _builder_2.append("</ul>");
    _builder_2.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_2.toString());
    EClass _class_1 = PostprocessingHelpers.getClass(pckg, "StateGraphItem");
    cls = _class_1;
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("The super class of");
    _builder_3.newLine();
    _builder_3.append("<ul>");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("<li>{@link StateGraphNode}</li>");
    _builder_3.newLine();
    _builder_3.append("  ");
    _builder_3.append("<li>{@link Transition}</li>");
    _builder_3.newLine();
    _builder_3.append("</ul>");
    _builder_3.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_3.toString());
    EClass _class_2 = PostprocessingHelpers.getClass(pckg, "State");
    cls = _class_2;
    StringConcatenation _builder_4 = new StringConcatenation();
    _builder_4.append("The super class of");
    _builder_4.newLine();
    _builder_4.append("<ul>");
    _builder_4.newLine();
    _builder_4.append("  ");
    _builder_4.append("<li>{@link SimpleState}</li>");
    _builder_4.newLine();
    _builder_4.append("  ");
    _builder_4.append("<li>{@link RefinedState}</li>");
    _builder_4.newLine();
    _builder_4.append("</ul>");
    _builder_4.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_4.toString());
    EReference _reference = PostprocessingHelpers.getReference(cls, "docu");
    StringConcatenation _builder_5 = new StringConcatenation();
    _builder_5.append("This is an optional documentation.");
    _builder_5.newLine();
    PostprocessingHelpers.setDocumentation(_reference, _builder_5.toString());
    EReference _reference_1 = PostprocessingHelpers.getReference(cls, "entryCode");
    StringConcatenation _builder_6 = new StringConcatenation();
    _builder_6.append("This is an optional entry code written in the code generator\'s target language.");
    _builder_6.newLine();
    _builder_6.append("It is executed when the state is entered.");
    _builder_6.newLine();
    PostprocessingHelpers.setDocumentation(_reference_1, _builder_6.toString());
    EReference _reference_2 = PostprocessingHelpers.getReference(cls, "exitCode");
    StringConcatenation _builder_7 = new StringConcatenation();
    _builder_7.append("This is an optional entry code written in the code generator\'s target language.");
    _builder_7.newLine();
    _builder_7.append("It is executed when the state is left.");
    _builder_7.newLine();
    PostprocessingHelpers.setDocumentation(_reference_2, _builder_7.toString());
    EReference _reference_3 = PostprocessingHelpers.getReference(cls, "doCode");
    StringConcatenation _builder_8 = new StringConcatenation();
    _builder_8.append("This is an optional do code written in the code generator\'s target language.");
    _builder_8.newLine();
    _builder_8.append("It is executed whenever the actor instance is polled (applies only to");
    _builder_8.newLine();
    _builder_8.append("data driven and sync actor classes).");
    _builder_8.newLine();
    PostprocessingHelpers.setDocumentation(_reference_3, _builder_8.toString());
    EReference _reference_4 = PostprocessingHelpers.getReference(cls, "subgraph");
    StringConcatenation _builder_9 = new StringConcatenation();
    _builder_9.append("This is an optional sub state graph of this state.");
    _builder_9.newLine();
    PostprocessingHelpers.setDocumentation(_reference_4, _builder_9.toString());
    EClass _class_3 = PostprocessingHelpers.getClass(pckg, "StateGraph");
    cls = _class_3;
    StringConcatenation _builder_10 = new StringConcatenation();
    _builder_10.append("A state graph is a directed graph composed of");
    _builder_10.newLine();
    _builder_10.append("{@link StateGraphNode}s as nodes and {@link Transition}s as edges.");
    _builder_10.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_10.toString());
    EReference _reference_5 = PostprocessingHelpers.getReference(cls, "states");
    StringConcatenation _builder_11 = new StringConcatenation();
    _builder_11.append("This is a list of all states of this state graph.");
    _builder_11.newLine();
    PostprocessingHelpers.setDocumentation(_reference_5, _builder_11.toString());
    EReference _reference_6 = PostprocessingHelpers.getReference(cls, "trPoints");
    StringConcatenation _builder_12 = new StringConcatenation();
    _builder_12.append("This is a list of all transition, entry and exit points of this state graph.");
    _builder_12.newLine();
    PostprocessingHelpers.setDocumentation(_reference_6, _builder_12.toString());
    EReference _reference_7 = PostprocessingHelpers.getReference(cls, "chPoints");
    StringConcatenation _builder_13 = new StringConcatenation();
    _builder_13.append("This is a list of all choice points of this state graph.");
    _builder_13.newLine();
    PostprocessingHelpers.setDocumentation(_reference_7, _builder_13.toString());
    EReference _reference_8 = PostprocessingHelpers.getReference(cls, "transitions");
    StringConcatenation _builder_14 = new StringConcatenation();
    _builder_14.append("This is a list of all transitions of this state graph.");
    _builder_14.newLine();
    PostprocessingHelpers.setDocumentation(_reference_8, _builder_14.toString());
    EReference _reference_9 = PostprocessingHelpers.getReference(cls, "refinedTransitions");
    StringConcatenation _builder_15 = new StringConcatenation();
    _builder_15.append("This is a list of all refined transitions of this state graph.");
    _builder_15.newLine();
    PostprocessingHelpers.setDocumentation(_reference_9, _builder_15.toString());
    EClass _class_4 = PostprocessingHelpers.getClass(pckg, "SimpleState");
    cls = _class_4;
    StringConcatenation _builder_16 = new StringConcatenation();
    _builder_16.append("A simple state is the standard case of a @link State}.");
    _builder_16.newLine();
    _builder_16.append("It comprises and <em>entry</em>, <em>exit</em> and <em>do</em> code");
    _builder_16.newLine();
    _builder_16.append("and it can contain another {@link StateGraph} as sub state");
    _builder_16.newLine();
    _builder_16.append("graph.");
    _builder_16.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_16.toString());
    EAttribute _attribute_1 = PostprocessingHelpers.getAttribute(cls, "name");
    StringConcatenation _builder_17 = new StringConcatenation();
    _builder_17.append("By this name the state is referred to in the model.");
    _builder_17.newLine();
    PostprocessingHelpers.setDocumentation(_attribute_1, _builder_17.toString());
    EClass _class_5 = PostprocessingHelpers.getClass(pckg, "RefinedState");
    cls = _class_5;
    StringConcatenation _builder_18 = new StringConcatenation();
    _builder_18.append("A refined state can be used only in a derived {@link ActorClass}.");
    _builder_18.newLine();
    _builder_18.append("It refers to a {@link State} in the inherited state machine");
    _builder_18.newLine();
    _builder_18.append("which is refined by adding detail code and/or");
    _builder_18.newLine();
    _builder_18.append("{@link StateGraphItem}s in the sub state graph.");
    _builder_18.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_18.toString());
    EReference _reference_10 = PostprocessingHelpers.getReference(cls, "target");
    StringConcatenation _builder_19 = new StringConcatenation();
    _builder_19.append("This is the referenced state in the base class state machine.");
    _builder_19.newLine();
    PostprocessingHelpers.setDocumentation(_reference_10, _builder_19.toString());
    EClass _class_6 = PostprocessingHelpers.getClass(pckg, "DetailCode");
    cls = _class_6;
    StringConcatenation _builder_20 = new StringConcatenation();
    _builder_20.append("The detail code is a string which represents the verbatim code");
    _builder_20.newLine();
    _builder_20.append("of the code generator target language.");
    _builder_20.newLine();
    _builder_20.newLine();
    _builder_20.append("<p>");
    _builder_20.newLine();
    _builder_20.append("The detail code is parsed by the {@link org.eclipse.etrice.generator.base.DetailCodeTranslator}");
    _builder_20.newLine();
    _builder_20.append("which replaces certain frequent constructs like access of members");
    _builder_20.newLine();
    _builder_20.append("and sending a message via a port by target language specific code.");
    _builder_20.newLine();
    _builder_20.append("</p>");
    _builder_20.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_20.toString());
    EAttribute _attribute_2 = PostprocessingHelpers.getAttribute(cls, "lines");
    StringConcatenation _builder_21 = new StringConcatenation();
    _builder_21.append("This is the program code in the code generator\'s target language.");
    _builder_21.newLine();
    _builder_21.append("Due backward compability this is a list of strings. Actually the size of the list should be 0 or 1.");
    _builder_21.newLine();
    PostprocessingHelpers.setDocumentation(_attribute_2, _builder_21.toString());
    EClass _class_7 = PostprocessingHelpers.getClass(pckg, "TrPoint");
    cls = _class_7;
    StringConcatenation _builder_22 = new StringConcatenation();
    _builder_22.append("The super class of");
    _builder_22.newLine();
    _builder_22.append("<ul>");
    _builder_22.newLine();
    _builder_22.append("  ");
    _builder_22.append("<li>{@link TransitionPoint}</li>");
    _builder_22.newLine();
    _builder_22.append("  ");
    _builder_22.append("<li>{@link EntryPoint}</li>");
    _builder_22.newLine();
    _builder_22.append("  ");
    _builder_22.append("<li>{@link ExitPoint}</li>");
    _builder_22.newLine();
    _builder_22.append("</ul>");
    _builder_22.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_22.toString());
    EAttribute _attribute_3 = PostprocessingHelpers.getAttribute(cls, "name");
    StringConcatenation _builder_23 = new StringConcatenation();
    _builder_23.append("By this name the transition, entry or exit point is referred to in the model.");
    _builder_23.newLine();
    PostprocessingHelpers.setDocumentation(_attribute_3, _builder_23.toString());
    EClass _class_8 = PostprocessingHelpers.getClass(pckg, "TransitionPoint");
    cls = _class_8;
    StringConcatenation _builder_24 = new StringConcatenation();
    _builder_24.append("A transition point is located at the border of a {@link State}");
    _builder_24.newLine();
    _builder_24.append("and is not visible or accessible outside. It is used");
    _builder_24.newLine();
    _builder_24.append("to globally handle messages. If a {@link Transition} starting");
    _builder_24.newLine();
    _builder_24.append("at a transition point triggers then exit and entry codes");
    _builder_24.newLine();
    _builder_24.append("are executed as usual as long as the handler flag of the");
    _builder_24.newLine();
    _builder_24.append("transition point isn\'t set.");
    _builder_24.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_24.toString());
    EAttribute _attribute_4 = PostprocessingHelpers.getAttribute(cls, "handler");
    StringConcatenation _builder_25 = new StringConcatenation();
    _builder_25.append("If this flag is {@code true} then for a transition triggerd from this point");
    _builder_25.newLine();
    _builder_25.append("no exit and entry codes of the states left and entered are executed.");
    _builder_25.newLine();
    PostprocessingHelpers.setDocumentation(_attribute_4, _builder_25.toString());
    EClass _class_9 = PostprocessingHelpers.getClass(pckg, "EntryPoint");
    cls = _class_9;
    StringConcatenation _builder_26 = new StringConcatenation();
    _builder_26.append("An entry point is located at the border of a {@link State}");
    _builder_26.newLine();
    _builder_26.append("and is visible and accessible outside. Outside");
    _builder_26.newLine();
    _builder_26.append("it can be the target of a {@link Transition} and inside the source.");
    _builder_26.newLine();
    _builder_26.append("If it is not connected in the interior then it is a");
    _builder_26.newLine();
    _builder_26.append("<em>transition to history</em>.");
    _builder_26.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_26.toString());
    EClass _class_10 = PostprocessingHelpers.getClass(pckg, "ExitPoint");
    cls = _class_10;
    StringConcatenation _builder_27 = new StringConcatenation();
    _builder_27.append("An exit point is located at the border of a {@link State}");
    _builder_27.newLine();
    _builder_27.append("and is visible and accessible outside. Outside");
    _builder_27.newLine();
    _builder_27.append("it can be the source of a {@link Transition} and inside the target.");
    _builder_27.newLine();
    _builder_27.append("If it is not connected in the interior then it is a");
    _builder_27.newLine();
    _builder_27.append("<em>group transition</em>.");
    _builder_27.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_27.toString());
    EClass _class_11 = PostprocessingHelpers.getClass(pckg, "ChoicePoint");
    cls = _class_11;
    StringConcatenation _builder_28 = new StringConcatenation();
    _builder_28.append("A choice point corresponds to an {@code if else} construct.");
    _builder_28.newLine();
    _builder_28.append("It is the target of one or more {@link Transition}s and the");
    _builder_28.newLine();
    _builder_28.append("source of several {@link Transition}s.");
    _builder_28.newLine();
    _builder_28.append("One outgoing transitions must be a {@link ContinuationTransition}");
    _builder_28.newLine();
    _builder_28.append("and corresponds to the final else. It is called the");
    _builder_28.newLine();
    _builder_28.append("<em>default branch</em> of the choice point.");
    _builder_28.newLine();
    _builder_28.append("All other outgoing transitions have to be {@link CPBranchTransition}s.");
    _builder_28.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_28.toString());
    EAttribute _attribute_5 = PostprocessingHelpers.getAttribute(cls, "name");
    StringConcatenation _builder_29 = new StringConcatenation();
    _builder_29.append("By this name the choice point is referred to in the model.");
    _builder_29.newLine();
    PostprocessingHelpers.setDocumentation(_attribute_5, _builder_29.toString());
    EReference _reference_11 = PostprocessingHelpers.getReference(cls, "docu");
    StringConcatenation _builder_30 = new StringConcatenation();
    _builder_30.append("This is an optional documentation.");
    _builder_30.newLine();
    PostprocessingHelpers.setDocumentation(_reference_11, _builder_30.toString());
    EClass _class_12 = PostprocessingHelpers.getClass(pckg, "Transition");
    cls = _class_12;
    StringConcatenation _builder_31 = new StringConcatenation();
    _builder_31.append("The super class of");
    _builder_31.newLine();
    _builder_31.append("<ul>");
    _builder_31.newLine();
    _builder_31.append("  ");
    _builder_31.append("<li>{@link InitialTransition}</li>");
    _builder_31.newLine();
    _builder_31.append("  ");
    _builder_31.append("<li>{@link NonInitialTransition}</li>");
    _builder_31.newLine();
    _builder_31.append("</ul>");
    _builder_31.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_31.toString());
    EAttribute _attribute_6 = PostprocessingHelpers.getAttribute(cls, "name");
    StringConcatenation _builder_32 = new StringConcatenation();
    _builder_32.append("This is an optional name of the transition.");
    _builder_32.newLine();
    PostprocessingHelpers.setDocumentation(_attribute_6, _builder_32.toString());
    EReference _reference_12 = PostprocessingHelpers.getReference(cls, "docu");
    StringConcatenation _builder_33 = new StringConcatenation();
    _builder_33.append("This is an optional documentation.");
    _builder_33.newLine();
    PostprocessingHelpers.setDocumentation(_reference_12, _builder_33.toString());
    EReference _reference_13 = PostprocessingHelpers.getReference(cls, "to");
    StringConcatenation _builder_34 = new StringConcatenation();
    _builder_34.append("This is the target node of the transition.");
    _builder_34.newLine();
    PostprocessingHelpers.setDocumentation(_reference_13, _builder_34.toString());
    EReference _reference_14 = PostprocessingHelpers.getReference(cls, "action");
    StringConcatenation _builder_35 = new StringConcatenation();
    _builder_35.append("This is an optional code in the code generator\'s target language.");
    _builder_35.newLine();
    _builder_35.append("It is execute when the transition fires.");
    _builder_35.newLine();
    PostprocessingHelpers.setDocumentation(_reference_14, _builder_35.toString());
    EClass _class_13 = PostprocessingHelpers.getClass(pckg, "NonInitialTransition");
    cls = _class_13;
    StringConcatenation _builder_36 = new StringConcatenation();
    _builder_36.append("The super class of");
    _builder_36.newLine();
    _builder_36.append("<ul>");
    _builder_36.newLine();
    _builder_36.append("  ");
    _builder_36.append("<li>{@link TransitionChainStartTransition}</li>");
    _builder_36.newLine();
    _builder_36.append("  ");
    _builder_36.append("<li>{@link ContinuationTransition}</li>");
    _builder_36.newLine();
    _builder_36.append("  ");
    _builder_36.append("<li>{@link CPBranchTransition}</li>");
    _builder_36.newLine();
    _builder_36.append("</ul>");
    _builder_36.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_36.toString());
    EReference _reference_15 = PostprocessingHelpers.getReference(cls, "from");
    StringConcatenation _builder_37 = new StringConcatenation();
    _builder_37.append("This is the source node of the transition.");
    _builder_37.newLine();
    PostprocessingHelpers.setDocumentation(_reference_15, _builder_37.toString());
    EClass _class_14 = PostprocessingHelpers.getClass(pckg, "TransitionChainStartTransition");
    cls = _class_14;
    StringConcatenation _builder_38 = new StringConcatenation();
    _builder_38.append("The super class of");
    _builder_38.newLine();
    _builder_38.append("<ul>");
    _builder_38.newLine();
    _builder_38.append("  ");
    _builder_38.append("<li>{@link TriggeredTransition}</li>");
    _builder_38.newLine();
    _builder_38.append("  ");
    _builder_38.append("<li>{@link GuardedTransition}</li>");
    _builder_38.newLine();
    _builder_38.append("</ul>");
    _builder_38.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_38.toString());
    EClass _class_15 = PostprocessingHelpers.getClass(pckg, "InitialTransition");
    cls = _class_15;
    StringConcatenation _builder_39 = new StringConcatenation();
    _builder_39.append("There can be at most one initial transition in a {@link StateGraph}.");
    _builder_39.newLine();
    _builder_39.append("It defines the starting point of the state graph and is traversed");
    _builder_39.newLine();
    _builder_39.append("exactly once when the state graph is accessed for the first time.");
    _builder_39.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_39.toString());
    EClass _class_16 = PostprocessingHelpers.getClass(pckg, "ContinuationTransition");
    cls = _class_16;
    StringConcatenation _builder_40 = new StringConcatenation();
    _builder_40.append("Continuation transitions start at entry or exit points");
    _builder_40.newLine();
    _builder_40.append("({@link EntryPoint}s or {@link ExitPoint}s) or form");
    _builder_40.newLine();
    _builder_40.append("the default branch of a {@link ChoicePoint}.");
    _builder_40.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_40.toString());
    EClass _class_17 = PostprocessingHelpers.getClass(pckg, "TriggeredTransition");
    cls = _class_17;
    StringConcatenation _builder_41 = new StringConcatenation();
    _builder_41.append("Triggered transitions start at a {@link State} or a {@link TransitionPoint}.");
    _builder_41.newLine();
    _builder_41.append("It defines a list of {@link Trigger}s that specify the conditions");
    _builder_41.newLine();
    _builder_41.append("when the transition fires and is traversed. This kind of");
    _builder_41.newLine();
    _builder_41.append("transition is only allowed in event driven and mixed (async) state");
    _builder_41.newLine();
    _builder_41.append("machines.");
    _builder_41.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_41.toString());
    EReference _reference_16 = PostprocessingHelpers.getReference(cls, "triggers");
    StringConcatenation _builder_42 = new StringConcatenation();
    _builder_42.append("This is a list of all triggers of the transition.");
    _builder_42.newLine();
    PostprocessingHelpers.setDocumentation(_reference_16, _builder_42.toString());
    EClass _class_18 = PostprocessingHelpers.getClass(pckg, "GuardedTransition");
    cls = _class_18;
    StringConcatenation _builder_43 = new StringConcatenation();
    _builder_43.append("A guarded transition is very similar to a {@link CPBranchTransition}.");
    _builder_43.newLine();
    _builder_43.append("It defines a guard condition which lets the transition fire if");
    _builder_43.newLine();
    _builder_43.append("evaluated to {@code true}. This kind of transition is only");
    _builder_43.newLine();
    _builder_43.append("allowed in data driven or moixed (async) state machines.");
    _builder_43.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_43.toString());
    EReference _reference_17 = PostprocessingHelpers.getReference(cls, "guard");
    StringConcatenation _builder_44 = new StringConcatenation();
    _builder_44.append("This is the guard condition of the transition specified in the code generator\'s target language.");
    _builder_44.newLine();
    _builder_44.append("It has to evaluate to a boolean value.");
    _builder_44.newLine();
    PostprocessingHelpers.setDocumentation(_reference_17, _builder_44.toString());
    EClass _class_19 = PostprocessingHelpers.getClass(pckg, "CPBranchTransition");
    cls = _class_19;
    StringConcatenation _builder_45 = new StringConcatenation();
    _builder_45.append("The choice point branch transitions is allowed only as outgoing");
    _builder_45.newLine();
    _builder_45.append("transition of {@link ChoicePoint}s.");
    _builder_45.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_45.toString());
    EReference _reference_18 = PostprocessingHelpers.getReference(cls, "condition");
    StringConcatenation _builder_46 = new StringConcatenation();
    _builder_46.append("This is the condition of the choice point branch specified in the code generator\'s target language.");
    _builder_46.newLine();
    _builder_46.append("It has to evaluate to a boolean value.");
    _builder_46.newLine();
    PostprocessingHelpers.setDocumentation(_reference_18, _builder_46.toString());
    EClass _class_20 = PostprocessingHelpers.getClass(pckg, "RefinedTransition");
    cls = _class_20;
    StringConcatenation _builder_47 = new StringConcatenation();
    _builder_47.append("The refined transition is only allowed in {@link StateGraph}s");
    _builder_47.newLine();
    _builder_47.append("of derived {@link ActorClass}es. It targets a {@link Transition}");
    _builder_47.newLine();
    _builder_47.append("of the base class state machine.");
    _builder_47.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_47.toString());
    EReference _reference_19 = PostprocessingHelpers.getReference(cls, "action");
    StringConcatenation _builder_48 = new StringConcatenation();
    _builder_48.append("This is an optional code in the code generator\'s target language.");
    _builder_48.newLine();
    _builder_48.append("It is execute when the transition fires.");
    _builder_48.newLine();
    PostprocessingHelpers.setDocumentation(_reference_19, _builder_48.toString());
    EReference _reference_20 = PostprocessingHelpers.getReference(cls, "target");
    StringConcatenation _builder_49 = new StringConcatenation();
    _builder_49.append("This is the referenced transition in the base class state machine.");
    _builder_49.newLine();
    PostprocessingHelpers.setDocumentation(_reference_20, _builder_49.toString());
    EReference _reference_21 = PostprocessingHelpers.getReference(cls, "docu");
    StringConcatenation _builder_50 = new StringConcatenation();
    _builder_50.append("This is an optional documentation.");
    _builder_50.newLine();
    PostprocessingHelpers.setDocumentation(_reference_21, _builder_50.toString());
    EClass _class_21 = PostprocessingHelpers.getClass(pckg, "TransitionTerminal");
    cls = _class_21;
    StringConcatenation _builder_51 = new StringConcatenation();
    _builder_51.append("The super class of");
    _builder_51.newLine();
    _builder_51.append("<ul>");
    _builder_51.newLine();
    _builder_51.append("  ");
    _builder_51.append("<li>{@link StateTerminal}</li>");
    _builder_51.newLine();
    _builder_51.append("  ");
    _builder_51.append("<li>{@link TrPointTerminal}</li>");
    _builder_51.newLine();
    _builder_51.append("  ");
    _builder_51.append("<li>{@link SubStateTrPointTerminal}</li>");
    _builder_51.newLine();
    _builder_51.append("  ");
    _builder_51.append("<li>{@link ChoicepointTerminal}</li>");
    _builder_51.newLine();
    _builder_51.append("</ul>");
    _builder_51.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_51.toString());
    EClass _class_22 = PostprocessingHelpers.getClass(pckg, "StateTerminal");
    cls = _class_22;
    StringConcatenation _builder_52 = new StringConcatenation();
    _builder_52.append("The terminal point (source or target) of a transition ending");
    _builder_52.newLine();
    _builder_52.append("at a {@link State}.");
    _builder_52.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_52.toString());
    EReference _reference_22 = PostprocessingHelpers.getReference(cls, "state");
    StringConcatenation _builder_53 = new StringConcatenation();
    _builder_53.append("This is the target state.");
    _builder_53.newLine();
    PostprocessingHelpers.setDocumentation(_reference_22, _builder_53.toString());
    EClass _class_23 = PostprocessingHelpers.getClass(pckg, "TrPointTerminal");
    cls = _class_23;
    StringConcatenation _builder_54 = new StringConcatenation();
    _builder_54.append("The terminal point (source or target) of a transition ending");
    _builder_54.newLine();
    _builder_54.append("at a local {@link TrPoint}.");
    _builder_54.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_54.toString());
    EReference _reference_23 = PostprocessingHelpers.getReference(cls, "trPoint");
    StringConcatenation _builder_55 = new StringConcatenation();
    _builder_55.append("This is the target transition, entry or exit point.");
    _builder_55.newLine();
    PostprocessingHelpers.setDocumentation(_reference_23, _builder_55.toString());
    EClass _class_24 = PostprocessingHelpers.getClass(pckg, "SubStateTrPointTerminal");
    cls = _class_24;
    StringConcatenation _builder_56 = new StringConcatenation();
    _builder_56.append("The terminal point (source or target) of a transition ending");
    _builder_56.newLine();
    _builder_56.append("at a {@link TrPoint} of a sub {@link State}.");
    _builder_56.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_56.toString());
    EReference _reference_24 = PostprocessingHelpers.getReference(cls, "state");
    StringConcatenation _builder_57 = new StringConcatenation();
    _builder_57.append("This is the target state.");
    _builder_57.newLine();
    PostprocessingHelpers.setDocumentation(_reference_24, _builder_57.toString());
    EReference _reference_25 = PostprocessingHelpers.getReference(cls, "trPoint");
    StringConcatenation _builder_58 = new StringConcatenation();
    _builder_58.append("This is the target entry or exit point contained in the target state.");
    _builder_58.newLine();
    PostprocessingHelpers.setDocumentation(_reference_25, _builder_58.toString());
    EClass _class_25 = PostprocessingHelpers.getClass(pckg, "ChoicepointTerminal");
    cls = _class_25;
    StringConcatenation _builder_59 = new StringConcatenation();
    _builder_59.append("The terminal point (source or target) of a transition ending");
    _builder_59.newLine();
    _builder_59.append("at a {@link ChoicepointTerminal}.");
    _builder_59.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_59.toString());
    EReference _reference_26 = PostprocessingHelpers.getReference(cls, "cp");
    StringConcatenation _builder_60 = new StringConcatenation();
    _builder_60.append("This is the target choice point.");
    _builder_60.newLine();
    PostprocessingHelpers.setDocumentation(_reference_26, _builder_60.toString());
    EClass _class_26 = PostprocessingHelpers.getClass(pckg, "Trigger");
    cls = _class_26;
    StringConcatenation _builder_61 = new StringConcatenation();
    _builder_61.append("A transition trigger is a list of {@link MessageFromIf} pairs");
    _builder_61.newLine();
    _builder_61.append("and an optional {@link Guard}.");
    _builder_61.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_61.toString());
    EReference _reference_27 = PostprocessingHelpers.getReference(cls, "msgFromIfPairs");
    StringConcatenation _builder_62 = new StringConcatenation();
    _builder_62.append("This is a list of message/interface item pairs.");
    _builder_62.newLine();
    PostprocessingHelpers.setDocumentation(_reference_27, _builder_62.toString());
    EReference _reference_28 = PostprocessingHelpers.getReference(cls, "guard");
    StringConcatenation _builder_63 = new StringConcatenation();
    _builder_63.append("This is an optional guard condition of the trigger specified in the code generator\'s target language.");
    _builder_63.newLine();
    _builder_63.append("It has to evaluate to a boolean value.");
    _builder_63.newLine();
    PostprocessingHelpers.setDocumentation(_reference_28, _builder_63.toString());
    EClass _class_27 = PostprocessingHelpers.getClass(pckg, "MessageFromIf");
    cls = _class_27;
    StringConcatenation _builder_64 = new StringConcatenation();
    _builder_64.append("A pair consisting of a {@link Message} arising from an");
    _builder_64.newLine();
    _builder_64.append("{@link InterfaceItem}.");
    _builder_64.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_64.toString());
    EReference _reference_29 = PostprocessingHelpers.getReference(cls, "message");
    StringConcatenation _builder_65 = new StringConcatenation();
    _builder_65.append("This is the triggerering message (or event).");
    _builder_65.newLine();
    PostprocessingHelpers.setDocumentation(_reference_29, _builder_65.toString());
    EReference _reference_30 = PostprocessingHelpers.getReference(cls, "from");
    StringConcatenation _builder_66 = new StringConcatenation();
    _builder_66.append("This is the interface item where the message occurred.");
    _builder_66.newLine();
    PostprocessingHelpers.setDocumentation(_reference_30, _builder_66.toString());
    EClass _class_28 = PostprocessingHelpers.getClass(pckg, "Guard");
    cls = _class_28;
    StringConcatenation _builder_67 = new StringConcatenation();
    _builder_67.append("A detail code that evaluates to a boolean in the target");
    _builder_67.newLine();
    _builder_67.append("language.");
    _builder_67.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_67.toString());
    EReference _reference_31 = PostprocessingHelpers.getReference(cls, "guard");
    StringConcatenation _builder_68 = new StringConcatenation();
    _builder_68.append("This is a guard condition specified in the code generator\'s target language.");
    _builder_68.newLine();
    _builder_68.append("It has to evaluate to a boolean value.");
    _builder_68.newLine();
    PostprocessingHelpers.setDocumentation(_reference_31, _builder_68.toString());
    EClass _class_29 = PostprocessingHelpers.getClass(pckg, "ProtocolSemantics");
    cls = _class_29;
    StringConcatenation _builder_69 = new StringConcatenation();
    _builder_69.append("An optional semantics specification as part of a {@link ProtocolClass}.");
    _builder_69.newLine();
    _builder_69.append("The semantic is defined as a <em>legal execution tree</em>.");
    _builder_69.newLine();
    _builder_69.append("This tree is composed of incoming and outgoing messages and each path through");
    _builder_69.newLine();
    _builder_69.append("this tree is a valid sequence of messages exchanged through a port instance.");
    _builder_69.newLine();
    _builder_69.newLine();
    _builder_69.append("<p>");
    _builder_69.newLine();
    _builder_69.append("The semantics are composed using {@link SemanticsRule}s.");
    _builder_69.newLine();
    _builder_69.append("</p>");
    _builder_69.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_69.toString());
    EReference _reference_32 = PostprocessingHelpers.getReference(cls, "rules");
    StringConcatenation _builder_70 = new StringConcatenation();
    _builder_70.append("This is a list of semantic rules.");
    _builder_70.newLine();
    PostprocessingHelpers.setDocumentation(_reference_32, _builder_70.toString());
    EClass _class_30 = PostprocessingHelpers.getClass(pckg, "SemanticsRule");
    cls = _class_30;
    StringConcatenation _builder_71 = new StringConcatenation();
    _builder_71.append("The super class of");
    _builder_71.newLine();
    _builder_71.append("<ul>");
    _builder_71.newLine();
    _builder_71.append("  ");
    _builder_71.append("<li>{@link InSemanticsRule}</li>");
    _builder_71.newLine();
    _builder_71.append("  ");
    _builder_71.append("<li>{@link OutSemanticsRule}</li>");
    _builder_71.newLine();
    _builder_71.append("</ul>");
    _builder_71.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_71.toString());
    EReference _reference_33 = PostprocessingHelpers.getReference(cls, "msg");
    StringConcatenation _builder_72 = new StringConcatenation();
    _builder_72.append("The message to which this rule applies.");
    _builder_72.newLine();
    PostprocessingHelpers.setDocumentation(_reference_33, _builder_72.toString());
    EReference _reference_34 = PostprocessingHelpers.getReference(cls, "followUps");
    StringConcatenation _builder_73 = new StringConcatenation();
    _builder_73.append("The possible follow up rules.");
    _builder_73.newLine();
    PostprocessingHelpers.setDocumentation(_reference_34, _builder_73.toString());
    EClass _class_31 = PostprocessingHelpers.getClass(pckg, "InSemanticsRule");
    cls = _class_31;
    StringConcatenation _builder_74 = new StringConcatenation();
    _builder_74.append("A {@link SemanticsRule} for incoming messages.");
    _builder_74.newLine();
    _builder_74.append("The rule points to an incoming messages and allows follow-up rules.");
    _builder_74.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_74.toString());
    EClass _class_32 = PostprocessingHelpers.getClass(pckg, "OutSemanticsRule");
    cls = _class_32;
    StringConcatenation _builder_75 = new StringConcatenation();
    _builder_75.append("A {@link SemanticsRule} for outgoing messages.");
    _builder_75.newLine();
    _builder_75.append("The rule points to an outgoing messages and allows follow-up rules.");
    _builder_75.newLine();
    PostprocessingHelpers.setDocumentation(cls, _builder_75.toString());
  }
}
