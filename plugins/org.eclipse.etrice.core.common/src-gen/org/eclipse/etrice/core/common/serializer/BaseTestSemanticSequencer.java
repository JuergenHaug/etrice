/*
 * generated by Xtext
 */
package org.eclipse.etrice.core.common.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.etrice.core.common.base.Annotation;
import org.eclipse.etrice.core.common.base.AnnotationType;
import org.eclipse.etrice.core.common.base.BasePackage;
import org.eclipse.etrice.core.common.base.BooleanLiteral;
import org.eclipse.etrice.core.common.base.Documentation;
import org.eclipse.etrice.core.common.base.EnumAnnotationAttribute;
import org.eclipse.etrice.core.common.base.Import;
import org.eclipse.etrice.core.common.base.IntLiteral;
import org.eclipse.etrice.core.common.base.KeyValue;
import org.eclipse.etrice.core.common.base.LiteralArray;
import org.eclipse.etrice.core.common.base.RealLiteral;
import org.eclipse.etrice.core.common.base.SimpleAnnotationAttribute;
import org.eclipse.etrice.core.common.base.StringLiteral;
import org.eclipse.etrice.core.common.basetest.BaseModel;
import org.eclipse.etrice.core.common.basetest.BasetestPackage;
import org.eclipse.etrice.core.common.services.BaseTestGrammarAccess;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;

@SuppressWarnings("all")
public class BaseTestSemanticSequencer extends BaseSemanticSequencer {

	@Inject
	private BaseTestGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BasePackage.ANNOTATION:
				sequence_Annotation(context, (Annotation) semanticObject); 
				return; 
			case BasePackage.ANNOTATION_TYPE:
				sequence_AnnotationType(context, (AnnotationType) semanticObject); 
				return; 
			case BasePackage.BOOLEAN_LITERAL:
				sequence_BooleanLiteral(context, (BooleanLiteral) semanticObject); 
				return; 
			case BasePackage.DOCUMENTATION:
				sequence_Documentation(context, (Documentation) semanticObject); 
				return; 
			case BasePackage.ENUM_ANNOTATION_ATTRIBUTE:
				sequence_EnumAnnotationAttribute(context, (EnumAnnotationAttribute) semanticObject); 
				return; 
			case BasePackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case BasePackage.INT_LITERAL:
				sequence_IntLiteral(context, (IntLiteral) semanticObject); 
				return; 
			case BasePackage.KEY_VALUE:
				sequence_KeyValue(context, (KeyValue) semanticObject); 
				return; 
			case BasePackage.LITERAL_ARRAY:
				sequence_LiteralArray(context, (LiteralArray) semanticObject); 
				return; 
			case BasePackage.REAL_LITERAL:
				sequence_RealLiteral(context, (RealLiteral) semanticObject); 
				return; 
			case BasePackage.SIMPLE_ANNOTATION_ATTRIBUTE:
				sequence_SimpleAnnotationAttribute(context, (SimpleAnnotationAttribute) semanticObject); 
				return; 
			case BasePackage.STRING_LITERAL:
				sequence_StringLiteral(context, (StringLiteral) semanticObject); 
				return; 
			}
		else if (epackage == BasetestPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BasetestPackage.BASE_MODEL:
				sequence_BaseModel(context, (BaseModel) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     BaseModel returns BaseModel
	 *
	 * Constraint:
	 *     (elements+=Annotation | elements+=AnnotationType)+
	 */
	protected void sequence_BaseModel(ISerializationContext context, BaseModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
