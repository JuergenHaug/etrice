/*
* generated by Xtext
*/

package org.eclipse.etrice.generator.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FSMtestGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFsmDefinitionsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFsmDefinitionsFsmDefinitionParserRuleCall_0_0 = (RuleCall)cFsmDefinitionsAssignment_0.eContents().get(0);
		private final Assignment cRandomTestsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cRandomTestsRandomTestParserRuleCall_1_0 = (RuleCall)cRandomTestsAssignment_1.eContents().get(0);
		
		//Model:
		//
		//	(FsmDefinitions+=FsmDefinition | RandomTests+=RandomTest)*;
		public ParserRule getRule() { return rule; }

		//(FsmDefinitions+=FsmDefinition | RandomTests+=RandomTest)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//FsmDefinitions+=FsmDefinition
		public Assignment getFsmDefinitionsAssignment_0() { return cFsmDefinitionsAssignment_0; }

		//FsmDefinition
		public RuleCall getFsmDefinitionsFsmDefinitionParserRuleCall_0_0() { return cFsmDefinitionsFsmDefinitionParserRuleCall_0_0; }

		//RandomTests+=RandomTest
		public Assignment getRandomTestsAssignment_1() { return cRandomTestsAssignment_1; }

		//RandomTest
		public RuleCall getRandomTestsRandomTestParserRuleCall_1_0() { return cRandomTestsRandomTestParserRuleCall_1_0; }
	}

	public class FsmDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FsmDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFsmdefinitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cInitialKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatesStateDeclarationParserRuleCall_3_0 = (RuleCall)cStatesAssignment_3.eContents().get(0);
		private final Assignment cStatesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatesStateDeclarationParserRuleCall_4_0 = (RuleCall)cStatesAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//FsmDefinition:
		//
		//	"fsmdefinition" name=ID "initial" states+=StateDeclaration states+=StateDeclaration* ";";
		public ParserRule getRule() { return rule; }

		//"fsmdefinition" name=ID "initial" states+=StateDeclaration states+=StateDeclaration* ";"
		public Group getGroup() { return cGroup; }

		//"fsmdefinition"
		public Keyword getFsmdefinitionKeyword_0() { return cFsmdefinitionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"initial"
		public Keyword getInitialKeyword_2() { return cInitialKeyword_2; }

		//states+=StateDeclaration
		public Assignment getStatesAssignment_3() { return cStatesAssignment_3; }

		//StateDeclaration
		public RuleCall getStatesStateDeclarationParserRuleCall_3_0() { return cStatesStateDeclarationParserRuleCall_3_0; }

		//states+=StateDeclaration*
		public Assignment getStatesAssignment_4() { return cStatesAssignment_4; }

		//StateDeclaration
		public RuleCall getStatesStateDeclarationParserRuleCall_4_0() { return cStatesStateDeclarationParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class RandomTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RandomTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRandomtestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFsmKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFsmAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cFsmFsmDefinitionCrossReference_3_0 = (CrossReference)cFsmAssignment_3.eContents().get(0);
		private final RuleCall cFsmFsmDefinitionIDTerminalRuleCall_3_0_1 = (RuleCall)cFsmFsmDefinitionCrossReference_3_0.eContents().get(1);
		private final Assignment cLoopsDeclarationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLoopsDeclarationLoopsDeclarationParserRuleCall_4_0 = (RuleCall)cLoopsDeclarationAssignment_4.eContents().get(0);
		private final Assignment cSeedDeclarationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSeedDeclarationSeedDeclarationParserRuleCall_5_0 = (RuleCall)cSeedDeclarationAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//RandomTest:
		//
		//	"randomtest" name=ID "fsm:" fsm=[FsmDefinition] loopsDeclaration=LoopsDeclaration seedDeclaration=SeedDeclaration?
		//
		//	";";
		public ParserRule getRule() { return rule; }

		//"randomtest" name=ID "fsm:" fsm=[FsmDefinition] loopsDeclaration=LoopsDeclaration seedDeclaration=SeedDeclaration? ";"
		public Group getGroup() { return cGroup; }

		//"randomtest"
		public Keyword getRandomtestKeyword_0() { return cRandomtestKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"fsm:"
		public Keyword getFsmKeyword_2() { return cFsmKeyword_2; }

		//fsm=[FsmDefinition]
		public Assignment getFsmAssignment_3() { return cFsmAssignment_3; }

		//[FsmDefinition]
		public CrossReference getFsmFsmDefinitionCrossReference_3_0() { return cFsmFsmDefinitionCrossReference_3_0; }

		//ID
		public RuleCall getFsmFsmDefinitionIDTerminalRuleCall_3_0_1() { return cFsmFsmDefinitionIDTerminalRuleCall_3_0_1; }

		//loopsDeclaration=LoopsDeclaration
		public Assignment getLoopsDeclarationAssignment_4() { return cLoopsDeclarationAssignment_4; }

		//LoopsDeclaration
		public RuleCall getLoopsDeclarationLoopsDeclarationParserRuleCall_4_0() { return cLoopsDeclarationLoopsDeclarationParserRuleCall_4_0; }

		//seedDeclaration=SeedDeclaration?
		public Assignment getSeedDeclarationAssignment_5() { return cSeedDeclarationAssignment_5; }

		//SeedDeclaration
		public RuleCall getSeedDeclarationSeedDeclarationParserRuleCall_5_0() { return cSeedDeclarationSeedDeclarationParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class GuardDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GuardDeclaration");
		private final Assignment cSignalAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSignalSignalDeclarationParserRuleCall_0 = (RuleCall)cSignalAssignment.eContents().get(0);
		
		//GuardDeclaration:
		//
		//	signal=SignalDeclaration;
		public ParserRule getRule() { return rule; }

		//signal=SignalDeclaration
		public Assignment getSignalAssignment() { return cSignalAssignment; }

		//SignalDeclaration
		public RuleCall getSignalSignalDeclarationParserRuleCall_0() { return cSignalSignalDeclarationParserRuleCall_0; }
	}

	public class TransitionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDestinationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cDestinationStateDeclarationCrossReference_3_0 = (CrossReference)cDestinationAssignment_3.eContents().get(0);
		private final RuleCall cDestinationStateDeclarationIDTerminalRuleCall_3_0_1 = (RuleCall)cDestinationStateDeclarationCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTriggerKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTriggerAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTriggerSignalDeclarationParserRuleCall_4_1_0 = (RuleCall)cTriggerAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cGuardsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTriggersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTriggersGuardDeclarationParserRuleCall_5_1_0 = (RuleCall)cTriggersAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cConstraintsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Alternatives cAlternatives_6_1 = (Alternatives)cGroup_6.eContents().get(1);
		private final Assignment cPreconditionAssignment_6_1_0 = (Assignment)cAlternatives_6_1.eContents().get(0);
		private final RuleCall cPreconditionPreconditionDeclarationParserRuleCall_6_1_0_0 = (RuleCall)cPreconditionAssignment_6_1_0.eContents().get(0);
		private final Assignment cPostconditionAssignment_6_1_1 = (Assignment)cAlternatives_6_1.eContents().get(1);
		private final RuleCall cPostconditionPostconditionDeclarationParserRuleCall_6_1_1_0 = (RuleCall)cPostconditionAssignment_6_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//TransitionDeclaration:
		//
		//	"transition" name=ID "to" destination=[StateDeclaration] ("trigger:" trigger=SignalDeclaration)? ("guards:"
		//
		//	triggers+=GuardDeclaration+)? ("constraints:" (precondition+=PreconditionDeclaration |
		//
		//	postcondition+=PostconditionDeclaration)+)? ";";
		public ParserRule getRule() { return rule; }

		//"transition" name=ID "to" destination=[StateDeclaration] ("trigger:" trigger=SignalDeclaration)? ("guards:"
		//
		//triggers+=GuardDeclaration+)? ("constraints:" (precondition+=PreconditionDeclaration |
		//
		//postcondition+=PostconditionDeclaration)+)? ";"
		public Group getGroup() { return cGroup; }

		//"transition"
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//destination=[StateDeclaration]
		public Assignment getDestinationAssignment_3() { return cDestinationAssignment_3; }

		//[StateDeclaration]
		public CrossReference getDestinationStateDeclarationCrossReference_3_0() { return cDestinationStateDeclarationCrossReference_3_0; }

		//ID
		public RuleCall getDestinationStateDeclarationIDTerminalRuleCall_3_0_1() { return cDestinationStateDeclarationIDTerminalRuleCall_3_0_1; }

		//("trigger:" trigger=SignalDeclaration)?
		public Group getGroup_4() { return cGroup_4; }

		//"trigger:"
		public Keyword getTriggerKeyword_4_0() { return cTriggerKeyword_4_0; }

		//trigger=SignalDeclaration
		public Assignment getTriggerAssignment_4_1() { return cTriggerAssignment_4_1; }

		//SignalDeclaration
		public RuleCall getTriggerSignalDeclarationParserRuleCall_4_1_0() { return cTriggerSignalDeclarationParserRuleCall_4_1_0; }

		//("guards:" triggers+=GuardDeclaration+)?
		public Group getGroup_5() { return cGroup_5; }

		//"guards:"
		public Keyword getGuardsKeyword_5_0() { return cGuardsKeyword_5_0; }

		//triggers+=GuardDeclaration+
		public Assignment getTriggersAssignment_5_1() { return cTriggersAssignment_5_1; }

		//GuardDeclaration
		public RuleCall getTriggersGuardDeclarationParserRuleCall_5_1_0() { return cTriggersGuardDeclarationParserRuleCall_5_1_0; }

		//("constraints:" (precondition+=PreconditionDeclaration | postcondition+=PostconditionDeclaration)+)?
		public Group getGroup_6() { return cGroup_6; }

		//"constraints:"
		public Keyword getConstraintsKeyword_6_0() { return cConstraintsKeyword_6_0; }

		//(precondition+=PreconditionDeclaration | postcondition+=PostconditionDeclaration)+
		public Alternatives getAlternatives_6_1() { return cAlternatives_6_1; }

		//precondition+=PreconditionDeclaration
		public Assignment getPreconditionAssignment_6_1_0() { return cPreconditionAssignment_6_1_0; }

		//PreconditionDeclaration
		public RuleCall getPreconditionPreconditionDeclarationParserRuleCall_6_1_0_0() { return cPreconditionPreconditionDeclarationParserRuleCall_6_1_0_0; }

		//postcondition+=PostconditionDeclaration
		public Assignment getPostconditionAssignment_6_1_1() { return cPostconditionAssignment_6_1_1; }

		//PostconditionDeclaration
		public RuleCall getPostconditionPostconditionDeclarationParserRuleCall_6_1_1_0() { return cPostconditionPostconditionDeclarationParserRuleCall_6_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class ConditionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSignalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSignalSignalDeclarationParserRuleCall_1_0 = (RuleCall)cSignalAssignment_1.eContents().get(0);
		
		//ConditionDeclaration:
		//
		//	"condition" signal=SignalDeclaration;
		public ParserRule getRule() { return rule; }

		//"condition" signal=SignalDeclaration
		public Group getGroup() { return cGroup; }

		//"condition"
		public Keyword getConditionKeyword_0() { return cConditionKeyword_0; }

		//signal=SignalDeclaration
		public Assignment getSignalAssignment_1() { return cSignalAssignment_1; }

		//SignalDeclaration
		public RuleCall getSignalSignalDeclarationParserRuleCall_1_0() { return cSignalSignalDeclarationParserRuleCall_1_0; }
	}

	public class PreconditionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PreconditionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPreconditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSignalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSignalSignalDeclarationParserRuleCall_1_0 = (RuleCall)cSignalAssignment_1.eContents().get(0);
		
		//PreconditionDeclaration:
		//
		//	"precondition" signal=SignalDeclaration;
		public ParserRule getRule() { return rule; }

		//"precondition" signal=SignalDeclaration
		public Group getGroup() { return cGroup; }

		//"precondition"
		public Keyword getPreconditionKeyword_0() { return cPreconditionKeyword_0; }

		//signal=SignalDeclaration
		public Assignment getSignalAssignment_1() { return cSignalAssignment_1; }

		//SignalDeclaration
		public RuleCall getSignalSignalDeclarationParserRuleCall_1_0() { return cSignalSignalDeclarationParserRuleCall_1_0; }
	}

	public class PostconditionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PostconditionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPostconditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSignalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSignalSignalDeclarationParserRuleCall_1_0 = (RuleCall)cSignalAssignment_1.eContents().get(0);
		
		//PostconditionDeclaration:
		//
		//	"postcondition" signal=SignalDeclaration;
		public ParserRule getRule() { return rule; }

		//"postcondition" signal=SignalDeclaration
		public Group getGroup() { return cGroup; }

		//"postcondition"
		public Keyword getPostconditionKeyword_0() { return cPostconditionKeyword_0; }

		//signal=SignalDeclaration
		public Assignment getSignalAssignment_1() { return cSignalAssignment_1; }

		//SignalDeclaration
		public RuleCall getSignalSignalDeclarationParserRuleCall_1_0() { return cSignalSignalDeclarationParserRuleCall_1_0; }
	}

	public class StateDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cConstraintsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConditionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConditionConditionDeclarationParserRuleCall_2_1_0 = (RuleCall)cConditionAssignment_2_1.eContents().get(0);
		private final Assignment cTransitionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTransitionsTransitionDeclarationParserRuleCall_3_0 = (RuleCall)cTransitionsAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StateDeclaration:
		//
		//	"state" name=ID ("constraints:" condition+=ConditionDeclaration+)? transitions+=TransitionDeclaration+ ";";
		public ParserRule getRule() { return rule; }

		//"state" name=ID ("constraints:" condition+=ConditionDeclaration+)? transitions+=TransitionDeclaration+ ";"
		public Group getGroup() { return cGroup; }

		//"state"
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("constraints:" condition+=ConditionDeclaration+)?
		public Group getGroup_2() { return cGroup_2; }

		//"constraints:"
		public Keyword getConstraintsKeyword_2_0() { return cConstraintsKeyword_2_0; }

		//condition+=ConditionDeclaration+
		public Assignment getConditionAssignment_2_1() { return cConditionAssignment_2_1; }

		//ConditionDeclaration
		public RuleCall getConditionConditionDeclarationParserRuleCall_2_1_0() { return cConditionConditionDeclarationParserRuleCall_2_1_0; }

		//transitions+=TransitionDeclaration+
		public Assignment getTransitionsAssignment_3() { return cTransitionsAssignment_3; }

		//TransitionDeclaration
		public RuleCall getTransitionsTransitionDeclarationParserRuleCall_3_0() { return cTransitionsTransitionDeclarationParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class LoopsDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LoopsDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoopsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//LoopsDeclaration:
		//
		//	"loops:" val=INT;
		public ParserRule getRule() { return rule; }

		//"loops:" val=INT
		public Group getGroup() { return cGroup; }

		//"loops:"
		public Keyword getLoopsKeyword_0() { return cLoopsKeyword_0; }

		//val=INT
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//INT
		public RuleCall getValINTTerminalRuleCall_1_0() { return cValINTTerminalRuleCall_1_0; }
	}

	public class SeedDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SeedDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRandseedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//SeedDeclaration:
		//
		//	"randseed:" val=INT;
		public ParserRule getRule() { return rule; }

		//"randseed:" val=INT
		public Group getGroup() { return cGroup; }

		//"randseed:"
		public Keyword getRandseedKeyword_0() { return cRandseedKeyword_0; }

		//val=INT
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//INT
		public RuleCall getValINTTerminalRuleCall_1_0() { return cValINTTerminalRuleCall_1_0; }
	}

	public class SignalDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cPortAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPortIDTerminalRuleCall_0_0_0 = (RuleCall)cPortAssignment_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cSignameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSignameIDTerminalRuleCall_1_0 = (RuleCall)cSignameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cIntValAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cIntValINTTerminalRuleCall_2_0_1_0 = (RuleCall)cIntValAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cStrValAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cStrValSTRINGTerminalRuleCall_2_1_1_0 = (RuleCall)cStrValAssignment_2_1_1.eContents().get(0);
		
		//SignalDeclaration:
		//
		//	(port=ID ".")? signame=ID ("=" intVal=INT | "=" strVal=STRING)?;
		public ParserRule getRule() { return rule; }

		//(port=ID ".")? signame=ID ("=" intVal=INT | "=" strVal=STRING)?
		public Group getGroup() { return cGroup; }

		//(port=ID ".")?
		public Group getGroup_0() { return cGroup_0; }

		//port=ID
		public Assignment getPortAssignment_0_0() { return cPortAssignment_0_0; }

		//ID
		public RuleCall getPortIDTerminalRuleCall_0_0_0() { return cPortIDTerminalRuleCall_0_0_0; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//signame=ID
		public Assignment getSignameAssignment_1() { return cSignameAssignment_1; }

		//ID
		public RuleCall getSignameIDTerminalRuleCall_1_0() { return cSignameIDTerminalRuleCall_1_0; }

		//("=" intVal=INT | "=" strVal=STRING)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"=" intVal=INT
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_0_0() { return cEqualsSignKeyword_2_0_0; }

		//intVal=INT
		public Assignment getIntValAssignment_2_0_1() { return cIntValAssignment_2_0_1; }

		//INT
		public RuleCall getIntValINTTerminalRuleCall_2_0_1_0() { return cIntValINTTerminalRuleCall_2_0_1_0; }

		//"=" strVal=STRING
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_0() { return cEqualsSignKeyword_2_1_0; }

		//strVal=STRING
		public Assignment getStrValAssignment_2_1_1() { return cStrValAssignment_2_1_1; }

		//STRING
		public RuleCall getStrValSTRINGTerminalRuleCall_2_1_1_0() { return cStrValSTRINGTerminalRuleCall_2_1_1_0; }
	}
	
	
	private ModelElements pModel;
	private FsmDefinitionElements pFsmDefinition;
	private RandomTestElements pRandomTest;
	private GuardDeclarationElements pGuardDeclaration;
	private TransitionDeclarationElements pTransitionDeclaration;
	private ConditionDeclarationElements pConditionDeclaration;
	private PreconditionDeclarationElements pPreconditionDeclaration;
	private PostconditionDeclarationElements pPostconditionDeclaration;
	private StateDeclarationElements pStateDeclaration;
	private LoopsDeclarationElements pLoopsDeclaration;
	private SeedDeclarationElements pSeedDeclaration;
	private SignalDeclarationElements pSignalDeclaration;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public FSMtestGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.etrice.generator.FSMtest".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//
	//	(FsmDefinitions+=FsmDefinition | RandomTests+=RandomTest)*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//FsmDefinition:
	//
	//	"fsmdefinition" name=ID "initial" states+=StateDeclaration states+=StateDeclaration* ";";
	public FsmDefinitionElements getFsmDefinitionAccess() {
		return (pFsmDefinition != null) ? pFsmDefinition : (pFsmDefinition = new FsmDefinitionElements());
	}
	
	public ParserRule getFsmDefinitionRule() {
		return getFsmDefinitionAccess().getRule();
	}

	//RandomTest:
	//
	//	"randomtest" name=ID "fsm:" fsm=[FsmDefinition] loopsDeclaration=LoopsDeclaration seedDeclaration=SeedDeclaration?
	//
	//	";";
	public RandomTestElements getRandomTestAccess() {
		return (pRandomTest != null) ? pRandomTest : (pRandomTest = new RandomTestElements());
	}
	
	public ParserRule getRandomTestRule() {
		return getRandomTestAccess().getRule();
	}

	//GuardDeclaration:
	//
	//	signal=SignalDeclaration;
	public GuardDeclarationElements getGuardDeclarationAccess() {
		return (pGuardDeclaration != null) ? pGuardDeclaration : (pGuardDeclaration = new GuardDeclarationElements());
	}
	
	public ParserRule getGuardDeclarationRule() {
		return getGuardDeclarationAccess().getRule();
	}

	//TransitionDeclaration:
	//
	//	"transition" name=ID "to" destination=[StateDeclaration] ("trigger:" trigger=SignalDeclaration)? ("guards:"
	//
	//	triggers+=GuardDeclaration+)? ("constraints:" (precondition+=PreconditionDeclaration |
	//
	//	postcondition+=PostconditionDeclaration)+)? ";";
	public TransitionDeclarationElements getTransitionDeclarationAccess() {
		return (pTransitionDeclaration != null) ? pTransitionDeclaration : (pTransitionDeclaration = new TransitionDeclarationElements());
	}
	
	public ParserRule getTransitionDeclarationRule() {
		return getTransitionDeclarationAccess().getRule();
	}

	//ConditionDeclaration:
	//
	//	"condition" signal=SignalDeclaration;
	public ConditionDeclarationElements getConditionDeclarationAccess() {
		return (pConditionDeclaration != null) ? pConditionDeclaration : (pConditionDeclaration = new ConditionDeclarationElements());
	}
	
	public ParserRule getConditionDeclarationRule() {
		return getConditionDeclarationAccess().getRule();
	}

	//PreconditionDeclaration:
	//
	//	"precondition" signal=SignalDeclaration;
	public PreconditionDeclarationElements getPreconditionDeclarationAccess() {
		return (pPreconditionDeclaration != null) ? pPreconditionDeclaration : (pPreconditionDeclaration = new PreconditionDeclarationElements());
	}
	
	public ParserRule getPreconditionDeclarationRule() {
		return getPreconditionDeclarationAccess().getRule();
	}

	//PostconditionDeclaration:
	//
	//	"postcondition" signal=SignalDeclaration;
	public PostconditionDeclarationElements getPostconditionDeclarationAccess() {
		return (pPostconditionDeclaration != null) ? pPostconditionDeclaration : (pPostconditionDeclaration = new PostconditionDeclarationElements());
	}
	
	public ParserRule getPostconditionDeclarationRule() {
		return getPostconditionDeclarationAccess().getRule();
	}

	//StateDeclaration:
	//
	//	"state" name=ID ("constraints:" condition+=ConditionDeclaration+)? transitions+=TransitionDeclaration+ ";";
	public StateDeclarationElements getStateDeclarationAccess() {
		return (pStateDeclaration != null) ? pStateDeclaration : (pStateDeclaration = new StateDeclarationElements());
	}
	
	public ParserRule getStateDeclarationRule() {
		return getStateDeclarationAccess().getRule();
	}

	//LoopsDeclaration:
	//
	//	"loops:" val=INT;
	public LoopsDeclarationElements getLoopsDeclarationAccess() {
		return (pLoopsDeclaration != null) ? pLoopsDeclaration : (pLoopsDeclaration = new LoopsDeclarationElements());
	}
	
	public ParserRule getLoopsDeclarationRule() {
		return getLoopsDeclarationAccess().getRule();
	}

	//SeedDeclaration:
	//
	//	"randseed:" val=INT;
	public SeedDeclarationElements getSeedDeclarationAccess() {
		return (pSeedDeclaration != null) ? pSeedDeclaration : (pSeedDeclaration = new SeedDeclarationElements());
	}
	
	public ParserRule getSeedDeclarationRule() {
		return getSeedDeclarationAccess().getRule();
	}

	//SignalDeclaration:
	//
	//	(port=ID ".")? signame=ID ("=" intVal=INT | "=" strVal=STRING)?;
	public SignalDeclarationElements getSignalDeclarationAccess() {
		return (pSignalDeclaration != null) ? pSignalDeclaration : (pSignalDeclaration = new SignalDeclarationElements());
	}
	
	public ParserRule getSignalDeclarationRule() {
		return getSignalDeclarationAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
