/*
* generated by Xtext
*/

package org.eclipse.etrice.generator.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FSMtestGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cTestscriptsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTestscriptsTestscriptParserRuleCall_0 = (RuleCall)cTestscriptsAssignment.eContents().get(0);
		
		//Model:
		//
		//	Testscripts+=Testscript*;
		public ParserRule getRule() { return rule; }

		//Testscripts+=Testscript*
		public Assignment getTestscriptsAssignment() { return cTestscriptsAssignment; }

		//Testscript
		public RuleCall getTestscriptsTestscriptParserRuleCall_0() { return cTestscriptsTestscriptParserRuleCall_0; }
	}

	public class TestscriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Testscript");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFsmtestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cStateDeclarationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStateDeclarationStateDeclarationParserRuleCall_2_0 = (RuleCall)cStateDeclarationAssignment_2.eContents().get(0);
		private final Assignment cInitialDeclarationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitialDeclarationInitialDeclarationParserRuleCall_3_0 = (RuleCall)cInitialDeclarationAssignment_3.eContents().get(0);
		private final Assignment cLoopsDeclarationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLoopsDeclarationLoopsDeclarationParserRuleCall_4_0 = (RuleCall)cLoopsDeclarationAssignment_4.eContents().get(0);
		private final Assignment cSeedDeclarationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSeedDeclarationSeedDeclarationParserRuleCall_5_0 = (RuleCall)cSeedDeclarationAssignment_5.eContents().get(0);
		private final Assignment cTransitionDeclarationsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTransitionDeclarationsTransitionDeclarationParserRuleCall_6_0 = (RuleCall)cTransitionDeclarationsAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Testscript:
		//
		//	"fsmtest" name=ID stateDeclaration=StateDeclaration initialDeclaration=InitialDeclaration
		//
		//	loopsDeclaration=LoopsDeclaration seedDeclaration=SeedDeclaration? transitionDeclarations+=TransitionDeclaration*
		//
		//	";";
		public ParserRule getRule() { return rule; }

		//"fsmtest" name=ID stateDeclaration=StateDeclaration initialDeclaration=InitialDeclaration
		//
		//loopsDeclaration=LoopsDeclaration seedDeclaration=SeedDeclaration? transitionDeclarations+=TransitionDeclaration* ";"
		public Group getGroup() { return cGroup; }

		//"fsmtest"
		public Keyword getFsmtestKeyword_0() { return cFsmtestKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//stateDeclaration=StateDeclaration
		public Assignment getStateDeclarationAssignment_2() { return cStateDeclarationAssignment_2; }

		//StateDeclaration
		public RuleCall getStateDeclarationStateDeclarationParserRuleCall_2_0() { return cStateDeclarationStateDeclarationParserRuleCall_2_0; }

		//initialDeclaration=InitialDeclaration
		public Assignment getInitialDeclarationAssignment_3() { return cInitialDeclarationAssignment_3; }

		//InitialDeclaration
		public RuleCall getInitialDeclarationInitialDeclarationParserRuleCall_3_0() { return cInitialDeclarationInitialDeclarationParserRuleCall_3_0; }

		//loopsDeclaration=LoopsDeclaration
		public Assignment getLoopsDeclarationAssignment_4() { return cLoopsDeclarationAssignment_4; }

		//LoopsDeclaration
		public RuleCall getLoopsDeclarationLoopsDeclarationParserRuleCall_4_0() { return cLoopsDeclarationLoopsDeclarationParserRuleCall_4_0; }

		//seedDeclaration=SeedDeclaration?
		public Assignment getSeedDeclarationAssignment_5() { return cSeedDeclarationAssignment_5; }

		//SeedDeclaration
		public RuleCall getSeedDeclarationSeedDeclarationParserRuleCall_5_0() { return cSeedDeclarationSeedDeclarationParserRuleCall_5_0; }

		//transitionDeclarations+=TransitionDeclaration*
		public Assignment getTransitionDeclarationsAssignment_6() { return cTransitionDeclarationsAssignment_6; }

		//TransitionDeclaration
		public RuleCall getTransitionDeclarationsTransitionDeclarationParserRuleCall_6_0() { return cTransitionDeclarationsTransitionDeclarationParserRuleCall_6_0; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//State:
		//
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class StateDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_1_0 = (RuleCall)cStatesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStatesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_2_1_0 = (RuleCall)cStatesAssignment_2_1.eContents().get(0);
		
		//StateDeclaration:
		//
		//	"states:" states+=State ("," states+=State)*;
		public ParserRule getRule() { return rule; }

		//"states:" states+=State ("," states+=State)*
		public Group getGroup() { return cGroup; }

		//"states:"
		public Keyword getStatesKeyword_0() { return cStatesKeyword_0; }

		//states+=State
		public Assignment getStatesAssignment_1() { return cStatesAssignment_1; }

		//State
		public RuleCall getStatesStateParserRuleCall_1_0() { return cStatesStateParserRuleCall_1_0; }

		//("," states+=State)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//states+=State
		public Assignment getStatesAssignment_2_1() { return cStatesAssignment_2_1; }

		//State
		public RuleCall getStatesStateParserRuleCall_2_1_0() { return cStatesStateParserRuleCall_2_1_0; }
	}

	public class InitialDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitialDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitialKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInitialAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cInitialStateCrossReference_1_0 = (CrossReference)cInitialAssignment_1.eContents().get(0);
		private final RuleCall cInitialStateIDTerminalRuleCall_1_0_1 = (RuleCall)cInitialStateCrossReference_1_0.eContents().get(1);
		
		//InitialDeclaration:
		//
		//	"initial:" initial=[State];
		public ParserRule getRule() { return rule; }

		//"initial:" initial=[State]
		public Group getGroup() { return cGroup; }

		//"initial:"
		public Keyword getInitialKeyword_0() { return cInitialKeyword_0; }

		//initial=[State]
		public Assignment getInitialAssignment_1() { return cInitialAssignment_1; }

		//[State]
		public CrossReference getInitialStateCrossReference_1_0() { return cInitialStateCrossReference_1_0; }

		//ID
		public RuleCall getInitialStateIDTerminalRuleCall_1_0_1() { return cInitialStateIDTerminalRuleCall_1_0_1; }
	}

	public class LoopsDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LoopsDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoopsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//LoopsDeclaration:
		//
		//	"loops:" val=INT;
		public ParserRule getRule() { return rule; }

		//"loops:" val=INT
		public Group getGroup() { return cGroup; }

		//"loops:"
		public Keyword getLoopsKeyword_0() { return cLoopsKeyword_0; }

		//val=INT
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//INT
		public RuleCall getValINTTerminalRuleCall_1_0() { return cValINTTerminalRuleCall_1_0; }
	}

	public class SeedDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SeedDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRandseedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//SeedDeclaration:
		//
		//	"randseed:" val=INT;
		public ParserRule getRule() { return rule; }

		//"randseed:" val=INT
		public Group getGroup() { return cGroup; }

		//"randseed:"
		public Keyword getRandseedKeyword_0() { return cRandseedKeyword_0; }

		//val=INT
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//INT
		public RuleCall getValINTTerminalRuleCall_1_0() { return cValINTTerminalRuleCall_1_0; }
	}

	public class SignalDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cPortAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPortIDTerminalRuleCall_0_0_0 = (RuleCall)cPortAssignment_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cSignameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSignameIDTerminalRuleCall_1_0 = (RuleCall)cSignameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cIntValAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cIntValINTTerminalRuleCall_2_0_1_0 = (RuleCall)cIntValAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cStrValAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cStrValSTRINGTerminalRuleCall_2_1_1_0 = (RuleCall)cStrValAssignment_2_1_1.eContents().get(0);
		
		//SignalDeclaration:
		//
		//	(port=ID ".")? signame=ID ("=" intVal=INT | "=" strVal=STRING)?;
		public ParserRule getRule() { return rule; }

		//(port=ID ".")? signame=ID ("=" intVal=INT | "=" strVal=STRING)?
		public Group getGroup() { return cGroup; }

		//(port=ID ".")?
		public Group getGroup_0() { return cGroup_0; }

		//port=ID
		public Assignment getPortAssignment_0_0() { return cPortAssignment_0_0; }

		//ID
		public RuleCall getPortIDTerminalRuleCall_0_0_0() { return cPortIDTerminalRuleCall_0_0_0; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//signame=ID
		public Assignment getSignameAssignment_1() { return cSignameAssignment_1; }

		//ID
		public RuleCall getSignameIDTerminalRuleCall_1_0() { return cSignameIDTerminalRuleCall_1_0; }

		//("=" intVal=INT | "=" strVal=STRING)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"=" intVal=INT
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_0_0() { return cEqualsSignKeyword_2_0_0; }

		//intVal=INT
		public Assignment getIntValAssignment_2_0_1() { return cIntValAssignment_2_0_1; }

		//INT
		public RuleCall getIntValINTTerminalRuleCall_2_0_1_0() { return cIntValINTTerminalRuleCall_2_0_1_0; }

		//"=" strVal=STRING
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_0() { return cEqualsSignKeyword_2_1_0; }

		//strVal=STRING
		public Assignment getStrValAssignment_2_1_1() { return cStrValAssignment_2_1_1; }

		//STRING
		public RuleCall getStrValSTRINGTerminalRuleCall_2_1_1_0() { return cStrValSTRINGTerminalRuleCall_2_1_1_0; }
	}

	public class SourceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SourceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefStateCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefStateIDTerminalRuleCall_0_0_1 = (RuleCall)cRefStateCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SourceDeclaration:
		//
		//	ref=[State] ":";
		public ParserRule getRule() { return rule; }

		//ref=[State] ":"
		public Group getGroup() { return cGroup; }

		//ref=[State]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }

		//[State]
		public CrossReference getRefStateCrossReference_0_0() { return cRefStateCrossReference_0_0; }

		//ID
		public RuleCall getRefStateIDTerminalRuleCall_0_0_1() { return cRefStateIDTerminalRuleCall_0_0_1; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
	}

	public class DestinationDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DestinationDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignSpaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefStateCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefStateIDTerminalRuleCall_1_0_1 = (RuleCall)cRefStateCrossReference_1_0.eContents().get(1);
		
		//DestinationDeclaration:
		//
		//	"-> " ref=[State];
		public ParserRule getRule() { return rule; }

		//"-> " ref=[State]
		public Group getGroup() { return cGroup; }

		//"-> "
		public Keyword getHyphenMinusGreaterThanSignSpaceKeyword_0() { return cHyphenMinusGreaterThanSignSpaceKeyword_0; }

		//ref=[State]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[State]
		public CrossReference getRefStateCrossReference_1_0() { return cRefStateCrossReference_1_0; }

		//ID
		public RuleCall getRefStateIDTerminalRuleCall_1_0_1() { return cRefStateIDTerminalRuleCall_1_0_1; }
	}

	public class TransitionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSourceSourceDeclarationParserRuleCall_0_0 = (RuleCall)cSourceAssignment_0.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInSignalDeclarationParserRuleCall_2_0 = (RuleCall)cInAssignment_2.eContents().get(0);
		private final Keyword cOutKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOutAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOutSignalDeclarationParserRuleCall_4_0 = (RuleCall)cOutAssignment_4.eContents().get(0);
		private final Assignment cDestinationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDestinationDestinationDeclarationParserRuleCall_5_0 = (RuleCall)cDestinationAssignment_5.eContents().get(0);
		
		//TransitionDeclaration:
		//
		//	source=SourceDeclaration "in:" in+=SignalDeclaration* "out:" out+=SignalDeclaration*
		//
		//	destination=DestinationDeclaration;
		public ParserRule getRule() { return rule; }

		//source=SourceDeclaration "in:" in+=SignalDeclaration* "out:" out+=SignalDeclaration* destination=DestinationDeclaration
		public Group getGroup() { return cGroup; }

		//source=SourceDeclaration
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }

		//SourceDeclaration
		public RuleCall getSourceSourceDeclarationParserRuleCall_0_0() { return cSourceSourceDeclarationParserRuleCall_0_0; }

		//"in:"
		public Keyword getInKeyword_1() { return cInKeyword_1; }

		//in+=SignalDeclaration*
		public Assignment getInAssignment_2() { return cInAssignment_2; }

		//SignalDeclaration
		public RuleCall getInSignalDeclarationParserRuleCall_2_0() { return cInSignalDeclarationParserRuleCall_2_0; }

		//"out:"
		public Keyword getOutKeyword_3() { return cOutKeyword_3; }

		//out+=SignalDeclaration*
		public Assignment getOutAssignment_4() { return cOutAssignment_4; }

		//SignalDeclaration
		public RuleCall getOutSignalDeclarationParserRuleCall_4_0() { return cOutSignalDeclarationParserRuleCall_4_0; }

		//destination=DestinationDeclaration
		public Assignment getDestinationAssignment_5() { return cDestinationAssignment_5; }

		//DestinationDeclaration
		public RuleCall getDestinationDestinationDeclarationParserRuleCall_5_0() { return cDestinationDestinationDeclarationParserRuleCall_5_0; }
	}
	
	
	private ModelElements pModel;
	private TestscriptElements pTestscript;
	private StateElements pState;
	private StateDeclarationElements pStateDeclaration;
	private InitialDeclarationElements pInitialDeclaration;
	private LoopsDeclarationElements pLoopsDeclaration;
	private SeedDeclarationElements pSeedDeclaration;
	private SignalDeclarationElements pSignalDeclaration;
	private SourceDeclarationElements pSourceDeclaration;
	private DestinationDeclarationElements pDestinationDeclaration;
	private TransitionDeclarationElements pTransitionDeclaration;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public FSMtestGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.etrice.generator.FSMtest".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//
	//	Testscripts+=Testscript*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Testscript:
	//
	//	"fsmtest" name=ID stateDeclaration=StateDeclaration initialDeclaration=InitialDeclaration
	//
	//	loopsDeclaration=LoopsDeclaration seedDeclaration=SeedDeclaration? transitionDeclarations+=TransitionDeclaration*
	//
	//	";";
	public TestscriptElements getTestscriptAccess() {
		return (pTestscript != null) ? pTestscript : (pTestscript = new TestscriptElements());
	}
	
	public ParserRule getTestscriptRule() {
		return getTestscriptAccess().getRule();
	}

	//State:
	//
	//	name=ID;
	public StateElements getStateAccess() {
		return (pState != null) ? pState : (pState = new StateElements());
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//StateDeclaration:
	//
	//	"states:" states+=State ("," states+=State)*;
	public StateDeclarationElements getStateDeclarationAccess() {
		return (pStateDeclaration != null) ? pStateDeclaration : (pStateDeclaration = new StateDeclarationElements());
	}
	
	public ParserRule getStateDeclarationRule() {
		return getStateDeclarationAccess().getRule();
	}

	//InitialDeclaration:
	//
	//	"initial:" initial=[State];
	public InitialDeclarationElements getInitialDeclarationAccess() {
		return (pInitialDeclaration != null) ? pInitialDeclaration : (pInitialDeclaration = new InitialDeclarationElements());
	}
	
	public ParserRule getInitialDeclarationRule() {
		return getInitialDeclarationAccess().getRule();
	}

	//LoopsDeclaration:
	//
	//	"loops:" val=INT;
	public LoopsDeclarationElements getLoopsDeclarationAccess() {
		return (pLoopsDeclaration != null) ? pLoopsDeclaration : (pLoopsDeclaration = new LoopsDeclarationElements());
	}
	
	public ParserRule getLoopsDeclarationRule() {
		return getLoopsDeclarationAccess().getRule();
	}

	//SeedDeclaration:
	//
	//	"randseed:" val=INT;
	public SeedDeclarationElements getSeedDeclarationAccess() {
		return (pSeedDeclaration != null) ? pSeedDeclaration : (pSeedDeclaration = new SeedDeclarationElements());
	}
	
	public ParserRule getSeedDeclarationRule() {
		return getSeedDeclarationAccess().getRule();
	}

	//SignalDeclaration:
	//
	//	(port=ID ".")? signame=ID ("=" intVal=INT | "=" strVal=STRING)?;
	public SignalDeclarationElements getSignalDeclarationAccess() {
		return (pSignalDeclaration != null) ? pSignalDeclaration : (pSignalDeclaration = new SignalDeclarationElements());
	}
	
	public ParserRule getSignalDeclarationRule() {
		return getSignalDeclarationAccess().getRule();
	}

	//SourceDeclaration:
	//
	//	ref=[State] ":";
	public SourceDeclarationElements getSourceDeclarationAccess() {
		return (pSourceDeclaration != null) ? pSourceDeclaration : (pSourceDeclaration = new SourceDeclarationElements());
	}
	
	public ParserRule getSourceDeclarationRule() {
		return getSourceDeclarationAccess().getRule();
	}

	//DestinationDeclaration:
	//
	//	"-> " ref=[State];
	public DestinationDeclarationElements getDestinationDeclarationAccess() {
		return (pDestinationDeclaration != null) ? pDestinationDeclaration : (pDestinationDeclaration = new DestinationDeclarationElements());
	}
	
	public ParserRule getDestinationDeclarationRule() {
		return getDestinationDeclarationAccess().getRule();
	}

	//TransitionDeclaration:
	//
	//	source=SourceDeclaration "in:" in+=SignalDeclaration* "out:" out+=SignalDeclaration*
	//
	//	destination=DestinationDeclaration;
	public TransitionDeclarationElements getTransitionDeclarationAccess() {
		return (pTransitionDeclaration != null) ? pTransitionDeclaration : (pTransitionDeclaration = new TransitionDeclarationElements());
	}
	
	public ParserRule getTransitionDeclarationRule() {
		return getTransitionDeclarationAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
