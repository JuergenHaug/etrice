/*
* generated by Xtext
*/
grammar InternalFSMtest;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.etrice.generator.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.etrice.generator.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.etrice.generator.services.FSMtestGrammarAccess;

}

@parser::members {

 	private FSMtestGrammarAccess grammarAccess;
 	
    public InternalFSMtestParser(TokenStream input, FSMtestGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected FSMtestGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getFsmDefinitionsFsmDefinitionParserRuleCall_0_0()); 
	    }
		lv_FsmDefinitions_0_0=ruleFsmDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"FsmDefinitions",
        		lv_FsmDefinitions_0_0, 
        		"FsmDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getRandomTestsRandomTestParserRuleCall_1_0()); 
	    }
		lv_RandomTests_1_0=ruleRandomTest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"RandomTests",
        		lv_RandomTests_1_0, 
        		"RandomTest");
	        afterParserOrEnumRuleCall();
	    }

)
))*
;





// Entry rule entryRuleFsmDefinition
entryRuleFsmDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFsmDefinitionRule()); }
	 iv_ruleFsmDefinition=ruleFsmDefinition 
	 { $current=$iv_ruleFsmDefinition.current; } 
	 EOF 
;

// Rule FsmDefinition
ruleFsmDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='fsmdefinition' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFsmDefinitionAccess().getFsmdefinitionKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFsmDefinitionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFsmDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='initial' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFsmDefinitionAccess().getInitialKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFsmDefinitionAccess().getStatesStateDeclarationParserRuleCall_3_0()); 
	    }
		lv_states_3_0=ruleStateDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFsmDefinitionRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_3_0, 
        		"StateDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFsmDefinitionAccess().getStatesStateDeclarationParserRuleCall_4_0()); 
	    }
		lv_states_4_0=ruleStateDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFsmDefinitionRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_4_0, 
        		"StateDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFsmDefinitionAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleRandomTest
entryRuleRandomTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRandomTestRule()); }
	 iv_ruleRandomTest=ruleRandomTest 
	 { $current=$iv_ruleRandomTest.current; } 
	 EOF 
;

// Rule RandomTest
ruleRandomTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='randomtest' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRandomTestAccess().getRandomtestKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRandomTestAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRandomTestRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='fsm:' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRandomTestAccess().getFsmKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRandomTestRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getRandomTestAccess().getFsmFsmDefinitionCrossReference_3_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRandomTestAccess().getLoopsDeclarationLoopsDeclarationParserRuleCall_4_0()); 
	    }
		lv_loopsDeclaration_4_0=ruleLoopsDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRandomTestRule());
	        }
       		set(
       			$current, 
       			"loopsDeclaration",
        		lv_loopsDeclaration_4_0, 
        		"LoopsDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRandomTestAccess().getSeedDeclarationSeedDeclarationParserRuleCall_5_0()); 
	    }
		lv_seedDeclaration_5_0=ruleSeedDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRandomTestRule());
	        }
       		set(
       			$current, 
       			"seedDeclaration",
        		lv_seedDeclaration_5_0, 
        		"SeedDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRandomTestAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleGuardDeclaration
entryRuleGuardDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGuardDeclarationRule()); }
	 iv_ruleGuardDeclaration=ruleGuardDeclaration 
	 { $current=$iv_ruleGuardDeclaration.current; } 
	 EOF 
;

// Rule GuardDeclaration
ruleGuardDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getGuardDeclarationAccess().getSignalSignalDeclarationParserRuleCall_0()); 
	    }
		lv_signal_0_0=ruleSignalDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGuardDeclarationRule());
	        }
       		set(
       			$current, 
       			"signal",
        		lv_signal_0_0, 
        		"SignalDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleTransitionDeclaration
entryRuleTransitionDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionDeclarationRule()); }
	 iv_ruleTransitionDeclaration=ruleTransitionDeclaration 
	 { $current=$iv_ruleTransitionDeclaration.current; } 
	 EOF 
;

// Rule TransitionDeclaration
ruleTransitionDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='transition' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTransitionDeclarationAccess().getTransitionKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTransitionDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='to' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTransitionDeclarationAccess().getToKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionDeclarationRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getTransitionDeclarationAccess().getDestinationStateDeclarationCrossReference_3_0()); 
	}

)
)(	otherlv_4='trigger:' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTransitionDeclarationAccess().getTriggerKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionDeclarationAccess().getTriggerSignalDeclarationParserRuleCall_4_1_0()); 
	    }
		lv_trigger_5_0=ruleSignalDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionDeclarationRule());
	        }
       		set(
       			$current, 
       			"trigger",
        		lv_trigger_5_0, 
        		"SignalDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_6='guards:' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTransitionDeclarationAccess().getGuardsKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionDeclarationAccess().getTriggersGuardDeclarationParserRuleCall_5_1_0()); 
	    }
		lv_triggers_7_0=ruleGuardDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionDeclarationRule());
	        }
       		add(
       			$current, 
       			"triggers",
        		lv_triggers_7_0, 
        		"GuardDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?(	otherlv_8='constraints:' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTransitionDeclarationAccess().getConstraintsKeyword_6_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionDeclarationAccess().getPreconditionPreconditionDeclarationParserRuleCall_6_1_0_0()); 
	    }
		lv_precondition_9_0=rulePreconditionDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionDeclarationRule());
	        }
       		add(
       			$current, 
       			"precondition",
        		lv_precondition_9_0, 
        		"PreconditionDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionDeclarationAccess().getPostconditionPostconditionDeclarationParserRuleCall_6_1_1_0()); 
	    }
		lv_postcondition_10_0=rulePostconditionDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionDeclarationRule());
	        }
       		add(
       			$current, 
       			"postcondition",
        		lv_postcondition_10_0, 
        		"PostconditionDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?	otherlv_11=';' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTransitionDeclarationAccess().getSemicolonKeyword_7());
    }
)
;





// Entry rule entryRuleConditionDeclaration
entryRuleConditionDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionDeclarationRule()); }
	 iv_ruleConditionDeclaration=ruleConditionDeclaration 
	 { $current=$iv_ruleConditionDeclaration.current; } 
	 EOF 
;

// Rule ConditionDeclaration
ruleConditionDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='condition' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConditionDeclarationAccess().getConditionKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionDeclarationAccess().getSignalSignalDeclarationParserRuleCall_1_0()); 
	    }
		lv_signal_1_0=ruleSignalDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionDeclarationRule());
	        }
       		set(
       			$current, 
       			"signal",
        		lv_signal_1_0, 
        		"SignalDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePreconditionDeclaration
entryRulePreconditionDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPreconditionDeclarationRule()); }
	 iv_rulePreconditionDeclaration=rulePreconditionDeclaration 
	 { $current=$iv_rulePreconditionDeclaration.current; } 
	 EOF 
;

// Rule PreconditionDeclaration
rulePreconditionDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='precondition' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPreconditionDeclarationAccess().getPreconditionKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPreconditionDeclarationAccess().getSignalSignalDeclarationParserRuleCall_1_0()); 
	    }
		lv_signal_1_0=ruleSignalDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPreconditionDeclarationRule());
	        }
       		set(
       			$current, 
       			"signal",
        		lv_signal_1_0, 
        		"SignalDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePostconditionDeclaration
entryRulePostconditionDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPostconditionDeclarationRule()); }
	 iv_rulePostconditionDeclaration=rulePostconditionDeclaration 
	 { $current=$iv_rulePostconditionDeclaration.current; } 
	 EOF 
;

// Rule PostconditionDeclaration
rulePostconditionDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='postcondition' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPostconditionDeclarationAccess().getPostconditionKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPostconditionDeclarationAccess().getSignalSignalDeclarationParserRuleCall_1_0()); 
	    }
		lv_signal_1_0=ruleSignalDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostconditionDeclarationRule());
	        }
       		set(
       			$current, 
       			"signal",
        		lv_signal_1_0, 
        		"SignalDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStateDeclaration
entryRuleStateDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateDeclarationRule()); }
	 iv_ruleStateDeclaration=ruleStateDeclaration 
	 { $current=$iv_ruleStateDeclaration.current; } 
	 EOF 
;

// Rule StateDeclaration
ruleStateDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='state' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStateDeclarationAccess().getStateKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getStateDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='constraints:' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStateDeclarationAccess().getConstraintsKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateDeclarationAccess().getConditionConditionDeclarationParserRuleCall_2_1_0()); 
	    }
		lv_condition_3_0=ruleConditionDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateDeclarationRule());
	        }
       		add(
       			$current, 
       			"condition",
        		lv_condition_3_0, 
        		"ConditionDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStateDeclarationAccess().getTransitionsTransitionDeclarationParserRuleCall_3_0()); 
	    }
		lv_transitions_4_0=ruleTransitionDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateDeclarationRule());
	        }
       		add(
       			$current, 
       			"transitions",
        		lv_transitions_4_0, 
        		"TransitionDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStateDeclarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleLoopsDeclaration
entryRuleLoopsDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLoopsDeclarationRule()); }
	 iv_ruleLoopsDeclaration=ruleLoopsDeclaration 
	 { $current=$iv_ruleLoopsDeclaration.current; } 
	 EOF 
;

// Rule LoopsDeclaration
ruleLoopsDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='loops:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLoopsDeclarationAccess().getLoopsKeyword_0());
    }
(
(
		lv_val_1_0=RULE_INT
		{
			newLeafNode(lv_val_1_0, grammarAccess.getLoopsDeclarationAccess().getValINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLoopsDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_1_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleSeedDeclaration
entryRuleSeedDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSeedDeclarationRule()); }
	 iv_ruleSeedDeclaration=ruleSeedDeclaration 
	 { $current=$iv_ruleSeedDeclaration.current; } 
	 EOF 
;

// Rule SeedDeclaration
ruleSeedDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='randseed:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSeedDeclarationAccess().getRandseedKeyword_0());
    }
(
(
		lv_val_1_0=RULE_INT
		{
			newLeafNode(lv_val_1_0, grammarAccess.getSeedDeclarationAccess().getValINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSeedDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_1_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleSignalDeclaration
entryRuleSignalDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignalDeclarationRule()); }
	 iv_ruleSignalDeclaration=ruleSignalDeclaration 
	 { $current=$iv_ruleSignalDeclaration.current; } 
	 EOF 
;

// Rule SignalDeclaration
ruleSignalDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_port_0_0=RULE_ID
		{
			newLeafNode(lv_port_0_0, grammarAccess.getSignalDeclarationAccess().getPortIDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSignalDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"port",
        		lv_port_0_0, 
        		"ID");
	    }

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSignalDeclarationAccess().getFullStopKeyword_0_1());
    }
)?(
(
		lv_signame_2_0=RULE_ID
		{
			newLeafNode(lv_signame_2_0, grammarAccess.getSignalDeclarationAccess().getSignameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSignalDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"signame",
        		lv_signame_2_0, 
        		"ID");
	    }

)
)((	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSignalDeclarationAccess().getEqualsSignKeyword_2_0_0());
    }
(
(
		lv_intVal_4_0=RULE_INT
		{
			newLeafNode(lv_intVal_4_0, grammarAccess.getSignalDeclarationAccess().getIntValINTTerminalRuleCall_2_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSignalDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"intVal",
        		lv_intVal_4_0, 
        		"INT");
	    }

)
))
    |(	otherlv_5='=' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSignalDeclarationAccess().getEqualsSignKeyword_2_1_0());
    }
(
(
		lv_strVal_6_0=RULE_STRING
		{
			newLeafNode(lv_strVal_6_0, grammarAccess.getSignalDeclarationAccess().getStrValSTRINGTerminalRuleCall_2_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSignalDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"strVal",
        		lv_strVal_6_0, 
        		"STRING");
	    }

)
)))?)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


