/*
* generated by Xtext
*/
package org.eclipse.etrice.generator.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.etrice.generator.services.FSMtestGrammarAccess;

public class FSMtestParser extends AbstractContentAssistParser {
	
	@Inject
	private FSMtestGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.etrice.generator.ui.contentassist.antlr.internal.InternalFSMtestParser createParser() {
		org.eclipse.etrice.generator.ui.contentassist.antlr.internal.InternalFSMtestParser result = new org.eclipse.etrice.generator.ui.contentassist.antlr.internal.InternalFSMtestParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAlternatives(), "rule__Model__Alternatives");
					put(grammarAccess.getTransitionDeclarationAccess().getAlternatives_6_1(), "rule__TransitionDeclaration__Alternatives_6_1");
					put(grammarAccess.getSignalDeclarationAccess().getAlternatives_2(), "rule__SignalDeclaration__Alternatives_2");
					put(grammarAccess.getFsmDefinitionAccess().getGroup(), "rule__FsmDefinition__Group__0");
					put(grammarAccess.getRandomTestAccess().getGroup(), "rule__RandomTest__Group__0");
					put(grammarAccess.getTransitionDeclarationAccess().getGroup(), "rule__TransitionDeclaration__Group__0");
					put(grammarAccess.getTransitionDeclarationAccess().getGroup_4(), "rule__TransitionDeclaration__Group_4__0");
					put(grammarAccess.getTransitionDeclarationAccess().getGroup_5(), "rule__TransitionDeclaration__Group_5__0");
					put(grammarAccess.getTransitionDeclarationAccess().getGroup_6(), "rule__TransitionDeclaration__Group_6__0");
					put(grammarAccess.getConditionDeclarationAccess().getGroup(), "rule__ConditionDeclaration__Group__0");
					put(grammarAccess.getPreconditionDeclarationAccess().getGroup(), "rule__PreconditionDeclaration__Group__0");
					put(grammarAccess.getPostconditionDeclarationAccess().getGroup(), "rule__PostconditionDeclaration__Group__0");
					put(grammarAccess.getStateDeclarationAccess().getGroup(), "rule__StateDeclaration__Group__0");
					put(grammarAccess.getStateDeclarationAccess().getGroup_2(), "rule__StateDeclaration__Group_2__0");
					put(grammarAccess.getLoopsDeclarationAccess().getGroup(), "rule__LoopsDeclaration__Group__0");
					put(grammarAccess.getSeedDeclarationAccess().getGroup(), "rule__SeedDeclaration__Group__0");
					put(grammarAccess.getSignalDeclarationAccess().getGroup(), "rule__SignalDeclaration__Group__0");
					put(grammarAccess.getSignalDeclarationAccess().getGroup_0(), "rule__SignalDeclaration__Group_0__0");
					put(grammarAccess.getSignalDeclarationAccess().getGroup_2_0(), "rule__SignalDeclaration__Group_2_0__0");
					put(grammarAccess.getSignalDeclarationAccess().getGroup_2_1(), "rule__SignalDeclaration__Group_2_1__0");
					put(grammarAccess.getModelAccess().getFsmDefinitionsAssignment_0(), "rule__Model__FsmDefinitionsAssignment_0");
					put(grammarAccess.getModelAccess().getRandomTestsAssignment_1(), "rule__Model__RandomTestsAssignment_1");
					put(grammarAccess.getFsmDefinitionAccess().getNameAssignment_1(), "rule__FsmDefinition__NameAssignment_1");
					put(grammarAccess.getFsmDefinitionAccess().getStatesAssignment_3(), "rule__FsmDefinition__StatesAssignment_3");
					put(grammarAccess.getFsmDefinitionAccess().getStatesAssignment_4(), "rule__FsmDefinition__StatesAssignment_4");
					put(grammarAccess.getRandomTestAccess().getNameAssignment_1(), "rule__RandomTest__NameAssignment_1");
					put(grammarAccess.getRandomTestAccess().getFsmAssignment_3(), "rule__RandomTest__FsmAssignment_3");
					put(grammarAccess.getRandomTestAccess().getLoopsDeclarationAssignment_4(), "rule__RandomTest__LoopsDeclarationAssignment_4");
					put(grammarAccess.getRandomTestAccess().getSeedDeclarationAssignment_5(), "rule__RandomTest__SeedDeclarationAssignment_5");
					put(grammarAccess.getGuardDeclarationAccess().getSignalAssignment(), "rule__GuardDeclaration__SignalAssignment");
					put(grammarAccess.getTransitionDeclarationAccess().getNameAssignment_1(), "rule__TransitionDeclaration__NameAssignment_1");
					put(grammarAccess.getTransitionDeclarationAccess().getDestinationAssignment_3(), "rule__TransitionDeclaration__DestinationAssignment_3");
					put(grammarAccess.getTransitionDeclarationAccess().getTriggerAssignment_4_1(), "rule__TransitionDeclaration__TriggerAssignment_4_1");
					put(grammarAccess.getTransitionDeclarationAccess().getTriggersAssignment_5_1(), "rule__TransitionDeclaration__TriggersAssignment_5_1");
					put(grammarAccess.getTransitionDeclarationAccess().getPreconditionAssignment_6_1_0(), "rule__TransitionDeclaration__PreconditionAssignment_6_1_0");
					put(grammarAccess.getTransitionDeclarationAccess().getPostconditionAssignment_6_1_1(), "rule__TransitionDeclaration__PostconditionAssignment_6_1_1");
					put(grammarAccess.getConditionDeclarationAccess().getSignalAssignment_1(), "rule__ConditionDeclaration__SignalAssignment_1");
					put(grammarAccess.getPreconditionDeclarationAccess().getSignalAssignment_1(), "rule__PreconditionDeclaration__SignalAssignment_1");
					put(grammarAccess.getPostconditionDeclarationAccess().getSignalAssignment_1(), "rule__PostconditionDeclaration__SignalAssignment_1");
					put(grammarAccess.getStateDeclarationAccess().getNameAssignment_1(), "rule__StateDeclaration__NameAssignment_1");
					put(grammarAccess.getStateDeclarationAccess().getConditionAssignment_2_1(), "rule__StateDeclaration__ConditionAssignment_2_1");
					put(grammarAccess.getStateDeclarationAccess().getTransitionsAssignment_3(), "rule__StateDeclaration__TransitionsAssignment_3");
					put(grammarAccess.getLoopsDeclarationAccess().getValAssignment_1(), "rule__LoopsDeclaration__ValAssignment_1");
					put(grammarAccess.getSeedDeclarationAccess().getValAssignment_1(), "rule__SeedDeclaration__ValAssignment_1");
					put(grammarAccess.getSignalDeclarationAccess().getPortAssignment_0_0(), "rule__SignalDeclaration__PortAssignment_0_0");
					put(grammarAccess.getSignalDeclarationAccess().getSignameAssignment_1(), "rule__SignalDeclaration__SignameAssignment_1");
					put(grammarAccess.getSignalDeclarationAccess().getIntValAssignment_2_0_1(), "rule__SignalDeclaration__IntValAssignment_2_0_1");
					put(grammarAccess.getSignalDeclarationAccess().getStrValAssignment_2_1_1(), "rule__SignalDeclaration__StrValAssignment_2_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.etrice.generator.ui.contentassist.antlr.internal.InternalFSMtestParser typedParser = (org.eclipse.etrice.generator.ui.contentassist.antlr.internal.InternalFSMtestParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public FSMtestGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(FSMtestGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
