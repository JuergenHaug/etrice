/*
* generated by Xtext
*/
package org.eclipse.etrice.generator.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.etrice.generator.services.FSMtestGrammarAccess;

public class FSMtestParser extends AbstractContentAssistParser {
	
	@Inject
	private FSMtestGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.etrice.generator.ui.contentassist.antlr.internal.InternalFSMtestParser createParser() {
		org.eclipse.etrice.generator.ui.contentassist.antlr.internal.InternalFSMtestParser result = new org.eclipse.etrice.generator.ui.contentassist.antlr.internal.InternalFSMtestParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSignalDeclarationAccess().getAlternatives_2(), "rule__SignalDeclaration__Alternatives_2");
					put(grammarAccess.getTestscriptAccess().getGroup(), "rule__Testscript__Group__0");
					put(grammarAccess.getStateDeclarationAccess().getGroup(), "rule__StateDeclaration__Group__0");
					put(grammarAccess.getStateDeclarationAccess().getGroup_2(), "rule__StateDeclaration__Group_2__0");
					put(grammarAccess.getInitialDeclarationAccess().getGroup(), "rule__InitialDeclaration__Group__0");
					put(grammarAccess.getLoopsDeclarationAccess().getGroup(), "rule__LoopsDeclaration__Group__0");
					put(grammarAccess.getSeedDeclarationAccess().getGroup(), "rule__SeedDeclaration__Group__0");
					put(grammarAccess.getSignalDeclarationAccess().getGroup(), "rule__SignalDeclaration__Group__0");
					put(grammarAccess.getSignalDeclarationAccess().getGroup_0(), "rule__SignalDeclaration__Group_0__0");
					put(grammarAccess.getSignalDeclarationAccess().getGroup_2_0(), "rule__SignalDeclaration__Group_2_0__0");
					put(grammarAccess.getSignalDeclarationAccess().getGroup_2_1(), "rule__SignalDeclaration__Group_2_1__0");
					put(grammarAccess.getSourceDeclarationAccess().getGroup(), "rule__SourceDeclaration__Group__0");
					put(grammarAccess.getDestinationDeclarationAccess().getGroup(), "rule__DestinationDeclaration__Group__0");
					put(grammarAccess.getTransitionDeclarationAccess().getGroup(), "rule__TransitionDeclaration__Group__0");
					put(grammarAccess.getModelAccess().getTestscriptsAssignment(), "rule__Model__TestscriptsAssignment");
					put(grammarAccess.getTestscriptAccess().getNameAssignment_1(), "rule__Testscript__NameAssignment_1");
					put(grammarAccess.getTestscriptAccess().getStateDeclarationAssignment_2(), "rule__Testscript__StateDeclarationAssignment_2");
					put(grammarAccess.getTestscriptAccess().getInitialDeclarationAssignment_3(), "rule__Testscript__InitialDeclarationAssignment_3");
					put(grammarAccess.getTestscriptAccess().getLoopsDeclarationAssignment_4(), "rule__Testscript__LoopsDeclarationAssignment_4");
					put(grammarAccess.getTestscriptAccess().getSeedDeclarationAssignment_5(), "rule__Testscript__SeedDeclarationAssignment_5");
					put(grammarAccess.getTestscriptAccess().getTransitionDeclarationsAssignment_6(), "rule__Testscript__TransitionDeclarationsAssignment_6");
					put(grammarAccess.getStateAccess().getNameAssignment(), "rule__State__NameAssignment");
					put(grammarAccess.getStateDeclarationAccess().getStatesAssignment_1(), "rule__StateDeclaration__StatesAssignment_1");
					put(grammarAccess.getStateDeclarationAccess().getStatesAssignment_2_1(), "rule__StateDeclaration__StatesAssignment_2_1");
					put(grammarAccess.getInitialDeclarationAccess().getInitialAssignment_1(), "rule__InitialDeclaration__InitialAssignment_1");
					put(grammarAccess.getLoopsDeclarationAccess().getValAssignment_1(), "rule__LoopsDeclaration__ValAssignment_1");
					put(grammarAccess.getSeedDeclarationAccess().getValAssignment_1(), "rule__SeedDeclaration__ValAssignment_1");
					put(grammarAccess.getSignalDeclarationAccess().getPortAssignment_0_0(), "rule__SignalDeclaration__PortAssignment_0_0");
					put(grammarAccess.getSignalDeclarationAccess().getSignameAssignment_1(), "rule__SignalDeclaration__SignameAssignment_1");
					put(grammarAccess.getSignalDeclarationAccess().getIntValAssignment_2_0_1(), "rule__SignalDeclaration__IntValAssignment_2_0_1");
					put(grammarAccess.getSignalDeclarationAccess().getStrValAssignment_2_1_1(), "rule__SignalDeclaration__StrValAssignment_2_1_1");
					put(grammarAccess.getSourceDeclarationAccess().getRefAssignment_0(), "rule__SourceDeclaration__RefAssignment_0");
					put(grammarAccess.getDestinationDeclarationAccess().getRefAssignment_1(), "rule__DestinationDeclaration__RefAssignment_1");
					put(grammarAccess.getTransitionDeclarationAccess().getSourceAssignment_0(), "rule__TransitionDeclaration__SourceAssignment_0");
					put(grammarAccess.getTransitionDeclarationAccess().getInAssignment_2(), "rule__TransitionDeclaration__InAssignment_2");
					put(grammarAccess.getTransitionDeclarationAccess().getOutAssignment_4(), "rule__TransitionDeclaration__OutAssignment_4");
					put(grammarAccess.getTransitionDeclarationAccess().getDestinationAssignment_5(), "rule__TransitionDeclaration__DestinationAssignment_5");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.etrice.generator.ui.contentassist.antlr.internal.InternalFSMtestParser typedParser = (org.eclipse.etrice.generator.ui.contentassist.antlr.internal.InternalFSMtestParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public FSMtestGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(FSMtestGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
