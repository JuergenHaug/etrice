/*
 * generated by Xtext
 */
package org.eclipse.etrice.core.etphys.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.etrice.core.common.base.Annotation;
import org.eclipse.etrice.core.common.base.AnnotationType;
import org.eclipse.etrice.core.common.base.BasePackage;
import org.eclipse.etrice.core.common.base.BooleanLiteral;
import org.eclipse.etrice.core.common.base.Documentation;
import org.eclipse.etrice.core.common.base.EnumAnnotationAttribute;
import org.eclipse.etrice.core.common.base.Import;
import org.eclipse.etrice.core.common.base.IntLiteral;
import org.eclipse.etrice.core.common.base.KeyValue;
import org.eclipse.etrice.core.common.base.LiteralArray;
import org.eclipse.etrice.core.common.base.RealLiteral;
import org.eclipse.etrice.core.common.base.SimpleAnnotationAttribute;
import org.eclipse.etrice.core.common.base.StringLiteral;
import org.eclipse.etrice.core.common.serializer.BaseSemanticSequencer;
import org.eclipse.etrice.core.etphys.eTPhys.ETPhysPackage;
import org.eclipse.etrice.core.etphys.eTPhys.NodeClass;
import org.eclipse.etrice.core.etphys.eTPhys.NodeRef;
import org.eclipse.etrice.core.etphys.eTPhys.PhysicalModel;
import org.eclipse.etrice.core.etphys.eTPhys.PhysicalSystem;
import org.eclipse.etrice.core.etphys.eTPhys.PhysicalThread;
import org.eclipse.etrice.core.etphys.eTPhys.RuntimeClass;
import org.eclipse.etrice.core.etphys.services.ETPhysGrammarAccess;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;

@SuppressWarnings("all")
public class ETPhysSemanticSequencer extends BaseSemanticSequencer {

	@Inject
	private ETPhysGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BasePackage.ANNOTATION:
				sequence_Annotation(context, (Annotation) semanticObject); 
				return; 
			case BasePackage.ANNOTATION_TYPE:
				sequence_AnnotationType(context, (AnnotationType) semanticObject); 
				return; 
			case BasePackage.BOOLEAN_LITERAL:
				sequence_BooleanLiteral(context, (BooleanLiteral) semanticObject); 
				return; 
			case BasePackage.DOCUMENTATION:
				sequence_Documentation(context, (Documentation) semanticObject); 
				return; 
			case BasePackage.ENUM_ANNOTATION_ATTRIBUTE:
				sequence_EnumAnnotationAttribute(context, (EnumAnnotationAttribute) semanticObject); 
				return; 
			case BasePackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case BasePackage.INT_LITERAL:
				sequence_IntLiteral(context, (IntLiteral) semanticObject); 
				return; 
			case BasePackage.KEY_VALUE:
				sequence_KeyValue(context, (KeyValue) semanticObject); 
				return; 
			case BasePackage.LITERAL_ARRAY:
				sequence_LiteralArray(context, (LiteralArray) semanticObject); 
				return; 
			case BasePackage.REAL_LITERAL:
				sequence_RealLiteral(context, (RealLiteral) semanticObject); 
				return; 
			case BasePackage.SIMPLE_ANNOTATION_ATTRIBUTE:
				sequence_SimpleAnnotationAttribute(context, (SimpleAnnotationAttribute) semanticObject); 
				return; 
			case BasePackage.STRING_LITERAL:
				sequence_StringLiteral(context, (StringLiteral) semanticObject); 
				return; 
			}
		else if (epackage == ETPhysPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ETPhysPackage.NODE_CLASS:
				sequence_NodeClass(context, (NodeClass) semanticObject); 
				return; 
			case ETPhysPackage.NODE_REF:
				sequence_NodeRef(context, (NodeRef) semanticObject); 
				return; 
			case ETPhysPackage.PHYSICAL_MODEL:
				sequence_PhysicalModel(context, (PhysicalModel) semanticObject); 
				return; 
			case ETPhysPackage.PHYSICAL_SYSTEM:
				sequence_PhysicalSystem(context, (PhysicalSystem) semanticObject); 
				return; 
			case ETPhysPackage.PHYSICAL_THREAD:
				sequence_PhysicalThread(context, (PhysicalThread) semanticObject); 
				return; 
			case ETPhysPackage.RUNTIME_CLASS:
				sequence_RuntimeClass(context, (RuntimeClass) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     NodeClass returns NodeClass
	 *
	 * Constraint:
	 *     (name=ID docu=Documentation? (runtime=[RuntimeClass|FQN] | priomin=Integer | priomax=Integer)+ threads+=PhysicalThread*)
	 */
	protected void sequence_NodeClass(ISerializationContext context, NodeClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NodeRef returns NodeRef
	 *
	 * Constraint:
	 *     (name=ID type=[NodeClass|FQN] docu=Documentation?)
	 */
	protected void sequence_NodeRef(ISerializationContext context, NodeRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PhysicalModel returns PhysicalModel
	 *
	 * Constraint:
	 *     (name=FQN imports+=Import* (systems+=PhysicalSystem | nodeClasses+=NodeClass | runtimeClasses+=RuntimeClass)*)
	 */
	protected void sequence_PhysicalModel(ISerializationContext context, PhysicalModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PhysicalSystem returns PhysicalSystem
	 *
	 * Constraint:
	 *     (name=ID docu=Documentation? nodeRefs+=NodeRef*)
	 */
	protected void sequence_PhysicalSystem(ISerializationContext context, PhysicalSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PhysicalThread returns PhysicalThread
	 *
	 * Constraint:
	 *     (
	 *         default?='DefaultThread'? 
	 *         name=ID 
	 *         (
	 *             execmode=ExecMode | 
	 *             time=TIME | 
	 *             prio=Integer | 
	 *             stacksize=INT | 
	 *             msgblocksize=INT | 
	 *             msgpoolsize=INT
	 *         )*
	 *     )
	 */
	protected void sequence_PhysicalThread(ISerializationContext context, PhysicalThread semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RuntimeClass returns RuntimeClass
	 *
	 * Constraint:
	 *     (name=ID docu=Documentation? threadModel=ThreadModel)
	 */
	protected void sequence_RuntimeClass(ISerializationContext context, RuntimeClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
