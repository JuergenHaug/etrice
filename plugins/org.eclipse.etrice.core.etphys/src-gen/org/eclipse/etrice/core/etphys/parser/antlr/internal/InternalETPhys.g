/*
* generated by Xtext
*/
grammar InternalETPhys;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.etrice.core.etphys.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.etrice.core.etphys.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.etrice.core.etphys.services.ETPhysGrammarAccess;

}

@parser::members {

 	private ETPhysGrammarAccess grammarAccess;
 	
    public InternalETPhysParser(TokenStream input, ETPhysGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "PhysicalModel";	
   	}
   	
   	@Override
   	protected ETPhysGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulePhysicalModel
entryRulePhysicalModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPhysicalModelRule()); }
	 iv_rulePhysicalModel=rulePhysicalModel 
	 { $current=$iv_rulePhysicalModel.current; } 
	 EOF 
;

// Rule PhysicalModel
rulePhysicalModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='PhysicalModel' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPhysicalModelAccess().getPhysicalModelKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPhysicalModelAccess().getNameFQNParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleFQN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPhysicalModelRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"FQN");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPhysicalModelAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPhysicalModelAccess().getImportsImportParserRuleCall_3_0()); 
	    }
		lv_imports_3_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPhysicalModelRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_3_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getPhysicalModelAccess().getSystemsPhysicalSystemParserRuleCall_4_0_0()); 
	    }
		lv_systems_4_0=rulePhysicalSystem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPhysicalModelRule());
	        }
       		add(
       			$current, 
       			"systems",
        		lv_systems_4_0, 
        		"PhysicalSystem");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPhysicalModelAccess().getNodeClassesNodeClassParserRuleCall_4_1_0()); 
	    }
		lv_nodeClasses_5_0=ruleNodeClass		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPhysicalModelRule());
	        }
       		add(
       			$current, 
       			"nodeClasses",
        		lv_nodeClasses_5_0, 
        		"NodeClass");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPhysicalModelAccess().getRuntimeClassesRuntimeClassParserRuleCall_4_2_0()); 
	    }
		lv_runtimeClasses_6_0=ruleRuntimeClass		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPhysicalModelRule());
	        }
       		add(
       			$current, 
       			"runtimeClasses",
        		lv_runtimeClasses_6_0, 
        		"RuntimeClass");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPhysicalModelAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRulePhysicalSystem
entryRulePhysicalSystem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPhysicalSystemRule()); }
	 iv_rulePhysicalSystem=rulePhysicalSystem 
	 { $current=$iv_rulePhysicalSystem.current; } 
	 EOF 
;

// Rule PhysicalSystem
rulePhysicalSystem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='PhysicalSystem' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPhysicalSystemAccess().getPhysicalSystemKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPhysicalSystemAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPhysicalSystemRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPhysicalSystemAccess().getDocuDocumentationParserRuleCall_2_0()); 
	    }
		lv_docu_2_0=ruleDocumentation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPhysicalSystemRule());
	        }
       		set(
       			$current, 
       			"docu",
        		lv_docu_2_0, 
        		"Documentation");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPhysicalSystemAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPhysicalSystemAccess().getNodeRefsNodeRefParserRuleCall_4_0()); 
	    }
		lv_nodeRefs_4_0=ruleNodeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPhysicalSystemRule());
	        }
       		add(
       			$current, 
       			"nodeRefs",
        		lv_nodeRefs_4_0, 
        		"NodeRef");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPhysicalSystemAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleNodeRef
entryRuleNodeRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeRefRule()); }
	 iv_ruleNodeRef=ruleNodeRef 
	 { $current=$iv_ruleNodeRef.current; } 
	 EOF 
;

// Rule NodeRef
ruleNodeRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='NodeRef' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNodeRefAccess().getNodeRefKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getNodeRefAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeRefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNodeRefAccess().getColonKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeRefRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getNodeRefAccess().getTypeNodeClassCrossReference_3_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeRefAccess().getDocuDocumentationParserRuleCall_4_0()); 
	    }
		lv_docu_4_0=ruleDocumentation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeRefRule());
	        }
       		set(
       			$current, 
       			"docu",
        		lv_docu_4_0, 
        		"Documentation");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleNodeClass
entryRuleNodeClass returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeClassRule()); }
	 iv_ruleNodeClass=ruleNodeClass 
	 { $current=$iv_ruleNodeClass.current; } 
	 EOF 
;

// Rule NodeClass
ruleNodeClass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='NodeClass' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNodeClassAccess().getNodeClassKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getNodeClassAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeClassRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeClassAccess().getDocuDocumentationParserRuleCall_2_0()); 
	    }
		lv_docu_2_0=ruleDocumentation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeClassRule());
	        }
       		set(
       			$current, 
       			"docu",
        		lv_docu_2_0, 
        		"Documentation");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNodeClassAccess().getLeftCurlyBracketKeyword_3());
    }
	otherlv_4='runtime' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNodeClassAccess().getRuntimeKeyword_4());
    }
	otherlv_5='=' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNodeClassAccess().getEqualsSignKeyword_5());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeClassRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getNodeClassAccess().getRuntimeRuntimeClassCrossReference_6_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeClassAccess().getThreadsThreadParserRuleCall_7_0()); 
	    }
		lv_threads_7_0=ruleThread		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeClassRule());
	        }
       		add(
       			$current, 
       			"threads",
        		lv_threads_7_0, 
        		"Thread");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getNodeClassAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleThread
entryRuleThread returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getThreadRule()); }
	 iv_ruleThread=ruleThread 
	 { $current=$iv_ruleThread.current; } 
	 EOF 
;

// Rule Thread
ruleThread returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_default_0_0=	'DefaultThread' 
    {
        newLeafNode(lv_default_0_0, grammarAccess.getThreadAccess().getDefaultDefaultThreadKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getThreadRule());
	        }
       		setWithLastConsumed($current, "default", true, "DefaultThread");
	    }

)
)
    |	otherlv_1='Thread' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getThreadAccess().getThreadKeyword_0_1());
    }
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getThreadAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getThreadRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getThreadAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_4='execmode' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getThreadAccess().getExecmodeKeyword_3());
    }
	otherlv_5='=' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getThreadAccess().getEqualsSignKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getThreadAccess().getExecmodeExecModeEnumRuleCall_5_0()); 
	    }
		lv_execmode_6_0=ruleExecMode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getThreadRule());
	        }
       		set(
       			$current, 
       			"execmode",
        		lv_execmode_6_0, 
        		"ExecMode");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7='prio' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getThreadAccess().getPrioKeyword_6_0());
    }
	otherlv_8='=' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getThreadAccess().getEqualsSignKeyword_6_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getThreadAccess().getPrioPRIOParserRuleCall_6_2_0()); 
	    }
		lv_prio_9_0=rulePRIO		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getThreadRule());
	        }
       		set(
       			$current, 
       			"prio",
        		lv_prio_9_0, 
        		"PRIO");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_10='stacksize' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getThreadAccess().getStacksizeKeyword_7_0());
    }
	otherlv_11='=' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getThreadAccess().getEqualsSignKeyword_7_1());
    }
(
(
		lv_stacksize_12_0=RULE_INT
		{
			newLeafNode(lv_stacksize_12_0, grammarAccess.getThreadAccess().getStacksizeINTTerminalRuleCall_7_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getThreadRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"stacksize",
        		lv_stacksize_12_0, 
        		"INT");
	    }

)
))?	otherlv_13='}' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getThreadAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleRuntimeClass
entryRuleRuntimeClass returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuntimeClassRule()); }
	 iv_ruleRuntimeClass=ruleRuntimeClass 
	 { $current=$iv_ruleRuntimeClass.current; } 
	 EOF 
;

// Rule RuntimeClass
ruleRuntimeClass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='RuntimeClass' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRuntimeClassAccess().getRuntimeClassKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRuntimeClassAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuntimeClassRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRuntimeClassAccess().getDocuDocumentationParserRuleCall_2_0()); 
	    }
		lv_docu_2_0=ruleDocumentation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuntimeClassRule());
	        }
       		set(
       			$current, 
       			"docu",
        		lv_docu_2_0, 
        		"Documentation");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRuntimeClassAccess().getLeftCurlyBracketKeyword_3());
    }
	otherlv_4='model' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRuntimeClassAccess().getModelKeyword_4());
    }
	otherlv_5='=' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRuntimeClassAccess().getEqualsSignKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuntimeClassAccess().getThreadModelThreadModelEnumRuleCall_6_0()); 
	    }
		lv_threadModel_6_0=ruleThreadModel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuntimeClassRule());
	        }
       		set(
       			$current, 
       			"threadModel",
        		lv_threadModel_6_0, 
        		"ThreadModel");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRuntimeClassAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleDocumentation
entryRuleDocumentation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDocumentationRule()); }
	 iv_ruleDocumentation=ruleDocumentation 
	 { $current=$iv_ruleDocumentation.current; } 
	 EOF 
;

// Rule Documentation
ruleDocumentation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDocumentationAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		lv_text_1_0=RULE_STRING
		{
			newLeafNode(lv_text_1_0, grammarAccess.getDocumentationAccess().getTextSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDocumentationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_1_0, 
        		"STRING");
	    }

)
)+	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDocumentationAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRulePRIO
entryRulePRIO returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getPRIORule()); } 
	 iv_rulePRIO=rulePRIO 
	 { $current=$iv_rulePRIO.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule PRIO
rulePRIO returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
((
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPRIOAccess().getPlusSignKeyword_0_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPRIOAccess().getHyphenMinusKeyword_0_1()); 
    }
)?    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getPRIOAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceImportedFQNParserRuleCall_1_0_0_0()); 
	    }
		lv_importedNamespace_1_0=ruleImportedFQN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_1_0, 
        		"ImportedFQN");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='from' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImportAccess().getFromKeyword_1_0_1());
    }
)
    |	otherlv_3='model' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getImportAccess().getModelKeyword_1_1());
    }
)(
(
		lv_importURI_4_0=RULE_STRING
		{
			newLeafNode(lv_importURI_4_0, grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_4_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleImportedFQN
entryRuleImportedFQN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportedFQNRule()); } 
	 iv_ruleImportedFQN=ruleImportedFQN 
	 { $current=$iv_ruleImportedFQN.current.getText(); }  
	 EOF 
;

// Rule ImportedFQN
ruleImportedFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getImportedFQNAccess().getFQNParserRuleCall_0()); 
    }
    this_FQN_0=ruleFQN    {
		$current.merge(this_FQN_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getImportedFQNAccess().getFullStopAsteriskKeyword_1()); 
    }
)?)
    ;





// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFQNRule()); } 
	 iv_ruleFQN=ruleFQN 
	 { $current=$iv_ruleFQN.current.getText(); }  
	 EOF 
;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Rule ExecMode
ruleExecMode returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='polled' 
	{
        $current = grammarAccess.getExecModeAccess().getPOLLEDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getExecModeAccess().getPOLLEDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='blocked' 
	{
        $current = grammarAccess.getExecModeAccess().getBLOCKEDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getExecModeAccess().getBLOCKEDEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='mixed' 
	{
        $current = grammarAccess.getExecModeAccess().getMIXEDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getExecModeAccess().getMIXEDEnumLiteralDeclaration_2()); 
    }
));



// Rule ThreadModel
ruleThreadModel returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='singleThreaded' 
	{
        $current = grammarAccess.getThreadModelAccess().getSINGLE_THREADEDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getThreadModelAccess().getSINGLE_THREADEDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='multiThreaded' 
	{
        $current = grammarAccess.getThreadModelAccess().getMULTI_THREADEDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getThreadModelAccess().getMULTI_THREADEDEnumLiteralDeclaration_1()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


