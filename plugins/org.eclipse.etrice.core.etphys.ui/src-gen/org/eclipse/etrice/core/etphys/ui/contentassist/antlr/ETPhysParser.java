/*
* generated by Xtext
*/
package org.eclipse.etrice.core.etphys.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.etrice.core.etphys.services.ETPhysGrammarAccess;

public class ETPhysParser extends AbstractContentAssistParser {
	
	@Inject
	private ETPhysGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.etrice.core.etphys.ui.contentassist.antlr.internal.InternalETPhysParser createParser() {
		org.eclipse.etrice.core.etphys.ui.contentassist.antlr.internal.InternalETPhysParser result = new org.eclipse.etrice.core.etphys.ui.contentassist.antlr.internal.InternalETPhysParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPhysicalModelAccess().getAlternatives_4(), "rule__PhysicalModel__Alternatives_4");
					put(grammarAccess.getPhysicalThreadAccess().getAlternatives_0(), "rule__PhysicalThread__Alternatives_0");
					put(grammarAccess.getPRIOAccess().getAlternatives_0(), "rule__PRIO__Alternatives_0");
					put(grammarAccess.getImportAccess().getAlternatives_1(), "rule__Import__Alternatives_1");
					put(grammarAccess.getTIMEAccess().getAlternatives(), "rule__TIME__Alternatives");
					put(grammarAccess.getExecModeAccess().getAlternatives(), "rule__ExecMode__Alternatives");
					put(grammarAccess.getThreadModelAccess().getAlternatives(), "rule__ThreadModel__Alternatives");
					put(grammarAccess.getPhysicalModelAccess().getGroup(), "rule__PhysicalModel__Group__0");
					put(grammarAccess.getPhysicalSystemAccess().getGroup(), "rule__PhysicalSystem__Group__0");
					put(grammarAccess.getNodeRefAccess().getGroup(), "rule__NodeRef__Group__0");
					put(grammarAccess.getNodeClassAccess().getGroup(), "rule__NodeClass__Group__0");
					put(grammarAccess.getNodeClassAccess().getGroup_4_0(), "rule__NodeClass__Group_4_0__0");
					put(grammarAccess.getNodeClassAccess().getGroup_4_1(), "rule__NodeClass__Group_4_1__0");
					put(grammarAccess.getNodeClassAccess().getGroup_4_2(), "rule__NodeClass__Group_4_2__0");
					put(grammarAccess.getPhysicalThreadAccess().getGroup(), "rule__PhysicalThread__Group__0");
					put(grammarAccess.getPhysicalThreadAccess().getGroup_3_0(), "rule__PhysicalThread__Group_3_0__0");
					put(grammarAccess.getPhysicalThreadAccess().getGroup_3_1(), "rule__PhysicalThread__Group_3_1__0");
					put(grammarAccess.getPhysicalThreadAccess().getGroup_3_2(), "rule__PhysicalThread__Group_3_2__0");
					put(grammarAccess.getPhysicalThreadAccess().getGroup_3_3(), "rule__PhysicalThread__Group_3_3__0");
					put(grammarAccess.getPhysicalThreadAccess().getGroup_3_4(), "rule__PhysicalThread__Group_3_4__0");
					put(grammarAccess.getPhysicalThreadAccess().getGroup_3_5(), "rule__PhysicalThread__Group_3_5__0");
					put(grammarAccess.getRuntimeClassAccess().getGroup(), "rule__RuntimeClass__Group__0");
					put(grammarAccess.getDocumentationAccess().getGroup(), "rule__Documentation__Group__0");
					put(grammarAccess.getPRIOAccess().getGroup(), "rule__PRIO__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getImportAccess().getGroup_1_0(), "rule__Import__Group_1_0__0");
					put(grammarAccess.getImportedFQNAccess().getGroup(), "rule__ImportedFQN__Group__0");
					put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
					put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
					put(grammarAccess.getTIMEAccess().getGroup_0(), "rule__TIME__Group_0__0");
					put(grammarAccess.getTIMEAccess().getGroup_1(), "rule__TIME__Group_1__0");
					put(grammarAccess.getTIMEAccess().getGroup_2(), "rule__TIME__Group_2__0");
					put(grammarAccess.getTIMEAccess().getGroup_3(), "rule__TIME__Group_3__0");
					put(grammarAccess.getPhysicalModelAccess().getNameAssignment_1(), "rule__PhysicalModel__NameAssignment_1");
					put(grammarAccess.getPhysicalModelAccess().getImportsAssignment_3(), "rule__PhysicalModel__ImportsAssignment_3");
					put(grammarAccess.getPhysicalModelAccess().getSystemsAssignment_4_0(), "rule__PhysicalModel__SystemsAssignment_4_0");
					put(grammarAccess.getPhysicalModelAccess().getNodeClassesAssignment_4_1(), "rule__PhysicalModel__NodeClassesAssignment_4_1");
					put(grammarAccess.getPhysicalModelAccess().getRuntimeClassesAssignment_4_2(), "rule__PhysicalModel__RuntimeClassesAssignment_4_2");
					put(grammarAccess.getPhysicalSystemAccess().getNameAssignment_1(), "rule__PhysicalSystem__NameAssignment_1");
					put(grammarAccess.getPhysicalSystemAccess().getDocuAssignment_2(), "rule__PhysicalSystem__DocuAssignment_2");
					put(grammarAccess.getPhysicalSystemAccess().getNodeRefsAssignment_4(), "rule__PhysicalSystem__NodeRefsAssignment_4");
					put(grammarAccess.getNodeRefAccess().getNameAssignment_1(), "rule__NodeRef__NameAssignment_1");
					put(grammarAccess.getNodeRefAccess().getTypeAssignment_3(), "rule__NodeRef__TypeAssignment_3");
					put(grammarAccess.getNodeRefAccess().getDocuAssignment_4(), "rule__NodeRef__DocuAssignment_4");
					put(grammarAccess.getNodeClassAccess().getNameAssignment_1(), "rule__NodeClass__NameAssignment_1");
					put(grammarAccess.getNodeClassAccess().getDocuAssignment_2(), "rule__NodeClass__DocuAssignment_2");
					put(grammarAccess.getNodeClassAccess().getRuntimeAssignment_4_0_2(), "rule__NodeClass__RuntimeAssignment_4_0_2");
					put(grammarAccess.getNodeClassAccess().getPriominAssignment_4_1_2(), "rule__NodeClass__PriominAssignment_4_1_2");
					put(grammarAccess.getNodeClassAccess().getPriomaxAssignment_4_2_2(), "rule__NodeClass__PriomaxAssignment_4_2_2");
					put(grammarAccess.getNodeClassAccess().getThreadsAssignment_5(), "rule__NodeClass__ThreadsAssignment_5");
					put(grammarAccess.getPhysicalThreadAccess().getDefaultAssignment_0_0(), "rule__PhysicalThread__DefaultAssignment_0_0");
					put(grammarAccess.getPhysicalThreadAccess().getNameAssignment_1(), "rule__PhysicalThread__NameAssignment_1");
					put(grammarAccess.getPhysicalThreadAccess().getExecmodeAssignment_3_0_2(), "rule__PhysicalThread__ExecmodeAssignment_3_0_2");
					put(grammarAccess.getPhysicalThreadAccess().getTimeAssignment_3_1_2(), "rule__PhysicalThread__TimeAssignment_3_1_2");
					put(grammarAccess.getPhysicalThreadAccess().getPrioAssignment_3_2_2(), "rule__PhysicalThread__PrioAssignment_3_2_2");
					put(grammarAccess.getPhysicalThreadAccess().getStacksizeAssignment_3_3_2(), "rule__PhysicalThread__StacksizeAssignment_3_3_2");
					put(grammarAccess.getPhysicalThreadAccess().getMsgblocksizeAssignment_3_4_2(), "rule__PhysicalThread__MsgblocksizeAssignment_3_4_2");
					put(grammarAccess.getPhysicalThreadAccess().getMsgpoolsizeAssignment_3_5_2(), "rule__PhysicalThread__MsgpoolsizeAssignment_3_5_2");
					put(grammarAccess.getRuntimeClassAccess().getNameAssignment_1(), "rule__RuntimeClass__NameAssignment_1");
					put(grammarAccess.getRuntimeClassAccess().getDocuAssignment_2(), "rule__RuntimeClass__DocuAssignment_2");
					put(grammarAccess.getRuntimeClassAccess().getThreadModelAssignment_6(), "rule__RuntimeClass__ThreadModelAssignment_6");
					put(grammarAccess.getDocumentationAccess().getTextAssignment_1(), "rule__Documentation__TextAssignment_1");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1_0_0(), "rule__Import__ImportedNamespaceAssignment_1_0_0");
					put(grammarAccess.getImportAccess().getImportURIAssignment_2(), "rule__Import__ImportURIAssignment_2");
					put(grammarAccess.getNodeClassAccess().getUnorderedGroup_4(), "rule__NodeClass__UnorderedGroup_4");
					put(grammarAccess.getPhysicalThreadAccess().getUnorderedGroup_3(), "rule__PhysicalThread__UnorderedGroup_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.etrice.core.etphys.ui.contentassist.antlr.internal.InternalETPhysParser typedParser = (org.eclipse.etrice.core.etphys.ui.contentassist.antlr.internal.InternalETPhysParser) parser;
			typedParser.entryRulePhysicalModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ETPhysGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ETPhysGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
