/*
* generated by Xtext
*/
package org.eclipse.etrice.core.etmap.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.etrice.core.etmap.services.ETMapGrammarAccess;

public class ETMapParser extends AbstractContentAssistParser {
	
	@Inject
	private ETMapGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.etrice.core.etmap.ui.contentassist.antlr.internal.InternalETMapParser createParser() {
		org.eclipse.etrice.core.etmap.ui.contentassist.antlr.internal.InternalETMapParser result = new org.eclipse.etrice.core.etmap.ui.contentassist.antlr.internal.InternalETMapParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getImportAccess().getAlternatives_1(), "rule__Import__Alternatives_1");
					put(grammarAccess.getMappingModelAccess().getGroup(), "rule__MappingModel__Group__0");
					put(grammarAccess.getMappingAccess().getGroup(), "rule__Mapping__Group__0");
					put(grammarAccess.getSubSystemMappingAccess().getGroup(), "rule__SubSystemMapping__Group__0");
					put(grammarAccess.getSubSystemMappingAccess().getGroup_4(), "rule__SubSystemMapping__Group_4__0");
					put(grammarAccess.getThreadMappingAccess().getGroup(), "rule__ThreadMapping__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getImportAccess().getGroup_1_0(), "rule__Import__Group_1_0__0");
					put(grammarAccess.getImportedFQNAccess().getGroup(), "rule__ImportedFQN__Group__0");
					put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
					put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
					put(grammarAccess.getMappingModelAccess().getNameAssignment_1(), "rule__MappingModel__NameAssignment_1");
					put(grammarAccess.getMappingModelAccess().getImportsAssignment_3(), "rule__MappingModel__ImportsAssignment_3");
					put(grammarAccess.getMappingModelAccess().getMappingsAssignment_4(), "rule__MappingModel__MappingsAssignment_4");
					put(grammarAccess.getMappingAccess().getLogicalSysAssignment_1(), "rule__Mapping__LogicalSysAssignment_1");
					put(grammarAccess.getMappingAccess().getPhysicalSysAssignment_3(), "rule__Mapping__PhysicalSysAssignment_3");
					put(grammarAccess.getMappingAccess().getSubsysMappingsAssignment_5(), "rule__Mapping__SubsysMappingsAssignment_5");
					put(grammarAccess.getSubSystemMappingAccess().getLogicalSubSysAssignment_1(), "rule__SubSystemMapping__LogicalSubSysAssignment_1");
					put(grammarAccess.getSubSystemMappingAccess().getNodeAssignment_3(), "rule__SubSystemMapping__NodeAssignment_3");
					put(grammarAccess.getSubSystemMappingAccess().getThreadMappingsAssignment_4_1(), "rule__SubSystemMapping__ThreadMappingsAssignment_4_1");
					put(grammarAccess.getThreadMappingAccess().getLogicalThreadAssignment_1(), "rule__ThreadMapping__LogicalThreadAssignment_1");
					put(grammarAccess.getThreadMappingAccess().getPhysicalThreadAssignment_3(), "rule__ThreadMapping__PhysicalThreadAssignment_3");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1_0_0(), "rule__Import__ImportedNamespaceAssignment_1_0_0");
					put(grammarAccess.getImportAccess().getImportURIAssignment_2(), "rule__Import__ImportURIAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.etrice.core.etmap.ui.contentassist.antlr.internal.InternalETMapParser typedParser = (org.eclipse.etrice.core.etmap.ui.contentassist.antlr.internal.InternalETMapParser) parser;
			typedParser.entryRuleMappingModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ETMapGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ETMapGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
