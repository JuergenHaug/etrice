/*
* generated by Xtext
*/
grammar InternalETMap;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.eclipse.etrice.core.etmap.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.etrice.core.etmap.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipse.etrice.core.etmap.services.ETMapGrammarAccess;

}

@parser::members {
 
 	private ETMapGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ETMapGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleMappingModel
entryRuleMappingModel 
:
{ before(grammarAccess.getMappingModelRule()); }
	 ruleMappingModel
{ after(grammarAccess.getMappingModelRule()); } 
	 EOF 
;

// Rule MappingModel
ruleMappingModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMappingModelAccess().getGroup()); }
(rule__MappingModel__Group__0)
{ after(grammarAccess.getMappingModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMapping
entryRuleMapping 
:
{ before(grammarAccess.getMappingRule()); }
	 ruleMapping
{ after(grammarAccess.getMappingRule()); } 
	 EOF 
;

// Rule Mapping
ruleMapping
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMappingAccess().getGroup()); }
(rule__Mapping__Group__0)
{ after(grammarAccess.getMappingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubSystemMapping
entryRuleSubSystemMapping 
:
{ before(grammarAccess.getSubSystemMappingRule()); }
	 ruleSubSystemMapping
{ after(grammarAccess.getSubSystemMappingRule()); } 
	 EOF 
;

// Rule SubSystemMapping
ruleSubSystemMapping
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubSystemMappingAccess().getGroup()); }
(rule__SubSystemMapping__Group__0)
{ after(grammarAccess.getSubSystemMappingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleThreadMapping
entryRuleThreadMapping 
:
{ before(grammarAccess.getThreadMappingRule()); }
	 ruleThreadMapping
{ after(grammarAccess.getThreadMappingRule()); } 
	 EOF 
;

// Rule ThreadMapping
ruleThreadMapping
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getThreadMappingAccess().getGroup()); }
(rule__ThreadMapping__Group__0)
{ after(grammarAccess.getThreadMappingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImportedFQN
entryRuleImportedFQN 
:
{ before(grammarAccess.getImportedFQNRule()); }
	 ruleImportedFQN
{ after(grammarAccess.getImportedFQNRule()); } 
	 EOF 
;

// Rule ImportedFQN
ruleImportedFQN
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportedFQNAccess().getGroup()); }
(rule__ImportedFQN__Group__0)
{ after(grammarAccess.getImportedFQNAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFQN
entryRuleFQN 
:
{ before(grammarAccess.getFQNRule()); }
	 ruleFQN
{ after(grammarAccess.getFQNRule()); } 
	 EOF 
;

// Rule FQN
ruleFQN
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFQNAccess().getGroup()); }
(rule__FQN__Group__0)
{ after(grammarAccess.getFQNAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Import__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getGroup_1_0()); }
(rule__Import__Group_1_0__0)
{ after(grammarAccess.getImportAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getImportAccess().getModelKeyword_1_1()); }

	'model' 

{ after(grammarAccess.getImportAccess().getModelKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__MappingModel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MappingModel__Group__0__Impl
	rule__MappingModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingModel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingModelAccess().getMappingModelKeyword_0()); }

	'MappingModel' 

{ after(grammarAccess.getMappingModelAccess().getMappingModelKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MappingModel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MappingModel__Group__1__Impl
	rule__MappingModel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingModel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingModelAccess().getNameAssignment_1()); }
(rule__MappingModel__NameAssignment_1)
{ after(grammarAccess.getMappingModelAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MappingModel__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MappingModel__Group__2__Impl
	rule__MappingModel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingModel__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingModelAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getMappingModelAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MappingModel__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MappingModel__Group__3__Impl
	rule__MappingModel__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingModel__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingModelAccess().getImportsAssignment_3()); }
(rule__MappingModel__ImportsAssignment_3)*
{ after(grammarAccess.getMappingModelAccess().getImportsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MappingModel__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MappingModel__Group__4__Impl
	rule__MappingModel__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingModel__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingModelAccess().getMappingsAssignment_4()); }
(rule__MappingModel__MappingsAssignment_4)*
{ after(grammarAccess.getMappingModelAccess().getMappingsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MappingModel__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MappingModel__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MappingModel__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingModelAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getMappingModelAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Mapping__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__0__Impl
	rule__Mapping__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getMappingKeyword_0()); }

	'Mapping' 

{ after(grammarAccess.getMappingAccess().getMappingKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__1__Impl
	rule__Mapping__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getLogicalSysAssignment_1()); }
(rule__Mapping__LogicalSysAssignment_1)
{ after(grammarAccess.getMappingAccess().getLogicalSysAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__2__Impl
	rule__Mapping__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getHyphenMinusGreaterThanSignKeyword_2()); }

	'->' 

{ after(grammarAccess.getMappingAccess().getHyphenMinusGreaterThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__3__Impl
	rule__Mapping__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getPhysicalSysAssignment_3()); }
(rule__Mapping__PhysicalSysAssignment_3)
{ after(grammarAccess.getMappingAccess().getPhysicalSysAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__4__Impl
	rule__Mapping__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getLeftCurlyBracketKeyword_4()); }

	'{' 

{ after(grammarAccess.getMappingAccess().getLeftCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__5__Impl
	rule__Mapping__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getSubsysMappingsAssignment_5()); }
(rule__Mapping__SubsysMappingsAssignment_5)*
{ after(grammarAccess.getMappingAccess().getSubsysMappingsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getMappingAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__SubSystemMapping__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubSystemMapping__Group__0__Impl
	rule__SubSystemMapping__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubSystemMapping__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSystemMappingAccess().getSubSystemMappingKeyword_0()); }

	'SubSystemMapping' 

{ after(grammarAccess.getSubSystemMappingAccess().getSubSystemMappingKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubSystemMapping__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubSystemMapping__Group__1__Impl
	rule__SubSystemMapping__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubSystemMapping__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSystemMappingAccess().getLogicalSubSysAssignment_1()); }
(rule__SubSystemMapping__LogicalSubSysAssignment_1)
{ after(grammarAccess.getSubSystemMappingAccess().getLogicalSubSysAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubSystemMapping__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubSystemMapping__Group__2__Impl
	rule__SubSystemMapping__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubSystemMapping__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSystemMappingAccess().getHyphenMinusGreaterThanSignKeyword_2()); }

	'->' 

{ after(grammarAccess.getSubSystemMappingAccess().getHyphenMinusGreaterThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubSystemMapping__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubSystemMapping__Group__3__Impl
	rule__SubSystemMapping__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SubSystemMapping__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSystemMappingAccess().getNodeAssignment_3()); }
(rule__SubSystemMapping__NodeAssignment_3)
{ after(grammarAccess.getSubSystemMappingAccess().getNodeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubSystemMapping__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubSystemMapping__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubSystemMapping__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSystemMappingAccess().getGroup_4()); }
(rule__SubSystemMapping__Group_4__0)?
{ after(grammarAccess.getSubSystemMappingAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SubSystemMapping__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubSystemMapping__Group_4__0__Impl
	rule__SubSystemMapping__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubSystemMapping__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSystemMappingAccess().getLeftCurlyBracketKeyword_4_0()); }

	'{' 

{ after(grammarAccess.getSubSystemMappingAccess().getLeftCurlyBracketKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubSystemMapping__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubSystemMapping__Group_4__1__Impl
	rule__SubSystemMapping__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubSystemMapping__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSystemMappingAccess().getThreadMappingsAssignment_4_1()); }
(rule__SubSystemMapping__ThreadMappingsAssignment_4_1)*
{ after(grammarAccess.getSubSystemMappingAccess().getThreadMappingsAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubSystemMapping__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubSystemMapping__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubSystemMapping__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSystemMappingAccess().getRightCurlyBracketKeyword_4_2()); }

	'}' 

{ after(grammarAccess.getSubSystemMappingAccess().getRightCurlyBracketKeyword_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ThreadMapping__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ThreadMapping__Group__0__Impl
	rule__ThreadMapping__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ThreadMapping__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThreadMappingAccess().getThreadMappingKeyword_0()); }

	'ThreadMapping' 

{ after(grammarAccess.getThreadMappingAccess().getThreadMappingKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ThreadMapping__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ThreadMapping__Group__1__Impl
	rule__ThreadMapping__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ThreadMapping__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThreadMappingAccess().getLogicalThreadAssignment_1()); }
(rule__ThreadMapping__LogicalThreadAssignment_1)
{ after(grammarAccess.getThreadMappingAccess().getLogicalThreadAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ThreadMapping__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ThreadMapping__Group__2__Impl
	rule__ThreadMapping__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ThreadMapping__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThreadMappingAccess().getHyphenMinusGreaterThanSignKeyword_2()); }

	'->' 

{ after(grammarAccess.getThreadMappingAccess().getHyphenMinusGreaterThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ThreadMapping__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ThreadMapping__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ThreadMapping__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThreadMappingAccess().getPhysicalThreadAssignment_3()); }
(rule__ThreadMapping__PhysicalThreadAssignment_3)
{ after(grammarAccess.getThreadMappingAccess().getPhysicalThreadAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
	rule__Import__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getAlternatives_1()); }
(rule__Import__Alternatives_1)
{ after(grammarAccess.getImportAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportURIAssignment_2()); }
(rule__Import__ImportURIAssignment_2)
{ after(grammarAccess.getImportAccess().getImportURIAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Import__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group_1_0__0__Impl
	rule__Import__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1_0_0()); }
(rule__Import__ImportedNamespaceAssignment_1_0_0)
{ after(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getFromKeyword_1_0_1()); }

	'from' 

{ after(grammarAccess.getImportAccess().getFromKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ImportedFQN__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportedFQN__Group__0__Impl
	rule__ImportedFQN__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportedFQN__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportedFQNAccess().getFQNParserRuleCall_0()); }
	ruleFQN
{ after(grammarAccess.getImportedFQNAccess().getFQNParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImportedFQN__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportedFQN__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportedFQN__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportedFQNAccess().getFullStopAsteriskKeyword_1()); }
(
	'.*' 
)?
{ after(grammarAccess.getImportedFQNAccess().getFullStopAsteriskKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FQN__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group__0__Impl
	rule__FQN__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FQN__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getGroup_1()); }
(rule__FQN__Group_1__0)*
{ after(grammarAccess.getFQNAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FQN__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group_1__0__Impl
	rule__FQN__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FQN__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FQN__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__MappingModel__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingModelAccess().getNameFQNParserRuleCall_1_0()); }
	ruleFQN{ after(grammarAccess.getMappingModelAccess().getNameFQNParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MappingModel__ImportsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingModelAccess().getImportsImportParserRuleCall_3_0()); }
	ruleImport{ after(grammarAccess.getMappingModelAccess().getImportsImportParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MappingModel__MappingsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingModelAccess().getMappingsMappingParserRuleCall_4_0()); }
	ruleMapping{ after(grammarAccess.getMappingModelAccess().getMappingsMappingParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__LogicalSysAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getLogicalSysLogicalSystemCrossReference_1_0()); }
(
{ before(grammarAccess.getMappingAccess().getLogicalSysLogicalSystemFQNParserRuleCall_1_0_1()); }
	ruleFQN{ after(grammarAccess.getMappingAccess().getLogicalSysLogicalSystemFQNParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getMappingAccess().getLogicalSysLogicalSystemCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__PhysicalSysAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getPhysicalSysPhysicalSystemCrossReference_3_0()); }
(
{ before(grammarAccess.getMappingAccess().getPhysicalSysPhysicalSystemFQNParserRuleCall_3_0_1()); }
	ruleFQN{ after(grammarAccess.getMappingAccess().getPhysicalSysPhysicalSystemFQNParserRuleCall_3_0_1()); }
)
{ after(grammarAccess.getMappingAccess().getPhysicalSysPhysicalSystemCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__SubsysMappingsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getSubsysMappingsSubSystemMappingParserRuleCall_5_0()); }
	ruleSubSystemMapping{ after(grammarAccess.getMappingAccess().getSubsysMappingsSubSystemMappingParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubSystemMapping__LogicalSubSysAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSystemMappingAccess().getLogicalSubSysSubSystemRefCrossReference_1_0()); }
(
{ before(grammarAccess.getSubSystemMappingAccess().getLogicalSubSysSubSystemRefIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getSubSystemMappingAccess().getLogicalSubSysSubSystemRefIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getSubSystemMappingAccess().getLogicalSubSysSubSystemRefCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubSystemMapping__NodeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSystemMappingAccess().getNodeNodeRefCrossReference_3_0()); }
(
{ before(grammarAccess.getSubSystemMappingAccess().getNodeNodeRefIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getSubSystemMappingAccess().getNodeNodeRefIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getSubSystemMappingAccess().getNodeNodeRefCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubSystemMapping__ThreadMappingsAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubSystemMappingAccess().getThreadMappingsThreadMappingParserRuleCall_4_1_0()); }
	ruleThreadMapping{ after(grammarAccess.getSubSystemMappingAccess().getThreadMappingsThreadMappingParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ThreadMapping__LogicalThreadAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThreadMappingAccess().getLogicalThreadLogicalThreadCrossReference_1_0()); }
(
{ before(grammarAccess.getThreadMappingAccess().getLogicalThreadLogicalThreadIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getThreadMappingAccess().getLogicalThreadLogicalThreadIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getThreadMappingAccess().getLogicalThreadLogicalThreadCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ThreadMapping__PhysicalThreadAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThreadMappingAccess().getPhysicalThreadPhysicalThreadCrossReference_3_0()); }
(
{ before(grammarAccess.getThreadMappingAccess().getPhysicalThreadPhysicalThreadIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getThreadMappingAccess().getPhysicalThreadPhysicalThreadIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getThreadMappingAccess().getPhysicalThreadPhysicalThreadCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportedNamespaceAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceImportedFQNParserRuleCall_1_0_0_0()); }
	ruleImportedFQN{ after(grammarAccess.getImportAccess().getImportedNamespaceImportedFQNParserRuleCall_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportURIAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


