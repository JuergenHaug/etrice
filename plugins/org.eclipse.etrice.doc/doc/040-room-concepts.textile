h1. ROOM Concepts

This chapter gives an overview over the ROOM language elements and their textual and graphical notation.
The formal ROOM grammar based on Xtext (EBNF) you can find here: "ROOM Grammar":http://git.eclipse.org/c/etrice/org.eclipse.etrice.git/tree/plugins/org.eclipse.etrice.core.room/src/org/eclipse/etrice/core/Room.xtext

h2. Actors

h3. Description
 
The actor is the basic structural building block for building systems with ROOM. An actor can be refined hierarchically and thus can be of arbitrarily large scope. Ports define the interface of an actor. An Actor can also have a behavior usually defined by a finite state machine.

h3. Motivation

* Actors enable the construction of hierarchical structures by composition and layering
* Actors have their own logical thread of execution
* Actors can be freely deployed
* Actors define potentially reusable blocks

h3. Notation

<table title="Actor Class Notation" frame="box" border="2" cellpadding="3" cellspacing="0" >
	<tr>
		<td align="center">*Element*</td>
		<td align="center">*Graphical Notation*</td>
		<td align="center">*Textual Notation*</td>
	</tr>
	<tr>
		<td>ActorClass</td>
		<td>!images\040-ActorClassNotation.png!</td>
		<td>!images\040-ActorClassTextualNotation.png!</td>
	</tr>
	<tr>
		<td>ActorRef</td>
		<td>!images\040-ActorReferenceNotation.png!</td>
		<td>!images\040-ActorReferenceTextualNotation.png!</td>
	</tr>
</table> 

h3. Details

h4.  Actor Classes, Actor References, Ports and Bindings

An *ActorClass* defines the type (or blueprint) of an actor. Hierarchies are built by ActorClasses that contain *ActorReferences* which have another ActorClass as type. The interface of an ActorClass is always defined by Ports. The ActorClass can also contain Attributes, Operations and a finite state machine. 

*External Ports* define the external interface of an actor and are defined in the *Interface* section of the ActorClass.

*Internal Ports* define the internal interface of an actor and are defined in the *Structure* section of the ActorClass.

*Bindings* connect Ports inside an ActorClass.

Example:

<table title="Actor Class Example" frame="box" border="2" cellpadding="3" cellspacing="0" >
	<tr>
		<td align="center">*Graphical Notation*</td>
		<td align="center">*Textual Notation*</td>
	</tr>
	<tr>
		<td>!images\040-ActorClass.png!</td>
		<td>!images\040-ActorClassExampleTextualNotation.png!</td>
	</tr>
</table> 

* _ActorClass1_ contains two ActorReferences (of ActorClass2 and ActorClass3)
* _port1_ is a *External End Port*. Since it connects external Actors with the behavior of the ActorClass, it is defined in the *Interface* section and the *Structure* section of the ActorClass.
* _port2_ and _port3_ are *Internal End Ports* and can only be connected to the ports of contained ActorReferences. Internal End Ports connect the Behavior of an ActorClass with its contained ActorReferences.
* _port4_ is a relay port and connects external Actors to contained ActorReferences. This port can not be accessed by the behavior of the ActorClass.
* _port5_ through _port9_ are Ports of contained ActorReferences. _port8_ and _port9_ can communicate without interference with the containing ActorClass.
* *Bindings* can connect ports of the ActorClass and its contained ActorReferences. 

h4.  Attributes

Attributes are part of the Structure of an ActorClass. They can be of a PrimitiveType or a DataClass.

Example:

!images\040-ActorClassAttributes.png!

h4.  Operations

Operations are part of the Behavior of an ActorClass.  Arguments and return values can be of a PrimitiveType or a DataClass. DataClasses can be passed by value (implicit) or by reference (keyword *ref*).

Example:

!images\040-ActorClassOperations.png!

h2. Protocols

h3. Description

A ProtocolClass defines a set of incoming and outgoing messages that can be exchanged between two ports.
The exact semantics of a message is defined by the execution model.

h3. Motivation

* ProtocolClasses provide a reusable interface specification for ports
* ProtocolClasses can optionally specify valid message exchange sequences

h3. Notation

ProtocolClasses have only textual notation. 
The example defines a ProtocolClass with 2 incoming and two outgoing messages. Messages can have data attached. The data can be of a primitive type (e.g. int32, float64, ...) or a DataClass.

!images\040-ProtocolClassTextualNotation.png!

h2. Ports

here is a line

<table border="1" cellpadding="3" cellspacing="0" width="60%">
  <tr>
    <th width="50%">Element</th>
    <th>Graphical Notation</th>
    <th>Textual Notation</th>
  </tr>
  <tr>
    <td width="50%">Berlin</td>
    <td>Hamburg</td>
    <td>M&uuml;nchen</td>
  </tr>
  <tr>
    <td>Milj&ouml;h</td>
    <td>Kiez</td>
    <td>Bierdampf</td>
  </tr>
  <tr>
    <td>Buletten</td>
    <td>Frikadellen</td>
    <td>Fleischpflanzerl</td>
  </tr>
</table>

end of table

h3. Description

Ports are the only interfaces of actors. A port has always a protocol assigned. 
Service Access Points (SAP) and Service Provision Points (SPP) are specialized ports that are used to define layering.

h3. Motivation

* Ports decouple interface definition (Protocols) from interface usage
* Ports decouple the logical interface from the transport 

h3. Notation

h4. Class Ports

These symbols can only appear on the border of an actor class symbol. 

Ports that define an external interface of the ActorClass, are defined in the _Interface_. Ports that define an internal interface are defined in the _Structure_ (e.g. internal ports).
* *External End Ports* are defined in the Interface and the Structure
* *Internal End Ports* are only defined in the Structure
* *Relay Ports* are only defined in the Interface
* *End Ports* are always connected to the internal behavior of the ActorClass
* *Replicated Ports* can be defined with a fixed replication factor ( e.g. _Port port18 [ 5 ]: ProtocolClass1_ ) or a variable replication factor (e.g. _Port port18[ * ]: ProtocolClass1_ )

<table title="Class Port Notation" frame="box" border="2" cellpadding="3" cellspacing="0">
	<tr>
		<td align="center">*Element*</td>
		<td align="center" width="15%">*Graphical Notation*</td>
		<td align="center">*Textual Notation*</td>
	</tr>
	<tr>
		<td>Class End Port</td>
		<td align="center">!images\040-ClassEndPort.png!</td>
		<td>
			*External Class End Port:*
			!images\040-ClassEndPortTextual.png!
			*Internal Class End Port:*
			!images\040-ClassEndPortInternalTextual.png!
		</td>
	</tr>
	<tr>
		<td>Conjugated Class End Port</td>
		<td align="center">!images\040-ConjugatedClassEndPort.png!</td>
		<td>
			*External Conjugated Class End Port:*
			!images\040-ConjugatedClassEndPortTextual.png!
			*Internal Conjugated Class End Port:*
			!images\040-ConjugatedClassEndPortInternalTextual.png!
		</td>
	</tr>
	<tr>
		<td>Class Relay Port</td>
		<td align="center">!images\040-ClassRelayPort.png!</td>
		<td>
			!images\040-ClassRelayPortTextual.png!
		</td>
	</tr>
	<tr>
		<td>Conjugated Class Relay Port</td>
		<td align="center">!images\040-ConjugatedClassRelayPort.png!</td>
		<td>
			!images\040-ConjugatedClassRelayPortTextual.png!
		</td>
	</tr>
	<tr>
		<td>Replicated Class End Port</td>
		<td align="center">!images\040-ReplicatedClassEndPort.png!</td>
		<td>
			*External Replicated Class End Port:*
			!images\040-ReplicatedClassEndPortTextual.png!
			*Internal Replicated Class End Port:*
			!images\040-ReplicatedClassEndPortInternalTextual.png!
		</td>
	</tr>
	<tr>
		<td>Conjugated Replicated Class End Port</td>
		<td align="center">!images\040-ConjugatedReplicatedClassEndPort.png!</td>
		<td>
			*External Conjugated Replicated Class End Port:*
			!images\040-ConjugatedReplicatedClassEndPortTextual.png!
			*Internal Conjugated Replicated Class End Port:*
			!images\040-ConjugatedReplicatedClassEndPortInternalTextual.png!
		</td>
	</tr>
	<tr>
		<td>Replicated Class Relay Port</td>
		<td align="center">!images\040-ReplicatedClassRelayPort.png!</td>
		<td>
			!images\040-ReplicatedClassRelayPortTextual.png!
		</td>
	</tr>
	<tr>
		<td>Conjugated Replicated Class Relay Port</td>
		<td align="center">!images\040-ConjugatedReplicatedClassRelayPort.png!</td>
		<td>
			!images\040-ConjugatedReplicatedClassRelayPortTextual.png!
		</td>
	</tr>
</table>

h4. Reference Ports

These symbols can only appear on the border of an ActorReference symbol. Since the type of port is defined in the ActorClass, no textual notation for the Reference Ports exists.

<table title="Title" frame="box" border="2" cellpadding="3" cellspacing="0">
	<tr>
		<td align="center">*Element*</td>
		<td align="center">*Graphical Notation*</td>
		<td align="center">*Textual Notation*</td>
	</tr>
	<tr>
		<td>Reference Port</td>
		<td align="center">!images\040-ReferencePort.png!</td>
		<td align="center">_implicit_</td>
	</tr>
	<tr>
		<td>Conjugated Reference Port</td>
		<td align="center">!images\040-ConjugatedReferencePort.png!</td>
		<td align="center">_implicit_</td>
	</tr>
	<tr>
		<td>Replicated Reference Port</td>
		<td align="center">!images\040-ReplicatedReferencePort.png!</td>
		<td align="center">_implicit_</td>
	</tr>
	<tr>
		<td>Conjugated Replicated Reference Port</td>
		<td align="center">!images\040-ConjugatedReplicatedReferencePort.png!</td>
		<td align="center">_implicit_</td>
	</tr>
</table>

h2. DataClass

h3. Description

The DataClass enables the modeling of hierarchical complex datatypes and operations on them. The DataClass is the equivalent to a Class in languages like Java or C++, but has less features. The content of a DataClass can always be sent via message between actors (defined as message data in ProtocolClass).

h3. Notation
  
Example: DataClass using PrimitiveTypes

!images\040-DataClass1.png!

Example: DataClass using other DataClasses:

!images\040-DataClass2.png!

h2. Layering

h3. Description

In addition to the Actor containment hierarchies, Layering provides another method to hierarchically structure a software system. Layering and actor hierarchies with port to port connections can be mixed on every level of granularity.
# an ActorClass can define a Service Provision Point (SPP) to publish a specific service, defined by a ProtocolClass
# an ActorClass can define a Service Access Point (SAP) if it needs a service, defined by a ProtocolClass
# for a given Actor hierarchy, a LayerConnection defines which SAP will be satisfied by (connected to) which SPP

h3. Notation

<table title="Title" frame="box" border="2" cellpadding="3" cellspacing="0">
	<tr>
		<td align="center">*Description*</td>
		<td align="center">*Graphical Notation*</td>
		<td align="center">*Textual Notation*</td>
	</tr>
	<tr>
		<td>The Layer Connections in this model define which services are provided by the _ServiceLayer_  (_digitalIO_ and _timer_)</td>
		<td>!images\040-LayeringModel.png!</td>
		<td>!images\040-LayeringModelTextual.png!</td>
	</tr>
	<tr>
		<td>The implementation of the services (SPPs) can be delegated to sub actors. In this case the actor _ServiceLayer_ relays (delegates) the implementation services _digitalIO_ and _timer_ to sub actors</td>
		<td>!images\040-LayeringServiceLayer.png!</td>
		<td>!images\040-LayeringServiceLayerTextual.png!</td>
	</tr>
	<tr>
		<td>Every Actor inside the _ApplicationLayer_ that contains an SAP with the same Protocol as _timer_ or _digitalIO_ will be connected to the specified SPP</td>
		<td>!images\040-LayeringApplicationLayer.png!</td>
		<td>!images\040-LayeringApplicationLayerTextual.png!</td>
	</tr>
</table>

h2. Finite State Machine

h3. Description

h3. Motivation

h3. Notation

h3. Examples

h3. Details