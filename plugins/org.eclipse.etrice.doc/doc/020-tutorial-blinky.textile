h1. Tutorial Blinky

h2. Scope

This tutorial describes how to use the _TimingService_, how to combine a generated model with manual code and how to model a hierarchical state machine. The idea of the tutorial is to switch a LED on and off. The behavior of the LED should be: blinking in a one second interval for 5 seconds, stop blinking for 5 seconds, blinking, stop,...  
For this exercise we will use a little GUI class that will be used in more sophisticated tutorials too. The GUI simulates a pedestrian traffic crossing. For now, just a simple LED simulation will be used from the GUI. 

After the exercise is created you must copy the GUI to your src directory (see below).

The package contains four java classes which implements a small window with a 3-light traffic light which simulates the signals for the car traffic and a 2-light traffic light which simulates the pedestrian signals.

The GUI looks like this:

!images/020-Blinky08.png!

Within this tutorial we will just toggle the yellow light.

You will perform the following steps:

# create a new model from scratch
# define a protocol
# create an actor structure
# create a hierarchical state machine
# use the predefined _TimingService_
# combine manual code with generated code
# build and run the model
# open the message sequence chart

h2. Create a new model from scratch

Remember exercise _HelloWorld_.
Create a new eTrice project and name it _Blinky_

To use the GUI please copy the package _org.eclipse.etrice.tutorials.PedLightGUI_ from _org.eclipse.etrice.tutorials/src_ to your *src* directory _Blinky/src_. For this tutorial you must remove the error markers by editing the file _PedestrianLightWndNoTcp.java_. Appropriate comments are provided to remove the error marker for this turorial.

Open the _Blinky.room_ file and copy the following code into the file or use content assist to create the model.

bc.. 
RoomModel Blinky {

	LogicalSystem System_Blinky {
		SubSystemRef subsystem : SubSystem_Blinky
	}

	SubSystemClass SubSystem_Blinky {
		ActorRef application : BlinkyTop
	}

	ActorClass BlinkyTop {
	}
}
bq. 

h2. Add two additional actor classes

Position the cursor outside any class definition and right click the mouse within the editor window. From the context menu select _Content Assist_  

!images/020-Blinky02.png!

Select _ActorClass - actor class skeleton_ and name it _Blinky_.

!images/020-Blinky01.png! 

Repeat the described procedure and name the new actor _BlinkyController_.

With Ctrl+Shift+F you can beautify the model code. 

Save the model and visit the outline view.

h2. Create a new protocol

With the help of _Content Assist_ create a _ProtocolClass_ and name it _BlinkyControlProtocol_.
Inside the brackets use the _Content Assist_ (CTRL+Space) to create two incoming messages called _start_ and _stop_.

The resulting code should look like this:

!images/020-Blinky03.png! 

With Ctrl-Shift+F or selecting _Format_ from the context menu you can format the text. Note that all elements are displayed in the outline view.

h2. Import the Timing Service

Switching on and off the LED is timing controlled. The timing service is provided from the model library and must be imported before it can be used from the model.

This is the first time you use an element from the modellib. Make sure that your Java Build Path has the appropriate entry to the modellib. Otherwise the jave code, which will be generated from the modellib, can not be referenced.
(right click to _Blinky_ and select properties. Select the _Java Build Path_ tab) 
  
!images/020-Blinky16.png! 

After the build path is set up return to the model and navigate the cursor at the beginning of the model and import the timing service: 

bc.. 
RoomModel Blinky {
	
	import room.basic.service.timing.* from "../../org.eclipse.etrice.modellib/models/TimingService.room" 
	
	LogicalSystem System_Blinky {
		SubSystemRef subsystem: SubSystem_Blinky
	}
...	 
bq. 

Make sure that the path fits to your folder structure.  

Now it can be used within the model. Right click to _SubSystem_Blinky_ within the outline view. Select _Edit Structure_. The _application_ is already referenced in the subsystem. Drag and Drop an _ActorRef_ to the _SubSystem_Blinky_ and name it _timingService_. From the actor class drop down list select _room.basic.service.timing.ATimingService_. Draw a _LayerConnection_ from _application_ to each service provision point (SPP) of the _timingService_. The resulting structure should look like this:

!images/020-Blinky06.png! 

The current version of eTrice does not provide a graphical element for a service access point (SAP). Therefore the SAPs to access the timing service must be added in the .room file. Open the _Blinky.room_ file and navigate to the _Blinky_ actor. Add the following line to the structure of the actor:

bc. SAP timer: room.basic.service.timing.PTimeout

Do the same thing for _BlinkyController_.

The resulting code should look like this:

!images/020-Blinky07.png!


h2. Finish the model structure

From the outline view right click to _Blinky_ and select _Edit Structure_. Drag and Drop an _Interface Port_ to the boarder of the _Blinky_ actor. Note that an interface port is not possible inside the actor. Name the port _ControlPort_ and select _BlinkyControlProtocol_ from the drop down list. Uncheck _Conjugated_ and _Is Relay Port_. Klick _ok_. The resulting structure should look like this:


!images/020-Blinky04.png!

Repeat the above steps for the _BlinkyController_. Make the port _Conjugated_

Keep in mind that the protocol defines _start_ and _stop_ as incoming messages. _Blinky_ receives this messages and therefore _Blinky_'s _ControlPort_ must be a regular port and _BlinkyController_'s _ControlPort_ must be a conjugated port.


From the outline view right click _BlinkyTop_ and select _Edit Structure_.

Drag and Drop an _ActorRef_ inside the _BlinkyTop_ actor. Name it _blinky_. From the actor class drop down list select _Blinky_. Do the same for _controller_. Connect the ports via the binding tool. The resulting structure should look like this:

!images/020-Blinky05.png!

h2. Implement the Behavior

The application should switch on and off the LED for 5 seconds in a 1 second interval, than stop blinking for 5 seconds and start again. To implement this behavior we will implement two FSMs. One for the 1 second interval and one for the 5 second interval. The 1 second blinking should be implemented in _Blinky_. The 5 second interval should be implemented in _BlinkyController_. First implement the Controller.

Right click to _BlinkyController_ and select _Edit Behavior_.
Drag and Drop the _Initial Point_ and two _States_ into the top state. Name the states _on_ and _off_. 
Use the _Transition_ tool to draw transitions from _init_ to _on_ from _on_ to _off_ and from _off_ to _on_.

Open the transition dialog by double click the arrow to specify the trigger event and the action code of each transition. Note that the initial transition does not have a trigger event.

The transition dialog should look like this:

!{width=500px}images/020-Blinky09.png! 

The defined ports will be generated as a member attribute of the actor class from type of the attached protocol. So, to send e message you must state _port.message(param);_. In this example _ControlPort.start()_ sends the _start_ message via the _ControlPort_ to the outside world. Assuming that _Blinky_ is connected to this port, the message will start the one second blinking FSM. It is the same thing with the _timer_. The SAP is also a port and follows the same rules. So it is clear that _timer.Start(5000);_ will send the _Start_ message to the timing service. The timing service will send a _timeoutTick_ message back after 5000ms.

Within each transition the timer will be restarted and the appropriate message will be sent via the _ControlPort_. 

The resulting state machine should look like this:
(Note that the arrows peak changes if the transition contains action code.)

!images/020-Blinky10.png!

Save the diagram and inspect the _Blinky.room_ file. The _BlinkyController_ should look like this:

!images/020-Blinky11.png! 
 
Now we will implement _Blinky_. Due to the fact that _Blinky_ interacts with the GUI class a view things must to be done in the model file.

Double click _Blinky_ in the outline view to navigate to _Blinky_ within the model file.
Add the following code:
(type it or simply copy it from the tutorial project)

!images/020-Blinky12.png! 

_usercode1_ will be generated at the beginning of the file, outside the class definition. _usercode2_ will be generated within the class definition. The code imports the GUI class and instantiates the window class. Attributes for the carLights and pedLights will be declared to easily access the lights in the state machine.
The Operation _destroyUser()_ is a predefined operation that will be called during shutdown of the application. Within this operation, cleanup of manual coded classes can be done.
 
Now design the FSM of _Blinky_. Remember, as the name suggested _blinking_ is a state in which the LED must be switched on and off. We will realize that by an hierarchical FSM in which the _blinking_ state has two sub states.

Open the behavior diagram of _Blinky_ by right clicking the _Blinky_ actor in the outline view. Create two states named _blinking_ and _off_. Right click to _blinking_ and create a subgraph.

!images/020-Blinky13.png!

Create the following state machine. The trigger events between _on_ and _off_ are the _timeoutTick_ from the _timer_ port. 

!images/020-Blinky14.png!

Create entry code for both states by right clicking the state and select _Edit State..._

Entry code of _on_ is:

bc..  
timer.Start(1000);
carLights.setState(TrafficLight3.YELLOW); 
bq. 

 
Entry code  of _off_ is:

bc.. 
timer.Start(1000);
carLights.setState(TrafficLight3.OFF);
bq. 

Navigate to the Top level state by double clicking the _/blinking_ state. Create the following state machine:

!images/020-Blinky15.png!

The trigger event from _off_ to _blinking_ is the _start_ event from the _ControlPort_.The trigger event from _blinking_ to _off_ is the _stop_ event from the _ControlPort_.
Note: The transition from _blinking_ to _off_ is a so called group transition. This is a outgoing transition from a super state (state with sub states) without specifying the concrete leave state (state without sub states). An incoming transition to a super state is called history transition.   

Action code of the init transition is:

bc.. 
carLights = light.getCarLights();
pedLights = light.getPedLights();
carLights.setState(TrafficLight3.OFF);
pedLights.setState(TrafficLight2.OFF);
bq. 

Action code from _blinking_ to _off_ is:

bc.. 
timer.Kill();
carLights.setState(TrafficLight3.OFF); 
bq. 

The model is complete now. You can run and debug the model as described in getting started. Have fun.

The complete model can be found in /org.eclipse.etrice.tutorials/model/Blinky.

h2. Summary

Run the model and take a look at the generated MSCs. Inspect the generated code to understand the runtime model of eTrice. Within this tutorial you have learned how to create a hierarchical FSM with group transitions and history transitions and you have used entry code. You are now familiar with the basic features of eTrice. The further tutorials will take this knowledge as a precondition.

