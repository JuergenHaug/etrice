h1. Tutorial HelloWorld for C

h2. Scope

In this tutorial you will learn how to create a model for C from scratch. There are some more steps to do in C compared to Java. The goal is to get familiar with the additional steps. The Java tutorial is a prerequisite for the following explanations. 
You will perform the following steps:

# create a new model from scratch for C
# create structure and behavior similar to Java
# create a launch configuration for the C code generator
# setup the C environment
# generate the source code
# run the model

Make sure that you have set up the workspace as described in _Setting up the Workspace for C Projects_.


h2. Create a new model from scratch

Before you can create a new C-model, you have to create a new C project as described in _Setting up the Workspace for C Projects_.
Remember:
- select the _C/C++_ perspective
- From the main menue select _File->New->C Project_
- Name the project _HelloWorldC_
- Project type is _Executable / Empty C Project_
- Toolchain is _MinGW_

The workspace should look like this:

!images/034-HelloWorldC01.png!

The next step is to add the model folder:
Right click on the new project. Select _New->Folder_ and name it _model_.

!images/034-HelloWorldC02.png!

Add the model file to the folder. Right click on the new folder. Select _New->file_ and name it _HelloWorldC.room_.

!images/034-HelloWorldC03.png!

Due to the file ending _.room_, the tool will ask you to add the Xtext nature. Answer with _Yes_. 

!images/034-HelloWorldC04.png!

The workspace should look like this:

!images/034-HelloWorldC05.png!



h2. Create the HelloWorld model

Once the model file is created and the Xtext nature is added, you can create the model as you did it for Java.
Creating the model is not the focus of this tutorial. Therefore copy and paste the following code into your model file. Optionally you can open and layout the diagrams.  
Recognize the C specific parts:
- The action code contains C instead of Java. Later versions will contain a common action language, but for the moment the action language is target specific.
- The application must be shutdown on model level (see also _etRuntimeConfig.h_).  

bc.. 
RoomModel HelloWorldCModel {
	import room.basic.types.* from "../../org.eclipse.etrice.modellib.c/model/Types.room"
	SubSystemClass HelloWorldCSubSysClass {
		ActorRef HelloETriceTopRef:AHelloWorldCTop 
	}
	ActorClass AHelloWorldCTop {
		Structure { }
		Behavior {
			StateMachine {
				Transition init: initial -> state0 { }
				State state0 {
					entry {
						"printf(\"HelloWorldC !\\n\");"
						"SubSysClass_shutdown();"
						"\t\t\t\t\t\t"
					}
				}
			}
		}
	}	
}
bq. 

h2. Create a launch configuration to start the C code generator

Other than in Java a launch configuration for the C code generator must be created.

From the _Run_ menu select _Run Configurations_

!images/034-HelloWorldC06.png!

Within the dialog select _eTrice C Generator_ and click the _New_ button to create a new launch configuration.

!images/034-HelloWorldC07.png!

A new configuration should be created. Name it _gen_HelloWorldC_ and add the model via one of the _add_ buttons.

!images/034-HelloWorldC08.png!

In the _Refresh_ tab select _The entire workspace_ 

!images/034-HelloWorldC09.png!

In the _Common_ tab select _Shared file_ and add the _HelloWorldC_ project via the _Browse_ button.

!images/034-HelloWorldC10.png!

Apply your changes. The new configuration should now exist in your workspace.

!images/034-HelloWorldC11.png!


h2. Generate the code

Now you can generate the code as you know it from Java. Right click on the launch configuration and run it as _gen_HelloWorldC_.

!images/034-HelloWorldC12.png!

The code should be generated.

!images/034-HelloWorldC13.png!

h2. Setup the include path

Before you can build the application you must setup the include path for the runtime system. Right click the project and select _Properties_. Add the include path as described in _setting up the workspace_.

!images/034-HelloWorldC14.png!

Add the runtime library.

!images/034-HelloWorldC15.png!

Recognize the name of the library ("org.eclipse.etrice.runtime.c"). The library file on your disk is "liborg.eclipse.etrice.runtime.c.a". 

h2. Build and run the model

Now you can build the application. Click the build button to build the application.
Run the application as _Local C/C++ Application_.
Verify the output.

!images/034-HelloWorldC16.png!

h2. Summary

You are now familiar with all necessary steps to create, build and run an eTrice C model from scratch. You are able to create a launch configuration to start the code generator and to perform all necessary settings to compile and link the application.  

The next tutorial provides an exercise to get more familiar with these working steps.
 