h1. Tutorial HelloWorld (Java)

h2. Scope

In this tutorial you will build your first very simple eTrice model. The goal is to learn the work flow of eTrice and to understand a few basic features of ROOM. You will perform the following steps:

# create a new model from scratch
# add a very simple state machine to an actor
# generate the source code
# run the model
# open the message sequence chart

Make sure that you have set up the workspace as described in _Setting up the workspace_.

"video hello world":http://eclipse.org/etrice/images/015-HelloWorld01.avi

h2. Create a new model from scratch

The easiest way to create a new eTrice Project is to use the eclipse project wizard. From the eclipse file menu select _File->New->Project_ and create a new eTrice project and name it _HelloWorld_

!images/015-HelloWorld10.png!

The wizard creates everything that is needed to create, build and run an eTrice model. The resulting project should look like this:

!images/015-HelloWorld11.png!

Within the model directory the model file _HelloWorld.room_ was created. Open the _HelloWorld.room_ file and delete the contents of the file. Open the content assist with Ctrl+Space and select _model skeleton_.

!images/015-HelloWorld12.png!   

Edit the template variables by typing the new names and jumping with Tab from name to name.

The resulting model code should look like this:

bc.. 
RoomModel HelloWorld {

    LogicalSystem System_HelloWorld {
        SubSystemRef subsystem : SubSystem_HelloWorld
    }

    SubSystemClass SubSystem_HelloWorld {
        ActorRef application : HelloWorldTop
    }

    ActorClass HelloWorldTop {
    }
} 
bq. 

The goal of eTrice is to describe distributed systems on a logical level. In the current version not all elements will be used. But as prerequisite for further versions the following elements can be defined:
* the _LogicalSystem_ (currently optional)
* at least one _SubSystemClass_ (mandatory)
* at least one _ActorClass_ (mandatory)

The _LogicalSystem_ represents the complete distributed system and contains at least one _SubSystemRef_. The _SubSystemClass_ represents an address space and contains at least one _ActorRef_. The _ActorClass_ is the building block of which an application will be built of. It is in general a good idea to define a top level actor that can be used as reference within the subsystem.

The outline view of the textual ROOM editor shows the main modeling elements in an easy to navigate tree.


!images/015-HelloWorld02.png!


h2. Create a state machine

We will implement the Hello World code on the initial transition of the _HelloWorldTop_ actor. Therefore open the state machine editor by right clicking the _HelloWorldTop_ actor in the outline view and select _Edit Behavior_.

!images/015-HelloWorld03.png!

The state machine editor will be opened. Drag and drop an _Initial Point_ from the tool box to the diagram into the top level state. Drag and drop a _State_ from the tool box to the diagram. Confirm the dialogue with _ok_. Select the _Transition_ in the tool box and draw the transition from the _Initial Point_ to the State. Open the transition dialogue by double clicking the transition arrow and fill in the action code.

bc. System.out.println("Hello World !");
 
The result should look like this:

!images/015-HelloWorld04.png!

Save the diagram and inspect the model file. Note that the textual representation was created after saving the diagram.

!images/015-HelloWorld05.png!


h2. Build and run the model

Now the model is finished and source code can be generated. The project wizard has created a launch configuration that is responsible for generating the source code. From _HelloWorld/_ right click *gen_HelloWorld.launch* and run it as gen_HelloWorld. All model files in the model directory will be generated.

!images/015-HelloWorld06.png!

The code will be generated to the src-gen directory. The main function will be contained in *SubSystem_HelloWorldRunner.java*. Select this file and run it as Java application.

!images/015-HelloWorld07.png!


The Hello World application starts and the string will be printed on the console window. To stop the application the user must type _quit_ in the console window.

!images/015-HelloWorld08.png!

h2. Open the Message Sequence Chart

During runtime the application produced a MSC and wrote it to a file. Open HelloWorld/tmp/log/SubSystem_HelloWorld_Async.seq using Trace2UML (it is open source and can be obtained from  http://trace2uml.tigris.org/). You should see something like this:

!images/015-HelloWorld09.png!


h2. Summary

Now you have generated your first eTrice model from scratch. You can switch between diagram editor and model (.room file) and you can see what will be generated during editing and saving the diagram files. 
You should take a look at the generated source files to understand how the state machine is generated and the life cycle of the application. The next tutorials will deal with more complex hierarchies in structure and behavior.
 
