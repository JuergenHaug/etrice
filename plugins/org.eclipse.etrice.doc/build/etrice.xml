<?xml version='1.0' ?><!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book>
	<title>eTrice User Guide</title>
	<chapter id="eTriceOverview">
		<title>eTrice Overview</title>
		<section id="WhatiseTrice">
			<title>What is eTrice?</title>
			<para>eTrice provides an implementation of the ROOM modeling language (Real Time Object Oriented Modeling) together with editors, code generators for Java, C++ and C code and exemplary target middleware.</para>
			<para>The model is defined in textual form (Xtext) with graphical editors (Graphiti) for the structural and behavioral (i.e. state machine) parts.  </para>
		</section>
		<section id="WhoshoulduseeTrice">
			<title>Who should use eTrice?</title>
			<para>Basically everyone who develops eventdriven realtime or embedded systems. </para>
			<para>If you have other ideas how to use it, tell us!</para>
		</section>
		<section id="HowDoesItWork">
			<title>How Does It Work?</title>
			<para>TODO</para>
		</section>
		<section id="WhoisBehindeTrice">
			<title>Who is Behind eTrice?</title>
			<para>TODO</para>
		</section>
	</chapter>
	<chapter id="IntroductiontotheROOMLanguage">
		<title>Introduction to the ROOM Language</title>
		<section id="ScopeofROOM">
			<title>Scope of ROOM</title>
			<para>This chapter will give a rough overview of what ROOM (
				<emphasis role="bold">R</emphasis> eal time 
				<emphasis role="bold">O</emphasis> bject 
				<emphasis role="bold">O</emphasis> riented 
				<emphasis role="bold">M</emphasis> odeling) is and where it is good for. It will try to answer the following questions:
			</para>
			<itemizedlist>
				<listitem>
					<para>Where does it come from?</para>
				</listitem>
				<listitem>
					<para>Which kind of SW-Systems will be addressed?</para>
				</listitem>
				<listitem>
					<para>What is the relation between OOP and ROOM?</para>
				</listitem>
				<listitem>
					<para>What are the benefits of ROOM?</para>
				</listitem>
				<listitem>
					<para>Which consequences must be taken into account?</para>
				</listitem>
			</itemizedlist>
			<section id="Wheredoesitcomefrom">
				<title>Where does it come from?</title>
				<para>Room was developed in the 1990th on the background of the upcoming mobile applications with the goal to manage the complexity of such huge SW-Systems. From the very beginning ROOM has focused on a certain type of SW-Systems and, is in contrast to the UML, well suited for this kind of systems. In this sense, ROOM is a DSL (Domain Specific Language) for distributed, event driven, real time systems. </para>
				<para>Bran Selic, Garth Gullekson and Paul T. Ward have published the concepts 1994 in the book &#8222;REAL-TIME OBJECT-ORIENTED MODELING”. The company 
					<citation>object time</citation> &#8482; developed a ROOM tool which was taken over from 
					<citation>Rational SW</citation> &#8482; and later on from 
					<citation>IBM</citation> &#8482;. Unfortunately the tool is no longer maintained from 
					<citation>IBM</citation> &#8482;. The company 
					<citation>Protos SW Gmbh</citation> &#8482; also developed a ROOM tool called 
					<citation>trice</citation> &#8482; for controlling production machines. 
					<citation>Trice</citation> &#8482; is the predecessor of eTrice (see Introduction to eTrice). 
				</para>
				<para>From our point of view ROOM provides still the clearest, simplest, completest and best suited modeling concepts for the real time domain. All later proposals like the UML does not fit such perfect to this kind of problems.</para>
			</section>
			<section id="WhichkindofSWSystemswillbeaddressed">
				<title>Which kind of SW-Systems will be addressed?</title>
				<para>As mentioned before ROOM addresses distributed, event driven, real time systems. But what is a &#8222;real time system”? ROOM defines a set of properties which are typically for a real time system. This properties are:</para>
				<itemizedlist>
					<listitem>
						<para>Timeliness</para>
					</listitem>
					<listitem>
						<para>dynamic internal structure</para>
					</listitem>
					<listitem>
						<para>Reactiveness</para>
					</listitem>
					<listitem>
						<para>Concurrent</para>
					</listitem>
					<listitem>
						<para>Distributed</para>
					</listitem>
					<listitem>
						<para>Reliable</para>
					</listitem>
				</itemizedlist>
				<para>Each of this properties has potential to make SW development complex. If a given system can be characterized which some or all of this properties, ROOM might be applied to such a system.  </para>
				<para>As an example take a look at a washing machine. The system has to react on user interactions, has to handle some error conditions like a closed water tap or a defective lye pump. It has to react simultaneously to all this inputs. It has to close the water valve in a certain time to avoid flooding the basement. 
					So, the system can by characterized as timeliness, concurrent and reactive. As long as the washing machine does not transform to a laundry dryer by themself, the system has no dynamic internal structure and as long as all functions are running on a single microcontroller the (SW)-system is not distributed. 
					ROOM fits perfect to such a system.</para>
				<para>A SW system which mainly consists of data transformations like signal/image processing or loop controller (PID regulator) cannot be characterized with any of the above mentioned properties. However, in the real world most of the SW systems will be a combination of both. ROOM can be combined with such systems, so that for example an actor provides a 
					<citation>run to completion</citation> context for calculating a image processing algorithm.  
				</para>
			</section>
			<section id="WhatistherelationbetweenOOPandROOM">
				<title>What is the relation between OOP and ROOM?</title>
				<para>The relation between classic object oriented programming and ROOM is comparable to the relation between assembler programming and C programming. It provides a shift of the object paradigm. As the picture shows, the classic object paradigm provides some kind of information hiding. Attributes can be accessed via access methods. Logical higher level methods provides the requested behavior to the user.   </para>
				<para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/010-RoomIntroduction01.png"/>
						</imageobject>
					</mediaobject>
				</para>
				<para>As the figure illustrates, the classic object paradigm does not care about concurrency issues. The threads of control will be provided from the underlying operating system and the user is responsible to avoid access violations by using operating system mechanisms (semaphore, mutex).</para>
				<para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/010-RoomIntroduction02.png"/>
						</imageobject>
					</mediaobject>
				</para>
				<para>ROOM provides the concept of a logical machine (called actor) with it´s own thread of control. It provides some kind of cooperative communication infrastructure with &#8222;run to completion” semantic. That makes developing of business logic easy and save (see basic concepts). The logical machine provides an encapsulation shell including concurrency issues (see chapter &#8222;Run to completion”). </para>
				<para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/010-RoomIntroduction03.png"/>
						</imageobject>
					</mediaobject>
				</para>
				<para>This thinking of an object is much more general than the classic one.  </para>
			</section>
			<section id="WhatarethebenefitsofROOM">
				<title>What are the benefits of ROOM?</title>
				<para>ROOM has a lot of benefits and it depends on the users point of view which is the most important one. From a general point of view the most important benefit is, that ROOM allows to create SW systems very efficient, robust and safe due to the fact that it provides some abstract, high level modeling concepts combined with code generation and a small efficient runtime environment.  </para>
				<para>In detail:</para>
				<itemizedlist>
					<listitem>
						<para>ROOM models contain well defined interfaces (protocols). That makes it easy to reuse components in different applications or e.g. in a test harness. </para>
					</listitem>
					<listitem>
						<para>Graphical modeling makes it easy to understand, maintain and share code with other developers</para>
					</listitem>
					<listitem>
						<para>Higher abstraction in combination with automated code generation provides very efficient mechanisms to the developer. </para>
					</listitem>
					<listitem>
						<para>ROOM provides graphical model execution, which makes it easy to understand the application or  find defects in a very early phase. </para>
					</listitem>
				</itemizedlist>
			</section>
			<section id="Whichconsequencesmustbetakenintoaccount">
				<title>Which consequences must be taken into account?</title>
				<para>Generating code from models will introduce some overhead in terms of footprint as well as performance. For most systems the overhead will be negligible. However, the decision using ROOM should be made explicitly and it is always a tread of between development costs, time to market and costs in terms of a little bit more of memory and performance. As mentioned, in most cases the decision will be very clear. Especially in case of product lines or products which requires maintenance or feature updates, the ROOM methodology has big advantages.  </para>
				<para>Care must be taken during introduction of the new methodology. Due to the fact that ROOM provides a shift of the object paradigm, developers often needs a phase of adaption. Even some of them will never adapt.</para>
			</section>
		</section>
		<section id="BasicConcepts">
			<title>Basic Concepts</title>
			<section id="ActorPortProtocol">
				<title>Actor, Port, Protocol</title>
				<para>The basic elements of ROOM are the actor with its ports and protocols. The protocol provides a formal interface description. The port is an interaction point where the actor interacts with its outside world. Each port has exactly one protocol attached. The sum of all ports builds up the complete interface of an actor. Each port can receive messages with or without data which is defined in the protocol. Each message will be handled from the actors behavior (state machine) or will be delegated to the actors internal structure.</para>
				<para>The actor provides access protection for it´s own attributes (including complex types (classic objects)), including concurrency protection. An actor has neither public attributes nor public operations. The only interaction with the outside world takes place via interface ports. This ensures a high degree of reuse ability on actor level and provides an effective and safe programming model to the developer. </para>
				<para>Receiving a message via a port will trigger the internal state machine. A transition will be executed depending on the message and the actual state. Within this transition, detailed code will be executed and response messages can be sent.</para>
				<para>
					<ulink url="images\010-room-introduction01.avi">receiving a message</ulink>
				</para>
				<para>With this model, a complex behavior will be divided into many relatively simple, linked actors. To say it the other way round: The complex behavior will be provided by a network of relatively simple components which are communicating with each other via well defined interfaces.</para>
			</section>
			<section id="HierarchyinStructureandFSM">
				<title>Hierarchy in Structure and FSM</title>
				<para>ROOM provides two types of hierarchy. Behavioral hierarchy and structural hierarchy. Structural hierarchy means that actors can be nested to any level. Usually you will add more and more details to your application with each nesting level. That means you can focus yourself on any level of abstraction with always the same element, the actor. Structural hierarchy provides a power full mechanism to divide your problem in smaller pieces, so that you can focus the level of abstraction you want to work on. </para>
				<para>The actors behavior will be described with a state machine. The states itself may contain sub states. This is also a possibility to focus on an abstraction level. Take the simple FSM from the blinky actor from the blinky tutorial:    </para>
				<para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images\020-Blinky15.png"/>
						</imageobject>
					</mediaobject>
				</para>
				<para>From an abstract point of view there is a state &#8222;blinking”. But a simple LED is not able to blink autonomously. Therefore you have to add more details to your model to make a LED blinking, but for the current work it is not of interest how blinking is realized. This will be done in the next lower level of the hierarchy. </para>
				<para>With this very simple example you can easily imagine how power full this mechanisms is.</para>
				<para>The hierarchical FSM provides a rich tool box to describe real world problems. (see &#8222;room concepts”).</para>
			</section>
			<section id="RuntoCompletion">
				<title>Run to Completion</title>
				<para>&#8222;Run to completion” (RTC) is a very central concept of ROOM. It enables the developer to concentrate on the functional aspects of the system. The developer must not take care about concurrency issues all the time. This job is concentrated to the system designer in a very flexible way.
					What does &#8222;run to completion” mean:
					RTC means that an actor, which is processing a message, can not be receive the next message as long as the processing of the current message has not been finished. Receiving of the next message will be queued from the underlying run time system.</para>
				<para>Note: It is very important not to confuse run to completion and preemption. Run to completion means that an actor will finish the processing of a message before he can receive a new one (regardless of its priority). That does not mean that an actor cannot be preempted from an higher prior thread of control. Even a message from this higher prior thread of control will be queued till the current processing has been finished. </para>
				<para>With this mechanism all actor internal attributes and data structures are protected. Due to the fact that multiple actors share one thread of control, all objects are protected which are accessed from one thread of control but multiple actors. This provides the possibility to decompose complex functionality to several actors without the risk to produce access violations.</para>
			</section>
			<section id="Layering">
				<title>Layering</title>
			</section>
		</section>
		<section id="Benefits">
			<title>Benefits</title>
		</section>
		<section id="ExecutionModels">
			<title>Execution Models</title>
			<section id="LogicalMachine">
				<title>Logical Machine</title>
				<itemizedlist>
					<listitem>
						<para>run to completion</para>
					</listitem>
				</itemizedlist>
			</section>
			<section id="QueueBasedExecutionModel">
				<title>Queue Based Execution Model</title>
			</section>
			<section id="PolledExecutionModel">
				<title>Polled Execution Model
					not implemented yet</title>
			</section>
			<section id="HybridExecutionModel">
				<title>Hybrid Execution Model
					not implemented yet</title>
				<para>port, protocol, actor, interface, asynchronous communication
					hierarchical FSM, hierarchical structure</para>
				<para>run to completion</para>
			</section>
		</section>
	</chapter>
	<chapter id="TutorialHelloWorld">
		<title>Tutorial HelloWorld</title>
		<section id="Scope">
			<title>Scope</title>
			<para>In this tutorial you will build your first very simple eTrice model. The goal is to learn the work flow of eTrice and to understand a few basic features of ROOM. You will perform the following steps:</para>
			<orderedlist>
				<listitem>
					<para>create a new model from scratch</para>
				</listitem>
				<listitem>
					<para>add a very simple state machine to an actor</para>
				</listitem>
				<listitem>
					<para>generate the source code</para>
				</listitem>
				<listitem>
					<para>run the model</para>
				</listitem>
				<listitem>
					<para>open the message sequence chart</para>
				</listitem>
			</orderedlist>
			<para>
				<ulink url="images\015-HelloWorld01.avi">video</ulink>
			</para>
		</section>
		<section id="Createanewmodelfromscratch">
			<title>Create a new model from scratch</title>
			<para>The easiest way to create a new eTrice Project is to use the eclipse project wizard. From the eclipse file menu select 
				<citation>File-&gt;New-&gt;Project</citation> and create a new eTrice project and name it 
				<citation>HelloWorld</citation>
			</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/015-HelloWorld10.PNG"/>
					</imageobject>
				</mediaobject>
			</para>
			<para>The wizard creates everything that is needed to create, build and run a eTrice model. The resulting project should look like this:</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/015-HelloWorld11.PNG"/>
					</imageobject>
				</mediaobject>
			</para>
			<para>Within the model directory the model file 
				<citation>HelloWorld.room</citation> was created. Open the 
				<citation>HelloWorld.room</citation> file and position the cursor at the very beginning of the file. Open the content assist with Ctrl+Space and select 
				<citation>model skeleton</citation>.
			</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/015-HelloWorld12.PNG"/>
					</imageobject>
				</mediaobject>   
			</para>
			<para>Edit the template variables and remove the artefacts from the wizard. </para>
			<para>The resulting model code should look like this:</para>
			<literallayout><code>RoomModel HelloWorld {

	LogicalSystem System_HelloWorld {
		SubSystemRef subsystem : SubSystem_HelloWorld
	}

	SubSystemClass SubSystem_HelloWorld {
		ActorRef application : HelloWorldTop
	}

	ActorClass HelloWorldTop {
	}
} 
</code></literallayout>
			<blockquote>
				<para></para>
			</blockquote>
			<para>The goal of eTrice is to describe distributed systems on a logical level. In the current version not all elements will be supported. But as prerequisite for further versions the following elements are mandatory for an eTrice model:</para>
			<itemizedlist>
				<listitem>
					<para>the 
						<citation>LogicalSystem</citation> 
					</para>
				</listitem>
				<listitem>
					<para>at least one 
						<citation>SubSystemClass</citation>
					</para>
				</listitem>
				<listitem>
					<para>at least one 
						<citation>ActorClass</citation>
					</para>
				</listitem>
			</itemizedlist>
			<para>The 
				<citation>LogicalSystem</citation> represents the complete distributed system and contains at least one 
				<citation>SubSystemRef</citation>. The 
				<citation>SubSystemClass</citation> represents an address space and contains at least one 
				<citation>ActorRef</citation>. The 
				<citation>ActorClass</citation> is the building block of which an application will be built of. It is in general a good idea to define a top level actor that can be used as reference within the subsystem.
			</para>
			<para>The outline view of the textual ROOM editor shows the main modeling elements in an easy to navigate tree.</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/015-HelloWorld02.PNG"/>
					</imageobject>
				</mediaobject>
			</para>
		</section>
		<section id="Createastatemachine">
			<title>Create a state machine</title>
			<para>We will implement the Hello World code on the initial transition of the 
				<citation>HelloWorldTop</citation> actor. Therefore open the state machine editor by right clicking the 
				<citation>HelloWorldTop</citation> actor in the outline view and select 
				<citation>Edit Behavior</citation>.
			</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/015-HelloWorld03.PNG"/>
					</imageobject>
				</mediaobject>
			</para>
			<para>The state machine editor will be opened. Drag and drop an 
				<citation>Initial Point</citation> from the tool box to the diagram into the top level state. Drag and drop a 
				<citation>State</citation> from the tool box to the diagram. Confirm the dialogue with 
				<citation>ok</citation>. Select the 
				<citation>Transition</citation> in the tool box and draw the transition from the 
				<citation>Initial Point</citation> to the State. Open the transition dialogue by double clicking the caption of the transition and fill in the action code.
			</para>
			<literallayout><code>System.out.println("Hello World !");
</code></literallayout>
			<para>The result should look like this:</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/015-HelloWorld04.PNG"/>
					</imageobject>
				</mediaobject>
			</para>
			<para>Save the diagram and inspect the model file. Note that the textual representation was created after saving the diagram.</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/015-HelloWorld05.PNG"/>
					</imageobject>
				</mediaobject>
			</para>
		</section>
		<section id="Buildandrunthemodel">
			<title>Build and run the model</title>
			<para>Now the model is finished and source code can be generated. The project wizard has created a workflow that is responsible to generate the source code. From 
				<citation>HelloWorld/src/workflow</citation> right click 
				<citation>HelloWorld.mwe2</citation> and run it as MWE2Workflow. All model files in the model directory will be generated.
			</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/015-HelloWorld06.PNG"/>
					</imageobject>
				</mediaobject>
			</para>
			<para>The code will be generated to the src-gen directory. The main function will be contained in 
				<citation>SubSystem_HelloWorldRunner.java</citation>. Select this file and run it as Java application.
			</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/015-HelloWorld07.PNG"/>
					</imageobject>
				</mediaobject>
			</para>
			<para>The Hello World application starts and the string will be printed on the console window. To stop the application the user must type 
				<citation>quit</citation> in the console window.
			</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/015-HelloWorld08.PNG"/>
					</imageobject>
				</mediaobject>
			</para>
		</section>
		<section id="OpentheMessageSequenceChart">
			<title>Open the Message Sequence Chart</title>
			<para>During runtime the application produced a MSC and wrote it to a file. Open /org.eclipse.etrice.doc.tutorials/tmp/log/SubSystem_HelloWorld_Async.seq using Trace2UML (it is open source and can be obtained from  http://trace2uml.tigris.org/). You should see something like this:</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/015-HelloWorld09.PNG"/>
					</imageobject>
				</mediaobject>
			</para>
		</section>
		<section id="Summary">
			<title>Summary</title>
			<para>Now you have generated your first eTrice model from scratch. You can switch between diagram editor and model (.room file) and you can see what will be generated during editing and saving the diagram files. 
				You should take a look at the generated source files to understand how the state machine is generated and the life cycle of the application. The next tutorials will deal with more complex hierarchies in structure and behavior.</para>
		</section>
	</chapter>
	<chapter id="TutorialBlinky">
		<title>Tutorial Blinky</title>
		<section id="Scope2">
			<title>Scope</title>
			<para>This tutorial describes how to use the 
				<citation>TimingService</citation>, how to combine a generated model with manual code and how to model a hierarchical state machine. The idea of the tutorial is to switch a LED on and off. The behavior of the LED should be: blinking in a one second interval for 5 seconds, stop blinking for 5 seconds, blinking, stop,...  
				For this exercise we will use a little GUI class that will be used in more sophisticated tutorials too. The GUI simulates a pedestrian traffic crossing. For now, just a simple LED simulation will be used from the GUI. 
			</para>
			<para>To use the GUI please copy the package 
				<citation>de.protos.PedLightGUI</citation> to your 
				<citation>src</citation> directory. The package contains four java classes which implement a small window with a 3-light traffic light which simulates the signals for the car traffic and a 2-light traffic light which simulates the pedestrian signals.
			</para>
			<para>The GUI looks like this:</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/020-Blinky08.PNG"/>
					</imageobject>
				</mediaobject>
			</para>
			<para>Within this tutorial we just will toggle the yellow light.</para>
			<para>You will perform the following steps:</para>
			<orderedlist>
				<listitem>
					<para>create a new model from scratch</para>
				</listitem>
				<listitem>
					<para>define a protocol</para>
				</listitem>
				<listitem>
					<para>create an actor structure</para>
				</listitem>
				<listitem>
					<para>create a hierarchical state machine</para>
				</listitem>
				<listitem>
					<para>use the predefined 
						<citation>TimingService</citation>
					</para>
				</listitem>
				<listitem>
					<para>combine manual code with generated code</para>
				</listitem>
				<listitem>
					<para>build and run the model</para>
				</listitem>
				<listitem>
					<para>open the message sequence chart</para>
				</listitem>
			</orderedlist>
		</section>
		<section id="Createanewmodelfromscratch2">
			<title>Create a new model from scratch</title>
			<para>Remember exercise 
				<citation>HelloWorld</citation>.
				Create a new eTrice project and name it 
				<citation>Blinky</citation>
				Open the 
				<citation>Blinky.room</citation> file and copy the following code into the file or use content assist to create the model.
			</para>
			<literallayout><code>RoomModel Blinky {

	LogicalSystem System_Blinky {
		SubSystemRef subsystem : SubSystem_Blinky
	}

	SubSystemClass SubSystem_Blinky {
		ActorRef application : BlinkyTop
	}

	ActorClass BlinkyTop {
	}
}
</code></literallayout>
			<blockquote>
				<para></para>
			</blockquote>
		</section>
		<section id="Addtwoadditionalactorclasses">
			<title>Add two additional actor classes</title>
			<para>Position the cursor outside any class definition and right click the mouse within the editor window. From the context menu select 
				<citation>Content Assist</citation>  
			</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/020-Blinky02.png"/>
					</imageobject>
				</mediaobject>
			</para>
			<para>Select 
				<citation>ActorClass – actor class skeleton</citation> and name it 
				<citation>Blinky</citation>.
			</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/020-Blinky01.PNG"/>
					</imageobject>
				</mediaobject> 
			</para>
			<para>Repeat the described procedure and name the new actor 
				<citation>BlinkyController</citation>.
			</para>
			<para>Save the model and visit the outline view.</para>
		</section>
		<section id="Createanewprotocol">
			<title>Create a new protocol</title>
			<para>With the help of 
				<citation>Content Assist</citation> create a 
				<citation>ProtocolClass</citation> and name it 
				<citation>BlinkyControlProtocol</citation>.
				Inside the brackets use the 
				<citation>Content Assist</citation> (CTRL+Space) to create two incoming messages called 
				<citation>start</citation> and 
				<citation>stop</citation>.
			</para>
			<para>The resulting code should look like this:</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/020-Blinky03.PNG"/>
					</imageobject>
				</mediaobject> 
			</para>
			<para>With Ctrl-Shift+F or selecting 
				<citation>Format</citation> from the context menu you can format the text. Note that all elements are displayed in the outline view.
			</para>
		</section>
		<section id="ImporttheTimingService">
			<title>Import the Timing Service</title>
			<para>Switching on and off the LED is timing controlled. Therefore a timing service is needed. To import the timing service in the outline view right click to 
				<citation>SubSystem_Blinky</citation>. Select 
				<citation>Edit Structure</citation>. Drag and Drop an 
				<citation>ActorRef</citation> to the 
				<citation>SubSystem_Blinky</citation> and name it 
				<citation>application</citation>. From the actor class drop down list select 
				<citation>BlinkyTop</citation>. Do the same clicks for the timing service. Name it 
				<citation>timingService</citation> and from the drop down list select 
				<citation>room.basic.service.timing.ATimingService</citation>. Draw a 
				<citation>LayerConnection</citation> from 
				<citation>application</citation> to each service provision point (SPP) of the 
				<citation>timingService</citation>. The resulting structure should look like this:
			</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/020-Blinky06.PNG"/>
					</imageobject>
				</mediaobject> 
			</para>
			<para>The current version of eTrice does not provide a graphical element for a service access point (SAP). Therefore the SAPs to access the timing service must be added in the .room file. Open the 
				<citation>Blinky.room</citation> file and navigate to the 
				<citation>Blinky</citation> actor. Add the following line to the structure of the actor:
			</para>
			<literallayout><code>SAP timer: room.basic.service.timing.PTimeout
</code></literallayout>
			<para>Do the same thing for 
				<citation>BlinkyController</citation>.
			</para>
			<para>The resulting code should look like this:</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/020-Blinky07.PNG"/>
					</imageobject>
				</mediaobject>
			</para>
		</section>
		<section id="Finishthemodelstructure">
			<title>Finish the model structure</title>
			<para>From the outline view right click to 
				<citation>Blinky</citation> and select 
				<citation>Edit Structure</citation>. Drag and Drop an 
				<citation>Interface Port</citation> to the boarder of the 
				<citation>Blinky</citation> actor. Note that an interface port is not possible inside the the actor. Name the port 
				<citation>ControlPort</citation> and select 
				<citation>BlinkyControlProtocol</citation> from the drop down list. Uncheck 
				<citation>Conjugated</citation> and 
				<citation>Is Relay Port</citation>. Klick 
				<citation>ok</citation>. The resulting structure should look like this:
			</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/020-Blinky04.PNG"/>
					</imageobject>
				</mediaobject>
			</para>
			<para>Repeat the above steps for the 
				<citation>BlinkyController</citation>. Make the port 
				<citation>Conjugated</citation>
			</para>
			<para>Keep in mind that the protocol defines 
				<citation>start</citation> and 
				<citation>stop</citation> as incoming messages. 
				<citation>Blinky</citation> receives this messages and therefore 
				<citation>Blinky</citation>'s 
				<citation>ControlPort</citation> must be a regular port and 
				<citation>BlinkyController</citation>'s 
				<citation>ControlPort</citation> must be a conjugated port.
			</para>
			<para>From the outline view right click 
				<citation>BlinkyTop</citation> and select 
				<citation>Edit Structure</citation>.
			</para>
			<para>Drag and Drop an 
				<citation>ActorRef</citation> inside the 
				<citation>BlinkyTop</citation> actor. Name it 
				<citation>blinky</citation>. From the actor class drop down list select 
				<citation>Blinky</citation>. Do the same for 
				<citation>controller</citation>. Connect the ports via the binding tool. The resulting structure should look like this:
			</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/020-Blinky05.PNG"/>
					</imageobject>
				</mediaobject>
			</para>
		</section>
		<section id="ImplementtheBehavior">
			<title>Implement the Behavior</title>
			<para>The application should switch on and off the LED for 5 seconds in a 1 second interval, than stop blinking for 5 seconds and start again. To implement this behavior we will implement two FSMs. One for the 1 second interval and one for the 5 second interval. The 1 second blinking should be implemented in 
				<citation>Blinky</citation>. The 5 second interval should be implemented in 
				<citation>BlinkyController</citation>. First implement the Controller.
			</para>
			<para>Right click to 
				<citation>BlinkyController</citation> and select 
				<citation>Edit Behavior</citation>.
				Drag and Drop the 
				<citation>Initial Point</citation> and two 
				<citation>States</citation> into the top state. Name the states 
				<citation>on</citation> and 
				<citation>off</citation>. 
				Use the 
				<citation>Transition</citation> tool to draw transitions from 
				<citation>init</citation> to 
				<citation>off</citation> from 
				<citation>on</citation> to 
				<citation>off</citation> and from 
				<citation>off</citation> to 
				<citation>on</citation>.
			</para>
			<para>Open the transition dialog by double click the arrow to specify the trigger event and the action code of each transition. Note that the initial transition does not have a trigger event.</para>
			<para>The dialog should look like this:</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/020-Blinky09.PNG"/>
					</imageobject>
				</mediaobject> 
			</para>
			<para>The defined ports will be generated as a member attribute of the actor class from type of the attached protocol. So, to send e message you must state 
				<citation>port.message(param);</citation>. In this example 
				<citation>ControlPort.start()</citation> sends the 
				<citation>start</citation> message via the 
				<citation>ControlPort</citation> to the outside world. Assuming that 
				<citation>Blinky</citation> is connected to this port, the message will start the one second blinking FSM. It is the same thing with the 
				<citation>timer</citation>. The SAP is also a port and follows the same rules. So it is clear that 
				<citation>timer.Start(5000);</citation> will send the 
				<citation>Start</citation> message to the timing service. The timing service will send a 
				<citation>timeoutTick</citation> message back after 5000ms.
			</para>
			<para>Within each transition the timer will be restarted and the appropriate message will be sent via the 
				<citation>ControlPort</citation>. 
			</para>
			<para>The resulting state machine should look like this:</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/020-Blinky10.PNG"/>
					</imageobject>
				</mediaobject>
			</para>
			<para>Save the diagram and inspect the 
				<citation>Blinky.room</citation> file. The 
				<citation>BlinkyController</citation> should look like this:
			</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/020-Blinky11.PNG"/>
					</imageobject>
				</mediaobject> 
			</para>
			<para>Now we will implement 
				<citation>Blinky</citation>. Due to the fact that 
				<citation>Blinky</citation> interacts with the GUI class a view things must to be done in the model file.
			</para>
			<para>Double click 
				<citation>Blinky</citation> in the outline view to navigate to 
				<citation>Blinky</citation> within the model file.
				Add the following code:
			</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/020-Blinky12.PNG"/>
					</imageobject>
				</mediaobject> 
			</para>
			<para>
				<citation>usercode1</citation> will be generated at the beginning of the file, outside the class definition. 
				<citation>usercode2</citation> will be generated within the class definition. The code imports the GUI class and instantiates the window class. Attributes for the carLights and pedLights will be declared to easily access the lights in the state machine.
				The Operation 
				<citation>destroyUser()</citation> is a predefined operation that will be called during shutdown of the application. Within this operation, cleanup of manual coded classes can be done.
			</para>
			<para>Now design the FSM of 
				<citation>Blinky</citation>. Open the behavior diagram of 
				<citation>Blinky</citation> by right clicking the 
				<citation>Blinky</citation> actor in the outline view. Create two states named 
				<citation>blinking</citation> and 
				<citation>off</citation>. Right click to 
				<citation>blinking</citation> and create a subgraph.
			</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/020-Blinky13.PNG"/>
					</imageobject>
				</mediaobject>
			</para>
			<para>Create the following state machine. The trigger events between 
				<citation>on</citation> and 
				<citation>off</citation> are the 
				<citation>timeoutTick</citation> from the 
				<citation>timer</citation> port. 
			</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/020-Blinky14.PNG"/>
					</imageobject>
				</mediaobject>
			</para>
			<para>Create entry code for both states by right clicking the state and select 
				<citation>Edit State...</citation>
			</para>
			<para>Entry code of 
				<citation>on</citation> is:
			</para>
			<literallayout><code>timer.Start(1000);
carLights.setState(TrafficLight3.YELLOW); 
</code></literallayout>
			<blockquote>
				<para></para>
			</blockquote>
			<para>Entry code  of 
				<citation>off</citation> is:
			</para>
			<literallayout><code>timer.Start(1000);
carLights.setState(TrafficLight3.OFF);
</code></literallayout>
			<blockquote>
				<para></para>
			</blockquote>
			<para>Navigate to the Top level state by double clicking the 
				<citation>/blinking</citation> state. Create the following state machine:
			</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/020-Blinky15.PNG"/>
					</imageobject>
				</mediaobject>
			</para>
			<para>The trigger event from 
				<citation>off</citation> to 
				<citation>blinking</citation> is the 
				<citation>start</citation> event from the 
				<citation>ControlPort</citation>.The trigger event from 
				<citation>blinking</citation> to 
				<citation>off</citation> is the 
				<citation>stop</citation> event from the 
				<citation>ControlPort</citation>.
				Note: The transition from 
				<citation>blinking</citation> to 
				<citation>off</citation> is a so called group transition. This is a outgoing transition from a super state (state with sub states) without specifying the concrete leave state (state without sub states). An incoming transition to a super state is called history transition.   
			</para>
			<para>Action code of the init transition is:</para>
			<literallayout><code>carLights = light.getCarLights();
pedLights = light.getPedLights();
carLights.setState(TrafficLight3.OFF);
pedLights.setState(TrafficLight2.OFF);
</code></literallayout>
			<blockquote>
				<para></para>
			</blockquote>
			<para>Action code from 
				<citation>blinking</citation> to 
				<citation>off</citation> is:
			</para>
			<literallayout><code>timer.Kill();
carLights.setState(TrafficLight3.OFF); 
</code></literallayout>
			<blockquote>
				<para></para>
			</blockquote>
			<para>The model is complete now. You can run and debug the model as described in getting started. Have fun.</para>
			<para>The complete model can be found in /org.eclipse.etrice.tutorials/model/Blinky.</para>
		</section>
		<section id="Summary2">
			<title>Summary</title>
			<para>Run the model and take a look at the generated MSCs. Inspect the generated code to understand the runtime model of eTrice. Within this tutorial you have learned how to create a hierarchical FSM with group transitions and history transitions and you have used entry code. You are now familiar with the basic features of eTrice. The further tutorials will take this knowledge as a precondition.</para>
		</section>
	</chapter>
	<chapter id="TutorialSendingData">
		<title>Tutorial Sending Data</title>
		<section id="Scope3">
			<title>Scope</title>
			<para>This tutorial shows how data will be sent in a eTrice model. Within the example you will create two actors (MrPing and MrPong). MrPong will simply loop back every data it received.
				MrPing will send data and verify the result.   </para>
			<para>You will perform the following steps:</para>
			<orderedlist>
				<listitem>
					<para>create a new model from scratch</para>
				</listitem>
				<listitem>
					<para>create a data class</para>
				</listitem>
				<listitem>
					<para>define a protocol with attached data</para>
				</listitem>
				<listitem>
					<para>create an actor structure</para>
				</listitem>
				<listitem>
					<para>create two simple state machines</para>
				</listitem>
				<listitem>
					<para>build and run the model</para>
				</listitem>
			</orderedlist>
		</section>
		<section id="Createanewmodelfromscratch3">
			<title>Create a new model from scratch</title>
			<para>Remember exercise 
				<citation>HelloWorld</citation>.
				Create a new eTrice project and name it 
				<citation>SendingData</citation>
				Open the 
				<citation>SendingData.room</citation> file and copy the following code into the file or use content assist to create the model.
			</para>
			<literallayout><code>RoomModel SendingData {
		LogicalSystem SendingData_LogSystem {
			SubSystemRef SendingDataAppl:SendingData_SubSystem 
		}
		SubSystemClass SendingData_SubSystem {
			ActorRef SendigDataTopRef:SendingDataTop 
		}
		ActorClass SendingDataTop {
		}
	}
</code></literallayout>
			<blockquote>
				<para></para>
			</blockquote>
		</section>
		<section id="Addadataclass">
			<title>Add a data class</title>
			<para>Position the cursor outside any class definition and right click the mouse within the editor window. From the context menu select 
				<citation>Content Assist</citation> (or Ctrl+Space).  
			</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/025-SendingData01.png"/>
					</imageobject>
				</mediaobject>
			</para>
			<para>Select 
				<citation>DataClass – data class skeleton</citation> and name it 
				<citation>DemoData</citation>.
				Remove the operations and ass the following Attributes:
			</para>
			<literallayout><code>	DataClass DemoData {
		Attribute int32Val: int32 = "4711"
		Attribute int8Array [ 10 ]: int8 = "{1,2,3,4,5,6,7,8,9,10}"
		Attribute float64Val: float64 = "0.0"
		Attribute stringVal: string = "\"empty\""
	}
</code></literallayout>
			<blockquote>
				<para></para>
			</blockquote>
			<para>Save the model and visit the outline view.
				Note that the outline view contains all data elements as defined in the model. </para>
		</section>
		<section id="Createanewprotocol2">
			<title>Create a new protocol</title>
			<para>With the help of 
				<citation>Content Assist</citation> create a 
				<citation>ProtocolClass</citation> and name it 
				<citation>PingPongProtocol</citation>. Create the following messages:
			</para>
			<literallayout><code>ProtocolClass PingPongProtocol {
					incoming {
						Message ping(data: DemoData)
						Message pingSimple(data:int32)
					}
					outgoing {
						Message pong(data: DemoData)
						Message pongSimple(data:int32)
					}
				}		
</code></literallayout>
			<blockquote>
				<para></para>
			</blockquote>
		</section>
		<section id="CreateMrPingandMrPongActors">
			<title>Create MrPing and MrPong Actors</title>
			<para>With the help of 
				<citation>Content Assist</citation> create two new actor classes and name them 
				<citation>MrPing</citation> and 
				<citation>MrPong</citation>. The resulting model should look like this:
			</para>
			<literallayout><code>RoomModel SendingData {

	LogicalSystem SendingData_LogSystem {
		SubSystemRef SendingDataAppl: SendingData_SubSystem
	}

	SubSystemClass SendingData_SubSystem {
		ActorRef SendigDataTopRef: SendingDataTop
	}

	ActorClass SendingDataTop { }

	DataClass DemoData {
		Attribute int32Val: int32 = "4711"
		Attribute int8Array [ 10 ]: int8 = "{1,2,3,4,5,6,7,8,9,10}"
		Attribute float64Val: float64 = "0.0"
		Attribute stringVal: string = "\"empty\""
	}

	ProtocolClass PingPongProtocol {
		incoming {
			Message ping(data: DemoData)
			Message pingSimple(data: int32)
		}
		outgoing {
			Message pong(data: DemoData)
			Message pongSimple(data: int32)
		}
	}

	ActorClass MrPing {
		Interface { }
		Structure { }
		Behavior { }
	}

	ActorClass MrPong {
		Interface { }
		Structure { }
		Behavior { }
	}
} 

</code></literallayout>
			<blockquote>
				<para></para>
			</blockquote>
			<para>The outline view should look like this:</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/025-SendingData03.png"/>
					</imageobject>
				</mediaobject>
			</para>
		</section>
		<section id="DefineActorStructureandBehavior">
			<title>Define Actor Structure and Behavior</title>
			<para>Save the model and visit the outline view. Within the outline view, right click on the 
				<citation>MrPong</citation> actor and select 
				<citation>Edit Structure</citation>. Select an 
				<citation>Interface Port</citation> from the toolbox and add it to MrPong. Name the Port 
				<citation>PingPongPort</citation> and select the 
				<citation>PingPongProtocol</citation>
			</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/025-SendingData02.png"/>
					</imageobject>
				</mediaobject>
			</para>
			<para>Do the same with MrPing but mark the port as 
				<citation>conjugated</citation>
			</para>
			<section id="DefineMrPongsbehavior">
				<title>Define MrPongs behavior</title>
				<para>Within the outline view, right click MrPong and select 
					<citation>Edit Behavior</citation>. Create the following state machine:
				</para>
				<para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/025-SendingData04.png"/>
						</imageobject>
					</mediaobject>
				</para>
				<para>The transition dialogues should look like this:
					For 
					<citation>ping</citation>:
				</para>
				<para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/025-SendingData05.png"/>
						</imageobject>
					</mediaobject>
				</para>
				<para>For 
					<citation>pingSimple</citation>:
				</para>
				<para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/025-SendingData06.png"/>
						</imageobject>
					</mediaobject>
				</para>
			</section>
			<section id="DefineMrPingbehavior">
				<title>Define MrPing behavior</title>
				<para>Within the outline view double click MrPing. Navigate the cursor to the behavior of MrPing. With the help of content assist create a new operation.</para>
				<para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/025-SendingData07.png"/>
						</imageobject>
					</mediaobject>
				</para>
				<para>Name the operation 
					<citation>printData</citation> and define the DemoData as a parameter.
				</para>
				<para>Fill in the following code:</para>
				<literallayout><code>Operation printData(d: DemoData) : void {
			"System.out.printf(\"d.int32Val: %d\\n\",d.int32Val);"
			"System.out.printf(\"d.float64Val: %f\\n\",d.float64Val);"
			"System.out.printf(\"d.int8Array: \");"
			"for(int i = 0; i&lt;d.int8Array.length; i++) {"
			"System.out.printf(\"%d \",d.int8Array[i]);}"
			"System.out.printf(\"\\nd.stringVal: %s\\n\",d.stringVal);"
		}
</code></literallayout>
				<blockquote>
					<para></para>
				</blockquote>
				<para>For MrPing create the following state machine:</para>
				<para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/025-SendingData08.png"/>
						</imageobject>
					</mediaobject>
				</para>
				<para>The transition dialogues should look like this:</para>
				<para>For 
					<citation>init</citation>:
				</para>
				<para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/025-SendingData09.png"/>
						</imageobject>
					</mediaobject>
				</para>
				<para>For 
					<citation>wait1</citation>:
				</para>
				<para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/025-SendingData10.png"/>
						</imageobject>
					</mediaobject>
				</para>
				<para>For 
					<citation>next</citation>:
				</para>
				<para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/025-SendingData11.png"/>
						</imageobject>
					</mediaobject>
				</para>
				<para>For 
					<citation>wait2</citation>:
				</para>
				<para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/025-SendingData12.png"/>
						</imageobject>
					</mediaobject>
				</para>
			</section>
		</section>
		<section id="Definethetoplevel">
			<title>Define the top level</title>
			<para>Open the Structure from SendingDataTop and add MrPing and MrPong as a reference. Connect the ports.</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/025-SendingData13.png"/>
					</imageobject>
				</mediaobject>
			</para>
			<para>The model is finished now and can be found in /org.eclipse.etrice.tutorials/model/SendingData.</para>
		</section>
		<section id="Generateandrunthemodel">
			<title>Generate and run the model</title>
			<para>With the MWe2 workflow generate the code and run the model. 
				The output should look like this:</para>
			<blockquote>
				<para>
					type &#8218;quit’ to exit
					/SendingData_SubSystem/SendigDataTopRef/ref0 -&gt; waitForPongSimple
					/SendingData_SubSystem/SendigDataTopRef/ref1 -&gt; looping
					/SendingData_SubSystem/SendigDataTopRef/ref1 -&gt; looping
					data: 1
					/SendingData_SubSystem/SendigDataTopRef/ref0 -&gt; waitForPongSimple
					/SendingData_SubSystem/SendigDataTopRef/ref1 -&gt; looping
					data: 2
					/SendingData_SubSystem/SendigDataTopRef/ref0 -&gt; waitForPongSimple
					/SendingData_SubSystem/SendigDataTopRef/ref1 -&gt; looping
					data: 3
					/SendingData_SubSystem/SendigDataTopRef/ref0 -&gt; waitForPongSimple
					/SendingData_SubSystem/SendigDataTopRef/ref1 -&gt; looping
					data: 4
					/SendingData_SubSystem/SendigDataTopRef/ref0 -&gt; waitForPongSimple
					/SendingData_SubSystem/SendigDataTopRef/ref1 -&gt; looping
					data: 5
					/SendingData_SubSystem/SendigDataTopRef/ref0 -&gt; waitForPongSimple
					/SendingData_SubSystem/SendigDataTopRef/ref1 -&gt; looping
					data: 6
					/SendingData_SubSystem/SendigDataTopRef/ref0 -&gt; waitForPongSimple
					/SendingData_SubSystem/SendigDataTopRef/ref1 -&gt; looping
					data: 7
					/SendingData_SubSystem/SendigDataTopRef/ref0 -&gt; waitForPongSimple
					/SendingData_SubSystem/SendigDataTopRef/ref1 -&gt; looping
					data: 8
					/SendingData_SubSystem/SendigDataTopRef/ref0 -&gt; waitForPongSimple
					/SendingData_SubSystem/SendigDataTopRef/ref1 -&gt; looping
					data: 9
					/SendingData_SubSystem/SendigDataTopRef/ref0 -&gt; waitForPongSimple
					/SendingData_SubSystem/SendigDataTopRef/ref1 -&gt; looping
					data: 10
					/SendingData_SubSystem/SendigDataTopRef/ref0 -&gt; waitForPong
					/SendingData_SubSystem/SendigDataTopRef/ref1 -&gt; looping
					/SendingData_SubSystem/SendigDataTopRef/ref1 -&gt; looping
					d.int32Val: 4711
					d.float64Val: 0,000000
					d.int8Array: 1 2 3 4 5 6 7 8 9 10 
					d.stringVal: empty
					/SendingData_SubSystem/SendigDataTopRef/ref0 -&gt; waitForPong
					d.int32Val: 815
					d.float64Val: 3,141234
					d.int8Array: 100 101 102 103 104 105 106 107 108 109 
					d.stringVal: some contents
					/SendingData_SubSystem/SendigDataTopRef/ref0 -&gt; waitForPong
					quit
					echo: quit</para>
			</blockquote>
			<blockquote>
				<para></para>
			</blockquote>
		</section>
		<section id="Summary3">
			<title>Summary</title>
			<para>Within the first loop an integer value will be incremented from 
				<citation>MrPong</citation> and sent back to 
				<citation>MrPing</citation>. As long as the guard is true 
				<citation>MrPing</citation> sends back the value.
			</para>
			<para>Within the 
				<citation>next</citation> transition, 
				<citation>MrPing</citation> creates a data class and sends the default values. Than 
				<citation>MrPing</citation> changes the values and sends the class again. At this point you should note that during the send operation, a copy of the data class will be created and sent. Otherwise it would not be possible to send the same object two times, even more it would not be possible to send a stack object at all.
				However, for performance reasons some applications requires sending data by value. In this case the user is responsible for the life cycle of the object. In Java the VM takes care about the life cycle of an object. This is not the case for C/C++. Consider that a object which is created within a transition of a state machine will be destroyed when the transition is finished. The receiving FSM would receive an invalid reference. Therefore care must be taken by sending references.      
			</para>
			<para>For sending data by reference you simply have to add the keyword 
				<citation>ref</citation> to the protocol definition.
			</para>
			<literallayout><code>Message ping(data: DemoData ref)
</code></literallayout>
		</section>
	</chapter>
	<chapter id="TutorialPedestrianLights">
		<title>Tutorial Pedestrian Lights</title>
		<section id="Scope4">
			<title>Scope</title>
			<para>The scope of this tutorial is to demonstrate how to receive model messages from outside the model. Calling methods which are not part of the model is simple and you have already done this within the blinky tutorial (this is the other way round: model =&gt; external code). Receiving events from outside the model is a very common problem and a very frequently asked question. Therefore this tutorial shows how an external event (outside the model) can be received from the model.</para>
			<para>This tutorial is not like hello world or blinky. Being familiar with the basic tool features is mandatory for this tutorial. The goal is to understand the mechanism not to learn the tool features.</para>
			<para>The idea behind the exercise is, to control a Pedestrian crossing light. We will use the same GUI as for the blinky tutorial but now we will use the 
				<citation>REQUEST</citation> button to start a FSM, which controls the traffic lights.
			</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/020-Blinky08.PNG"/>
					</imageobject>
				</mediaobject>
			</para>
			<para>The 
				<citation>REQUEST</citation> must lead to a model message which starts the activity of the lights.
			</para>
			<para>There are several possibilities to receive external events (e.g. TCP/UDP Socket, using OS messaging mechanism), but the easiest way is, to make a port usable from outside the model. To do that a few steps are necessary:</para>
			<orderedlist>
				<listitem>
					<para>specify the messages (within a protocol) which should be sent into the model</para>
				</listitem>
				<listitem>
					<para>model an actor with a port (which uses the specified protocol) and connect the port to the receiver </para>
				</listitem>
				<listitem>
					<para>the external code should know the port (import of the port class)</para>
				</listitem>
				<listitem>
					<para>the external code should provide a registration method, so that the actor is able to allow access to this port</para>
				</listitem>
				<listitem>
					<para>the port can be used from the external code</para>
				</listitem>
			</orderedlist>
		</section>
		<section id="Setupthemodel">
			<title>Setup the model</title>
			<itemizedlist>
				<listitem>
					<para>Use the 
						<citation>New Model Wizzard</citation> to create a new eTrice project and name it 
						<citation>PedLightsController</citation>.
					</para>
				</listitem>
				<listitem>
					<para>Copy the package 
						<citation>de.protos.PedLightGUI</citation> to your 
						<citation>src</citation> directory (see blinky tutorial).
					</para>
				</listitem>
				<listitem>
					<para>In PedestrianLightWndNoTcp.jav uncomment line 15 (import), 36, 122 (usage) and 132-134 (registration).</para>
				</listitem>
				<listitem>
					<para>Copy the model from /org.eclipse.etrice.tutorials/model/PedLightsController to your model file, or run the model directly in the tutorial directory:</para>
				</listitem>
				<listitem>
					<para>Arrange the Structure and the Statemachines to understand the model</para>
				</listitem>
			</itemizedlist>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/030-PedLights01.PNG"/>
					</imageobject>
				</mediaobject>
				The 
				<citation>GuiAdapter</citation> represents the interface to the external code. It registers its 
				<citation>ControlPort</citation> by the external code.
			</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/030-PedLights02.PNG"/>
					</imageobject>
				</mediaobject>
				Visit the initial transition to understand the registration. The actor handles the incoming messages as usual and controls the traffic lights as known from blinky. 
			</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/030-PedLights03.PNG"/>
					</imageobject>
				</mediaobject>
				The 
				<citation>Controller</citation> receives the 
				<citation>start</citation> message and controls the timing of the lights. Note that the 
				<citation>start</citation> message will be sent from the external code whenever the 
				<citation>REQUEST</citation> button is pressed.
			</para>
			<itemizedlist>
				<listitem>
					<para> Visit the model and take a closer look to the following elements:</para>
				</listitem>
			</itemizedlist>
			<orderedlist>
				<listitem>
					<para>PedControlProtocol =&gt; notice that the start message is defined as usual</para>
				</listitem>
				<listitem>
					<para>Initial transition of the 
						<citation>GuiAdapter</citation> =&gt; see the registration
					</para>
				</listitem>
				<listitem>
					<para>The 
						<citation>Controller</citation> =&gt; notice that the 
						<citation>Controller</citation> receives the external message (not the 
						<citation>GuiAdapter</citation>). The 
						<citation>GuiAdapter</citation> just provides its port and handles the incoming messages.
					</para>
				</listitem>
				<listitem>
					<para>Visit the hand written code =&gt; see the import statement of the protocol class and the usage of the port.</para>
				</listitem>
			</orderedlist>
			<itemizedlist>
				<listitem>
					<para>Generate and test the model</para>
				</listitem>
				<listitem>
					<para>Take a look at the generated MSC =&gt; notice that the start message will shown as if the 
						<citation>GuiAdapter</citation> had sent it.
					</para>
				</listitem>
			</itemizedlist>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/030-PedLights04.PNG"/>
					</imageobject>
				</mediaobject>
			</para>
		</section>
		<section id="Whydoesitworkandwhyisitsafe">
			<title>Why does it work and why is it safe?</title>
			<para>The tutorial shows that it is generally possible to use every port from outside the model as long as the port knows its peer. This is guaranteed by describing protocol and the complete structure (especially the bindings) within the model. 
				The only remaining question is: Why is it safe and does not violate the &#8222;run to completion” semantic. To answer this question, take a look at the 
				<citation>MessageService.java</citation> from the runtime environment. There you will find the receive method which puts each message into the queue. 
			</para>
			<literallayout><code>	@Override
	public synchronized void receive(Message msg) {
		if (msg!=null) {
			messageQueue.push(msg);
			notifyAll(); // wake up thread to compute message
		}
	}
</code></literallayout>
			<blockquote>
				<para></para>
			</blockquote>
			<para>This method is synchronized. That means, regardless who sends the message, the queue is secured. If we later on (e.g. for performance reasons in C/C++) distinguish between internal and external senders (same thread or not), care must be taken to use the external (secure) queue.</para>
		</section>
	</chapter>
	<chapter id="ROOMConcepts">
		<title>ROOM Concepts</title>
		<section id="MainConcepts">
			<title>Main Concepts</title>
			<section id="ActorClass">
				<title>ActorClass</title>
			</section>
			<section id="Port">
				<title>Port</title>
			</section>
			<section id="Protocol">
				<title>Protocol</title>
			</section>
		</section>
	</chapter>
</book>