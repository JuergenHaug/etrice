FeaturizerModel Markdown
//	HTMLHelpGenerator {
//		filePath "experimental-markdown"
//	}
	

Feature SynatxColoring
	description ''''''
	help '''
		## room
		
		```room
		import room.basic.types.* from "../../../org.eclipse.etrice.modellib.c/model/Types.room"
		
		ActorClass InternalEndPortExample {
			Structure {
				Port internalEndPort : PSimpleProtocol
				ActorRef actorRef1 : SimpleActorClass1
				
				// internalEndPort lives 'local' 
				// and thus needs a Binding to port of an ActorRef
				Binding internalEndPort and actorRef1.externalPort
			}
			Behavior {
				// send/receive messages from internalEndPorts
			}
		}
		
		ActorClass Receiver {
				Interface {
					Port sender: PingPongProtocol
				}
				Structure {
					external Port sender
					SAP timing : PTimer
				}
				Behavior {
					StateMachine {
						Transition init: initial -> WaitingForPing { }
						Transition tr0: WaitingForPing -> WaitingForAWhile {
							triggers {
								<ping: sender>
							}
						}
						Transition tr1: WaitingForAWhile -> SentPong {
							triggers {
								<timeout: timing>
							}
						}
						State WaitingForPing
						State SentPong {
							entry {
								"sender.pong();"
							}
						}
						State WaitingForAWhile {
							entry {
								"timing.startTimeout(1000);"
							}
						}
					}
				}
			}
		
		// eventdriven ProtocolClass (asynchronous message passing, bidirectional)
		eventdriven ProtocolClass ProtocolClassEvt {
			// ProtocolClass ProtocolClassEvt { // same like above because eventdriven is default 
			incoming {
				// incoming means incoming for a regular port and outging for a conjugated port
				Message message1() // message without data
				Message message2(data: int32) // message with simple data
				Message message3(data: DMessageData) // message with complex data (DataClass)
		
			}
			outgoing {
			// outgoing means outging for a regular port and incoming for a conjugated port
				Message message1(data: int32) // incoming and outgoing Messages can have the same name to enable symmetric protocols
			}
		}
		
		// DataClass for sending complex data via message
		DataClass DMessageData {
			Attribute SomeData: int16
			Attribute SomeMoreData: int32
		}
		```

		## etMap
		
		```etmap
		MappingModel PingPongMapping {
			import PingPong_Model.* from "PingPong.room"
			import GenericPhysicalModel.* from "GenericPhysical.etphys"
		
			Mapping LogSys -> PhysSys1 {
				SubSystemMapping subSystemRef -> nodeRef1 {
					ThreadMapping defaultThread -> PhysicalThread1
				}
			}
		
		}
		```
		
		## etPhys
		
		```etphys
		PhysicalModel GenericPhysicalModel {
			
			PhysicalSystem PhysSys1 {
				NodeRef nodeRef1 : NodeClass1
			}
			
			NodeClass NodeClass1 {
				runtime = RuntimeClass1
				priomin = -10
				priomax = 10
				
				DefaultThread PhysicalThread1 {
					execmode = mixed
					interval = 100ms
					prio = 0
					stacksize = 1024
					msgblocksize = 64
					msgpoolsize = 100
				}
			}
		
			RuntimeClass RuntimeClass1 {
				model = multiThreaded
			} 
			
		} 
		```

		## config
		
		```config
		/*******************************************************************************
		 * Copyright (c) 2012 protos software gmbh (http://www.protos.de).
		 * All rights reserved. This program and the accompanying materials
		 * are made available under the terms of the Eclipse Public License v1.0
		 * which accompanies this distribution, and is available at
		 * http://www.eclipse.org/legal/epl-v10.html
		 * 
		 * CONTRIBUTORS:
		 * 		Thomas Schuetz (initial contribution)
		 * 
		 *******************************************************************************/
		ConfigModel trafficlight.example.config {
			
			import TrafficLight_Model.* from "TrafficLight.room"
			
			ActorInstanceConfig LSTraffic/mainSS/application/pedestrianLight {
				Attr ipConfig{
					Attr IPAddr="localhost"
					Attr TcpPort=4443
				}
			}	
		}
		```
		
		<pre lang="no-highlight"><code> 
		```
		"no highlighting"  /* comment */
		// nop 
		```

		```no-highlight
		"no highlighting"  /* comment */
		// nop 
		```
		</code></pre>

		```
		"no highlighting"  /* comment */
		// nop 
		```
		
		```no-highlight
		"no highlighting"  /* comment */
		// nop 
		```
		
		## TODO

		Syntax highlighting for other languages like c:		

		```c
		void etMessageQueue_push(etMessageQueue* self, etMessage* msg){
			/* TODO: optimize queue for concurrent push / pop */
			ET_MSC_LOGGER_SYNC_ENTRY("etMessageQueue", "push")
			if (self->first == NULL) {
				/*no message in queue*/
				self->first = self->last = msg;
			}
			else {
				/*at least one message in queue*/
				self->last->next = msg;
				self->last = msg;
			}
			msg->next = NULL; /*TODO: optimization: this line could be removed if we assume that all messages are initialized*/
		
			if (++self->size > self->highWaterMark)
				self->highWaterMark++;
		
			ET_MSC_LOGGER_SYNC_EXIT
		}
		```
	'''
	stable
;

Feature MarkdownCheatsheet
	description ''''''
	help '''
		Taken from [https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)

		---

		This is intended as a quick reference and showcase. For more complete info, see [John Gruber's original spec](http://daringfireball.net/projects/markdown/) and the [Github-flavored Markdown info page](http://github.github.com/github-flavored-markdown/).

		Note that there is also a [Cheatsheet specific to Markdown Here](./Markdown-Here-Cheatsheet) if that's what you're looking for. You can also check out [more Markdown tools](./Other-Markdown-Tools).
		
		##### Table of Contents  
		[Headers](#headers)  
		[Emphasis](#emphasis)  
		[Lists](#lists)  
		[Links](#links)  
		[Images](#images)  
		[Code and Syntax Highlighting](#code)  
		[Tables](#tables)  
		[Blockquotes](#blockquotes)  
		[Inline HTML](#html)  
		[Horizontal Rule](#hr)  
		[Line Breaks](#lines)  
		[Youtube videos](#videos)  
		
		<a name="headers"/>
		## Headers
		
		```no-highlight
		# H1
		## H2
		### H3
		#### H4
		##### H5
		###### H6
		
		Alternatively, for H1 and H2, an underline-ish style:
		
		Alt-H1
		======
		
		Alt-H2
		------
		```
		
		# H1
		## H2
		### H3
		#### H4
		##### H5
		###### H6
		
		Alternatively, for H1 and H2, an underline-ish style:
		
		Alt-H1
		======
		
		Alt-H2
		------
		
		<a name="emphasis"/>
		## Emphasis
		
		```no-highlight
		Emphasis, aka italics, with *asterisks* or _underscores_.
		
		Strong emphasis, aka bold, with **asterisks** or __underscores__.
		
		Combined emphasis with **asterisks and _underscores_**.
		
		Strikethrough uses two tildes. ~~Scratch this.~~
		```
		
		Emphasis, aka italics, with *asterisks* or _underscores_.
		
		Strong emphasis, aka bold, with **asterisks** or __underscores__.
		
		Combined emphasis with **asterisks and _underscores_**.
		
		Strikethrough uses two tildes. ~~Scratch this.~~
		
		
		<a name="lists"/>
		## Lists
		
		(In this example, leading and trailing spaces are shown with with dots: ⋅)
		
		```no-highlight
		1. First ordered list item
		2. Another item
		  * Unordered sub-list. 
		1. Actual numbers don't matter, just that it's a number
		  1. Ordered sub-list
		4. And another item.
		
		   You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).
		
		   To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅
		   Note that this line is separate, but within the same paragraph.⋅⋅
		   (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)
		
		* Unordered list can use asterisks
		- Or minuses
		+ Or pluses
		```
		
		1. First ordered list item
		2. Another item
		  * Unordered sub-list. 
		1. Actual numbers don't matter, just that it's a number
		  1. Ordered sub-list
		4. And another item.
		
		   You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).
		
		   To have a line break without a paragraph, you will need to use two trailing spaces.  
		   Note that this line is separate, but within the same paragraph.  
		   (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)
		
		* Unordered list can use asterisks
		- Or minuses
		+ Or pluses
		
		<a name="links"/>
		## Links
		
		There are two ways to create links.
		
		```no-highlight
		[I'm an inline-style link](https://www.google.com)
		
		[I'm an inline-style link with title](https://www.google.com "Google's Homepage")
		
		[I'm a reference-style link][Arbitrary case-insensitive reference text]
		
		[I'm a relative reference to a repository file](../blob/master/LICENSE)
		
		[You can use numbers for reference-style link definitions][1]
		
		Or leave it empty and use the [link text itself]
		
		Some text to show that the reference links can follow later.
		
		[arbitrary case-insensitive reference text]: https://www.mozilla.org
		[1]: http://slashdot.org
		[link text itself]: http://www.reddit.com
		```
		
		[I'm an inline-style link](https://www.google.com)
		
		[I'm an inline-style link with title](https://www.google.com "Google's Homepage")
		
		[I'm a reference-style link][Arbitrary case-insensitive reference text]
		
		[I'm a relative reference to a repository file](../blob/master/LICENSE)
		
		[You can use numbers for reference-style link definitions][1]
		
		Or leave it empty and use the [link text itself]
		
		Some text to show that the reference links can follow later.
		
		[arbitrary case-insensitive reference text]: https://www.mozilla.org
		[1]: http://slashdot.org
		[link text itself]: http://www.reddit.com
		
		<a name="images"/>
		## Images
		
		```no-highlight
		Here's our logo (hover to see the title text):
		
		Inline-style: 
		![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png "Logo Title Text 1")
		
		Reference-style: 
		![alt text][logo]
		
		[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png "Logo Title Text 2"
		```
		
		Here's our logo (hover to see the title text):
		
		Inline-style: 
		![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png "Logo Title Text 1")
		
		Reference-style: 
		![alt text][logo]
		
		[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png "Logo Title Text 2"
		
		<a name="code"/>
		## Code and Syntax Highlighting
		
		Code blocks are part of the Markdown spec, but syntax highlighting isn't. However, many renderers -- like Github's and *Markdown Here* -- support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer. *Markdown Here* supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); to see the complete list, and how to write the language names, see the [highlight.js demo page](http://softwaremaniacs.org/media/soft/highlight/test.html).
		
		```no-highlight
		Inline `code` has `back-ticks around` it.
		```
		
		Inline `code` has `back-ticks around` it.
		
		Blocks of code are either fenced by lines with three back-ticks <code>```</code>, or are indented with four spaces. I recommend only using the fenced code blocks -- they're easier and only they support syntax highlighting.
		
		<pre lang="no-highlight"><code>```javascript
		var s = "JavaScript syntax highlighting";
		alert(s);
		```
		 
		```python
		s = "Python syntax highlighting"
		print s
		```
		 
		```
		No language indicated, so no syntax highlighting. 
		But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
		```
		</code></pre>
		
		
		
		```javascript
		var s = "JavaScript syntax highlighting";
		alert(s);
		```
		
		```python
		s = "Python syntax highlighting"
		print s
		```
		
		```
		No language indicated, so no syntax highlighting in Markdown Here (varies on Github). 
		But let's throw in a <b>tag</b>.
		```
		
		
		<a name="tables"/>
		## Tables
		
		Tables aren't part of the core Markdown spec, but they are part of GFM and *Markdown Here* supports them. They are an easy way of adding tables to your email -- a task that would otherwise require copy-pasting from another application.
		
		```no-highlight
		Colons can be used to align columns.
		
		| Tables        | Are           | Cool  |
		| ------------- |:-------------:| -----:|
		| col 3 is      | right-aligned | $1600 |
		| col 2 is      | centered      |   $12 |
		| zebra stripes | are neat      |    $1 |
		
		The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown.
		
		Markdown | Less | Pretty
		--- | --- | ---
		*Still* | `renders` | **nicely**
		1 | 2 | 3
		```
		
		Colons can be used to align columns.
		
		| Tables        | Are           | Cool |
		| ------------- |:-------------:| -----:|
		| col 3 is      | right-aligned | $1600 |
		| col 2 is      | centered      |   $12 |
		| zebra stripes | are neat      |    $1 |
		
		The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown.
		
		Markdown | Less | Pretty
		--- | --- | ---
		*Still* | `renders` | **nicely**
		1 | 2 | 3
		
		<a name="blockquotes"/>
		## Blockquotes
		
		```no-highlight
		> Blockquotes are very handy in email to emulate reply text.
		> This line is part of the same quote.
		
		Quote break.
		
		> This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. 
		```
		
		> Blockquotes are very handy in email to emulate reply text.
		> This line is part of the same quote.
		
		Quote break.
		
		> This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. 
		
		<a name="html"/>
		## Inline HTML
		
		You can also use raw HTML in your Markdown, and it'll mostly work pretty well. 
		
		```no-highlight
		<dl>
		  <dt>Definition list</dt>
		  <dd>Is something people use sometimes.</dd>
		
		  <dt>Markdown in HTML</dt>
		  <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd>
		</dl>
		```
		
		<dl>
		  <dt>Definition list</dt>
		  <dd>Is something people use sometimes.</dd>
		
		  <dt>Markdown in HTML</dt>
		  <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd>
		</dl>
		
		<a name="hr"/>
		## Horizontal Rule
		
		```
		Three or more...
		
		---
		
		Hyphens
		
		***
		
		Asterisks
		
		___
		
		Underscores
		```
		
		Three or more...
		
		---
		
		Hyphens
		
		***
		
		Asterisks
		
		___
		
		Underscores
		
		<a name="lines"/>
		## Line Breaks
		
		My basic recommendation for learning how line breaks work is to experiment and discover -- hit &lt;Enter&gt; once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You'll soon learn to get what you want. "Markdown Toggle" is your friend. 
		
		Here are some things to try out:
		
		```
		Here's a line for us to start with.
		
		This line is separated from the one above by two newlines, so it will be a *separate paragraph*.
		
		This line is also a separate paragraph, but...
		This line is only separated by a single newline, so it's a separate line in the *same paragraph*.
		```
		
		Here's a line for us to start with.
		
		This line is separated from the one above by two newlines, so it will be a *separate paragraph*.
		
		This line is also begins a separate paragraph, but...  
		This line is only separated by a single newline, so it's a separate line in the *same paragraph*.
		
		(Technical note: *Markdown Here* uses GFM line breaks, so there's no need to use MD's two-space line breaks.)
		
		<a name="videos"/>
		## Youtube videos
		
		They can't be added directly but you can add an image with a link to the video like this:
		
		```no-highlight
		<a href="http://www.youtube.com/watch?feature=player_embedded&v=YOUTUBE_VIDEO_ID_HERE
		" target="_blank"><img src="http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg" 
		alt="IMAGE ALT TEXT HERE" width="240" height="180" border="10" /></a>
		```
		
		Or, in pure Markdown, but losing the image sizing and border:
		
		```no-highlight
		[![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg)](http://www.youtube.com/watch?v=YOUTUBE_VIDEO_ID_HERE)
		```
		
		Referencing a bug by #bugID in your git commit links it to the slip. For example #1. 
	'''
	stable
;

Feature MarkdownExample

description ''''''
text '''
	> The actor is the basic structural building block for building systems with ROOM.
	

	An ActorClass consists of three main parts:
	
	* **Interface** (external interface) specifies the communication to 'outside' actors and consists of `Port`s.
	* **Structure** (internal interface) contains [Port]()s, [Attribute]()s and [ActorRef]()s. These elements are accessible from the Behavior part of the actor (in contrary to the external interface above). An ActorClass can be composed of other actors again by declaring ActorRefs. Also this part declares the connection of ports in form of Bindings and LayerConnections.
	* **Behavior** is described by the `StateMachine`. It can receive and send messages from the ports, declared in the Structure above. The Attributes can be used to store data during an state transition. Furthermore it is possible to declare Operations. They can be used to define reusable logic, that is invoked during a state transition.
	
	Graphical notation of an ActorClass:
	
	![ActorClass graphical notation](images/300-Application_structure.jpg)
	
	Textual notation of an ActorClass:
	
	```room
	ActorClass ExampleActorClass {
		Interface {
			Port port1: ProtocolClass1
			Port port4: ProtocolClass1
		}
		Structure {
			external Port port1
			conjugated Port port2: ProtocolClass1
			conjugated Port port3: ProtocolClass1
	
			ActorRef ActorRef_A: ActorClass2
			ActorRef ActorRef_B: ActorClass3
	
			Binding port2 and ActorRef_A.port5
			// ...
		}
		Behavior {
			// StateMachine part here
		}
	}
	```
	
	|Contained | Feature|
	--------- | -------|
	|[ExecutionType]() | Determines the execution type of an actor.|
	|[ActorRef]() | An ActorRef is an instance of an ActorClass.|
	|Port | A Port is an instance of a ProtocolClass and the interface for an ActorClass.|
	|SAP | A Service Access Point is similar to a Port, but uses a LayerConnection for wiring.|
	|SPP | A Service Provision Point is the counterpart of a SAP|
	|Binding | A Binding connects two Ports with each other.|
	|LayerConnection| A LayerConnection associates a SPP to an ActorRef, resulting in an connection of all SAPs on its instance hierarchy.|
	|Attribute | An Attribute is a member variable of a class|
	|Operation|  An Operation is a member function of a class.|
	|StateMachine | A StateMachine describes the state based, event driven behavior of an ActorClass|
	
	
	Relation | Feature | description
	-------- | ------- | ------
	Uses | `Inheritance` | A class can specify a super class and inherits elements from the super class hierarchy.
	Typecasts | **ActorRef** | An ActorRef is an instance of an ActorClass.
	Is&#160;contained&#160;in | *LogicalModel* | The LogicalModel describes the logical structure and behavior of a ROOM application.
	Is&#160;edited&#160;by | [GraphicalStructureEditor](#) | The Structure Editor allows to edit the ActorClass� Structure in a convenient way. It is possible to create and arrange actor references and ports and to create bindings and layer connections.

	> This&#160;is&#160;a&#160;whitespace, that cannot be a line break 
'''

stable
;