/*
* generated by Xtext
*/
grammar InternalBase;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.eclipse.etrice.core.common.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.etrice.core.common.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipse.etrice.core.common.services.BaseGrammarAccess;

}

@parser::members {
 
 	private BaseGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(BaseGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleLiteralArray
entryRuleLiteralArray 
:
{ before(grammarAccess.getLiteralArrayRule()); }
	 ruleLiteralArray
{ after(grammarAccess.getLiteralArrayRule()); } 
	 EOF 
;

// Rule LiteralArray
ruleLiteralArray
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralArrayAccess().getGroup()); }
(rule__LiteralArray__Group__0)
{ after(grammarAccess.getLiteralArrayAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral 
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanLiteralAccess().getGroup()); }
(rule__BooleanLiteral__Group__0)
{ after(grammarAccess.getBooleanLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral 
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberLiteralAccess().getAlternatives()); }
(rule__NumberLiteral__Alternatives)
{ after(grammarAccess.getNumberLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRealLiteral
entryRuleRealLiteral 
:
{ before(grammarAccess.getRealLiteralRule()); }
	 ruleRealLiteral
{ after(grammarAccess.getRealLiteralRule()); } 
	 EOF 
;

// Rule RealLiteral
ruleRealLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRealLiteralAccess().getGroup()); }
(rule__RealLiteral__Group__0)
{ after(grammarAccess.getRealLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntLiteral
entryRuleIntLiteral 
:
{ before(grammarAccess.getIntLiteralRule()); }
	 ruleIntLiteral
{ after(grammarAccess.getIntLiteralRule()); } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntLiteralAccess().getGroup()); }
(rule__IntLiteral__Group__0)
{ after(grammarAccess.getIntLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringLiteral
entryRuleStringLiteral 
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringLiteralAccess().getGroup()); }
(rule__StringLiteral__Group__0)
{ after(grammarAccess.getStringLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInteger
entryRuleInteger 
:
{ before(grammarAccess.getIntegerRule()); }
	 ruleInteger
{ after(grammarAccess.getIntegerRule()); } 
	 EOF 
;

// Rule Integer
ruleInteger
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerAccess().getAlternatives()); }
(rule__Integer__Alternatives)
{ after(grammarAccess.getIntegerAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignedInteger
entryRuleSignedInteger 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getSignedIntegerRule()); }
	 ruleSignedInteger
{ after(grammarAccess.getSignedIntegerRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SignedInteger
ruleSignedInteger
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSignedIntegerAccess().getGroup()); }
(rule__SignedInteger__Group__0)
{ after(grammarAccess.getSignedIntegerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleHexadecimal
entryRuleHexadecimal 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getHexadecimalRule()); }
	 ruleHexadecimal
{ after(grammarAccess.getHexadecimalRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Hexadecimal
ruleHexadecimal
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHexadecimalAccess().getHEXTerminalRuleCall()); }
	RULE_HEX
{ after(grammarAccess.getHexadecimalAccess().getHEXTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleReal
entryRuleReal 
:
{ before(grammarAccess.getRealRule()); }
	 ruleReal
{ after(grammarAccess.getRealRule()); } 
	 EOF 
;

// Rule Real
ruleReal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRealAccess().getAlternatives()); }
(rule__Real__Alternatives)
{ after(grammarAccess.getRealAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDecimal
entryRuleDecimal 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getDecimalRule()); }
	 ruleDecimal
{ after(grammarAccess.getDecimalRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Decimal
ruleDecimal
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDecimalAccess().getGroup()); }
(rule__Decimal__Group__0)
{ after(grammarAccess.getDecimalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleDotDecimal
entryRuleDotDecimal 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getDotDecimalRule()); }
	 ruleDotDecimal
{ after(grammarAccess.getDotDecimalRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule DotDecimal
ruleDotDecimal
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDotDecimalAccess().getGroup()); }
(rule__DotDecimal__Group__0)
{ after(grammarAccess.getDotDecimalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleDecimalDot
entryRuleDecimalDot 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getDecimalDotRule()); }
	 ruleDecimalDot
{ after(grammarAccess.getDecimalDotRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule DecimalDot
ruleDecimalDot
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDecimalDotAccess().getGroup()); }
(rule__DecimalDot__Group__0)
{ after(grammarAccess.getDecimalDotAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleDecimalExp
entryRuleDecimalExp 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getDecimalExpRule()); }
	 ruleDecimalExp
{ after(grammarAccess.getDecimalExpRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule DecimalExp
ruleDecimalExp
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDecimalExpAccess().getGroup()); }
(rule__DecimalExp__Group__0)
{ after(grammarAccess.getDecimalExpAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}




rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_0()); }
	ruleBooleanLiteral
{ after(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_1()); }
	ruleNumberLiteral
{ after(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); }
	ruleStringLiteral
{ after(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_0()); }

	'false' 

{ after(grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getBooleanLiteralAccess().getIsTrueAssignment_1_1()); }
(rule__BooleanLiteral__IsTrueAssignment_1_1)
{ after(grammarAccess.getBooleanLiteralAccess().getIsTrueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberLiteralAccess().getIntLiteralParserRuleCall_0()); }
	ruleIntLiteral
{ after(grammarAccess.getNumberLiteralAccess().getIntLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumberLiteralAccess().getRealLiteralParserRuleCall_1()); }
	ruleRealLiteral
{ after(grammarAccess.getNumberLiteralAccess().getRealLiteralParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerAccess().getSignedIntegerParserRuleCall_0()); }
	ruleSignedInteger
{ after(grammarAccess.getIntegerAccess().getSignedIntegerParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getIntegerAccess().getHexadecimalParserRuleCall_1()); }
	ruleHexadecimal
{ after(grammarAccess.getIntegerAccess().getHexadecimalParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SignedInteger__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedIntegerAccess().getPlusSignKeyword_0_0()); }

	'+' 

{ after(grammarAccess.getSignedIntegerAccess().getPlusSignKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getSignedIntegerAccess().getHyphenMinusKeyword_0_1()); }

	'-' 

{ after(grammarAccess.getSignedIntegerAccess().getHyphenMinusKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealAccess().getDecimalParserRuleCall_0()); }
	ruleDecimal
{ after(grammarAccess.getRealAccess().getDecimalParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getRealAccess().getDotDecimalParserRuleCall_1()); }
	ruleDotDecimal
{ after(grammarAccess.getRealAccess().getDotDecimalParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getRealAccess().getDecimalDotParserRuleCall_2()); }
	ruleDecimalDot
{ after(grammarAccess.getRealAccess().getDecimalDotParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getRealAccess().getDecimalExpParserRuleCall_3()); }
	ruleDecimalExp
{ after(grammarAccess.getRealAccess().getDecimalExpParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Decimal__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalAccess().getPlusSignKeyword_0_0()); }

	'+' 

{ after(grammarAccess.getDecimalAccess().getPlusSignKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getDecimalAccess().getHyphenMinusKeyword_0_1()); }

	'-' 

{ after(grammarAccess.getDecimalAccess().getHyphenMinusKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DotDecimal__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDotDecimalAccess().getPlusSignKeyword_0_0()); }

	'+' 

{ after(grammarAccess.getDotDecimalAccess().getPlusSignKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getDotDecimalAccess().getHyphenMinusKeyword_0_1()); }

	'-' 

{ after(grammarAccess.getDotDecimalAccess().getHyphenMinusKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalDot__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalDotAccess().getPlusSignKeyword_0_0()); }

	'+' 

{ after(grammarAccess.getDecimalDotAccess().getPlusSignKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getDecimalDotAccess().getHyphenMinusKeyword_0_1()); }

	'-' 

{ after(grammarAccess.getDecimalDotAccess().getHyphenMinusKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalExp__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalExpAccess().getPlusSignKeyword_0_0()); }

	'+' 

{ after(grammarAccess.getDecimalExpAccess().getPlusSignKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getDecimalExpAccess().getHyphenMinusKeyword_0_1()); }

	'-' 

{ after(grammarAccess.getDecimalExpAccess().getHyphenMinusKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__LiteralArray__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralArray__Group__0__Impl
	rule__LiteralArray__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralArray__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralArrayAccess().getLiteralsAssignment_0()); }
(rule__LiteralArray__LiteralsAssignment_0)
{ after(grammarAccess.getLiteralArrayAccess().getLiteralsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralArray__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralArray__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralArray__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralArrayAccess().getGroup_1()); }
(rule__LiteralArray__Group_1__0)*
{ after(grammarAccess.getLiteralArrayAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LiteralArray__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralArray__Group_1__0__Impl
	rule__LiteralArray__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralArray__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralArrayAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getLiteralArrayAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralArray__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralArray__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralArray__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralArrayAccess().getLiteralsAssignment_1_1()); }
(rule__LiteralArray__LiteralsAssignment_1_1)
{ after(grammarAccess.getLiteralArrayAccess().getLiteralsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BooleanLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanLiteral__Group__0__Impl
	rule__BooleanLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0()); }
(

)
{ after(grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getAlternatives_1()); }
(rule__BooleanLiteral__Alternatives_1)
{ after(grammarAccess.getBooleanLiteralAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RealLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealLiteral__Group__0__Impl
	rule__RealLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealLiteralAccess().getRealLiteralAction_0()); }
(

)
{ after(grammarAccess.getRealLiteralAccess().getRealLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealLiteralAccess().getValueAssignment_1()); }
(rule__RealLiteral__ValueAssignment_1)
{ after(grammarAccess.getRealLiteralAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IntLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntLiteral__Group__0__Impl
	rule__IntLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntLiteralAccess().getIntLiteralAction_0()); }
(

)
{ after(grammarAccess.getIntLiteralAccess().getIntLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntLiteralAccess().getValueAssignment_1()); }
(rule__IntLiteral__ValueAssignment_1)
{ after(grammarAccess.getIntLiteralAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StringLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringLiteral__Group__0__Impl
	rule__StringLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getStringLiteralAction_0()); }
(

)
{ after(grammarAccess.getStringLiteralAccess().getStringLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getValueAssignment_1()); }
(rule__StringLiteral__ValueAssignment_1)
{ after(grammarAccess.getStringLiteralAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SignedInteger__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignedInteger__Group__0__Impl
	rule__SignedInteger__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedInteger__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedIntegerAccess().getAlternatives_0()); }
(rule__SignedInteger__Alternatives_0)?
{ after(grammarAccess.getSignedIntegerAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignedInteger__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignedInteger__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedInteger__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedIntegerAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getSignedIntegerAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Decimal__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Decimal__Group__0__Impl
	rule__Decimal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Decimal__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalAccess().getAlternatives_0()); }
(rule__Decimal__Alternatives_0)?
{ after(grammarAccess.getDecimalAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Decimal__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Decimal__Group__1__Impl
	rule__Decimal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Decimal__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getDecimalAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Decimal__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Decimal__Group__2__Impl
	rule__Decimal__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Decimal__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalAccess().getFullStopKeyword_2()); }

	'.' 

{ after(grammarAccess.getDecimalAccess().getFullStopKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Decimal__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Decimal__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Decimal__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalAccess().getINTTerminalRuleCall_3()); }
	RULE_INT
{ after(grammarAccess.getDecimalAccess().getINTTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__DotDecimal__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DotDecimal__Group__0__Impl
	rule__DotDecimal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DotDecimal__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDotDecimalAccess().getAlternatives_0()); }
(rule__DotDecimal__Alternatives_0)?
{ after(grammarAccess.getDotDecimalAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DotDecimal__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DotDecimal__Group__1__Impl
	rule__DotDecimal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DotDecimal__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDotDecimalAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getDotDecimalAccess().getFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DotDecimal__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DotDecimal__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DotDecimal__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDotDecimalAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
{ after(grammarAccess.getDotDecimalAccess().getINTTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DecimalDot__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DecimalDot__Group__0__Impl
	rule__DecimalDot__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalDot__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalDotAccess().getAlternatives_0()); }
(rule__DecimalDot__Alternatives_0)?
{ after(grammarAccess.getDecimalDotAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DecimalDot__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DecimalDot__Group__1__Impl
	rule__DecimalDot__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalDot__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalDotAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getDecimalDotAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DecimalDot__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DecimalDot__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalDot__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalDotAccess().getFullStopKeyword_2()); }

	'.' 

{ after(grammarAccess.getDecimalDotAccess().getFullStopKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DecimalExp__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DecimalExp__Group__0__Impl
	rule__DecimalExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalExp__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalExpAccess().getAlternatives_0()); }
(rule__DecimalExp__Alternatives_0)?
{ after(grammarAccess.getDecimalExpAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DecimalExp__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DecimalExp__Group__1__Impl
	rule__DecimalExp__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalExp__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalExpAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getDecimalExpAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DecimalExp__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DecimalExp__Group__2__Impl
	rule__DecimalExp__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalExp__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalExpAccess().getFullStopKeyword_2()); }

	'.' 

{ after(grammarAccess.getDecimalExpAccess().getFullStopKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DecimalExp__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DecimalExp__Group__3__Impl
	rule__DecimalExp__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalExp__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalExpAccess().getINTTerminalRuleCall_3()); }
	RULE_INT
{ after(grammarAccess.getDecimalExpAccess().getINTTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DecimalExp__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DecimalExp__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DecimalExp__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalExpAccess().getEXPTerminalRuleCall_4()); }
	RULE_EXP
{ after(grammarAccess.getDecimalExpAccess().getEXPTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}













rule__LiteralArray__LiteralsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralArrayAccess().getLiteralsLiteralParserRuleCall_0_0()); }
	ruleLiteral{ after(grammarAccess.getLiteralArrayAccess().getLiteralsLiteralParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralArray__LiteralsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralArrayAccess().getLiteralsLiteralParserRuleCall_1_1_0()); }
	ruleLiteral{ after(grammarAccess.getLiteralArrayAccess().getLiteralsLiteralParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__IsTrueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0()); }
(
{ before(grammarAccess.getBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0()); }

	'true' 

{ after(grammarAccess.getBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0()); }
)

{ after(grammarAccess.getBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealLiteralAccess().getValueRealParserRuleCall_1_0()); }
	ruleReal{ after(grammarAccess.getRealLiteralAccess().getValueRealParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntLiteralAccess().getValueIntegerParserRuleCall_1_0()); }
	ruleInteger{ after(grammarAccess.getIntLiteralAccess().getValueIntegerParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_EXP : ('e'|'E') ('+'|'-')? ('0'..'9')+;

RULE_HEX : ('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


