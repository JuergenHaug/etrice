package org.eclipse.etrice.generator.cpp.gen;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import org.eclipse.emf.common.util.EList;
import org.eclipse.etrice.core.genmodel.etricegen.Root;
import org.eclipse.etrice.core.genmodel.etricegen.SubSystemInstance;
import org.eclipse.etrice.core.room.SubSystemClass;
import org.eclipse.etrice.generator.cpp.gen.CppExtensions;
import org.eclipse.etrice.generator.generic.RoomExtensions;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;

@Singleton
@SuppressWarnings("all")
public class SubSystemRunnerGen {
  @Inject
  private JavaIoFileSystemAccess fileAccess;
  
  @Inject
  private CppExtensions _cppExtensions;
  
  @Inject
  private RoomExtensions roomExt;
  
  public void doGenerate(final Root root) {
    EList<SubSystemInstance> _subSystemInstances = root.getSubSystemInstances();
    for (final SubSystemInstance sc : _subSystemInstances) {
      {
        SubSystemClass _subSystemClass = sc.getSubSystemClass();
        String _generationTargetPath = this.roomExt.getGenerationTargetPath(_subSystemClass);
        SubSystemClass _subSystemClass_1 = sc.getSubSystemClass();
        String _path = this.roomExt.getPath(_subSystemClass_1);
        String _plus = (_generationTargetPath + _path);
        this.fileAccess.setOutputPath(_plus);
        SubSystemClass _subSystemClass_2 = sc.getSubSystemClass();
        String _name = _subSystemClass_2.getName();
        String _plus_1 = (_name + "_Runner.h");
        SubSystemClass _subSystemClass_3 = sc.getSubSystemClass();
        CharSequence _generateHeaderFile = this.generateHeaderFile(root, sc, _subSystemClass_3);
        this.fileAccess.generateFile(_plus_1, _generateHeaderFile);
        SubSystemClass _subSystemClass_4 = sc.getSubSystemClass();
        String _generationTargetPath_1 = this.roomExt.getGenerationTargetPath(_subSystemClass_4);
        SubSystemClass _subSystemClass_5 = sc.getSubSystemClass();
        String _path_1 = this.roomExt.getPath(_subSystemClass_5);
        String _plus_2 = (_generationTargetPath_1 + _path_1);
        this.fileAccess.setOutputPath(_plus_2);
        SubSystemClass _subSystemClass_6 = sc.getSubSystemClass();
        String _name_1 = _subSystemClass_6.getName();
        String _plus_3 = (_name_1 + "_Runner.cpp");
        SubSystemClass _subSystemClass_7 = sc.getSubSystemClass();
        CharSequence _generateSourceFile = this.generateSourceFile(root, sc, _subSystemClass_7);
        this.fileAccess.generateFile(_plus_3, _generateSourceFile);
      }
    }
  }
  
  public CharSequence generateHeaderFile(final Root root, final SubSystemInstance ssc, final SubSystemClass cc) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @author generated by eTrice");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* this class contains the main function running component ");
    String _name = cc.getName();
    _builder.append(_name, " ");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* it instantiates ");
    String _name_1 = cc.getName();
    _builder.append(_name_1, " ");
    _builder.append(" and starts and ends the lifecycle");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    String _name_2 = cc.getName();
    String _plus = (_name_2 + "_Runner");
    CharSequence _generateIncludeGuardBegin = this._cppExtensions.generateIncludeGuardBegin(_plus);
    _builder.append(_generateIncludeGuardBegin, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("#include \"common/modelbase/SubSystemRunnerBase.h\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ");
    String _name_3 = cc.getName();
    String _plus_1 = (_name_3 + "Runner");
    _builder.append(_plus_1, "");
    _builder.append(" :public etRuntime::SubSystemRunnerBase {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* main function");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* creates component and starts and stops the lifecycle");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("static void run(); ");
    _builder.newLine();
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    String _name_4 = cc.getName();
    String _plus_2 = (_name_4 + "_Runner");
    CharSequence _generateIncludeGuardEnd = this._cppExtensions.generateIncludeGuardEnd(_plus_2);
    _builder.append(_generateIncludeGuardEnd, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateSourceFile(final Root root, final SubSystemInstance ssi, final SubSystemClass ssc) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @author generated by eTrice");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* this class contains the main function running component ");
    String _name = ssc.getName();
    _builder.append(_name, " ");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* it instantiates ");
    String _name_1 = ssc.getName();
    _builder.append(_name_1, " ");
    _builder.append(" and starts and ends the lifecycle");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("#include \"");
    String _name_2 = ssc.getName();
    _builder.append(_name_2, "");
    _builder.append(".h\"");
    _builder.newLineIfNotEmpty();
    _builder.append("#include \"");
    String _name_3 = ssc.getName();
    _builder.append(_name_3, "");
    _builder.append("_Runner.h\"");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("#include <iostream>");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* main function");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* creates component and starts and stops the lifecycle");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("int main(void) {");
    _builder.newLine();
    _builder.append("\t");
    String _name_4 = ssc.getName();
    String _plus = (_name_4 + "Runner");
    _builder.append(_plus, "	");
    _builder.append("::run();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return 0;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("void ");
    String _name_5 = ssc.getName();
    String _plus_1 = (_name_5 + "Runner");
    _builder.append(_plus_1, "");
    _builder.append("::run() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_6 = ssc.getName();
    _builder.append(_name_6, "	");
    _builder.append(" main_component(0, \"");
    String _name_7 = ssc.getName();
    _builder.append(_name_7, "	");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//etUserEntry(); /* platform specific */");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("std::cout << \"***   T H E   B E G I N   ***\" << std::endl;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("main_component.init(); // lifecycle init");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("main_component.start(); // lifecycle start");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// application runs until quit ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("waitForQuit(main_component);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// end the lifecycle");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("main_component.stop(); // lifecycle stop");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("main_component.destroy(); // lifecycle destroy");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("std::cout << \"***   T H E   E N D   ***\" << std::endl;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//etUserExit(); /* platform specific */");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
}
