
package org.eclipse.etrice.generator.cpp.gen

import com.google.inject.Inject
import com.google.inject.Singleton
import org.eclipse.etrice.core.room.SubSystemClass
import org.eclipse.etrice.core.genmodel.etricegen.Root
import org.eclipse.etrice.core.genmodel.etricegen.SubSystemInstance
import org.eclipse.xtext.generator.JavaIoFileSystemAccess
import org.eclipse.etrice.generator.generic.RoomExtensions

@Singleton
class SubSystemRunnerGen {

	@Inject extension JavaIoFileSystemAccess fileAccess
	@Inject extension CppExtensions
	@Inject extension RoomExtensions roomExt
	
	def doGenerate(Root root) {
		for (sc: root.subSystemInstances) {
			fileAccess.setOutputPath(sc.subSystemClass.generationTargetPath+sc.subSystemClass.getPath)
			fileAccess.generateFile( sc.name+"_Runner.h", root.generateHeaderFile(sc, sc.subSystemClass))

			fileAccess.setOutputPath(sc.subSystemClass.generationTargetPath+sc.subSystemClass.getPath)
			fileAccess.generateFile( sc.name+"_Runner.cpp", root.generateSourceFile(sc, sc.subSystemClass))
		}
	}
	
	def generateHeaderFile(Root root, SubSystemInstance ssc, SubSystemClass cc) {'''
		/**
		 * @author generated by eTrice
		 *
		 * this class contains the main function running component «ssc.name»
		 * it instantiates «ssc.name» and starts and ends the lifecycle
		 */
		
		«generateIncludeGuardBegin(ssc.name+"_Runner")»
		
		#include "common/modelbase/SubSystemRunnerBase.h"
		
		class «ssc.name+"Runner"» :public etRuntime::SubSystemRunnerBase {
		
			/**
		     * main function
		     * creates component and starts and stops the lifecycle
		     */
			public:
				static void run(); 
		};
		
		«generateIncludeGuardEnd(ssc.name+"_Runner")»
	'''
	}
	
	def generateSourceFile(Root root, SubSystemInstance ssi, SubSystemClass ssc) {'''
		/**
		 * @author generated by eTrice
		 *
		 * this class contains the main function running component «ssi.name»
		 * it instantiates «ssi.name» and starts and ends the lifecycle
		 */
		
		
		#include "«ssi.name».h"
		#include "«ssi.name»_Runner.h"

		#include <iostream>
		
		
		/**
		 * main function
		 * creates component and starts and stops the lifecycle
		 */
		
		int main(void) {
			«ssc.name+"Runner"»::run();
			return 0;
		}
			
			
		void «ssc.name+"Runner"»::run() {
			«ssc.name» main_component(0, "«ssc.name»");
			
			//etUserEntry(); /* platform specific */
			
			std::cout << "***   T H E   B E G I N   ***" << std::endl;
				
			main_component.init(); // lifecycle init
			main_component.start(); // lifecycle start
				
			// application runs until quit 
			waitForQuit();
			
			// end the lifecycle
			main_component.stop(); // lifecycle stop
			main_component.destroy(); // lifecycle destroy
			
			std::cout << "***   T H E   E N D   ***" << std::endl;
		
			//etUserExit(); /* platform specific */
		}
		
	'''
	}	
}