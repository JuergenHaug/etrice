/*
 * generated by Xtext
 */
package org.eclipse.etrice.core.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.etrice.core.common.base.Annotation;
import org.eclipse.etrice.core.common.base.AnnotationType;
import org.eclipse.etrice.core.common.base.BasePackage;
import org.eclipse.etrice.core.common.base.BooleanLiteral;
import org.eclipse.etrice.core.common.base.Documentation;
import org.eclipse.etrice.core.common.base.EnumAnnotationAttribute;
import org.eclipse.etrice.core.common.base.Import;
import org.eclipse.etrice.core.common.base.IntLiteral;
import org.eclipse.etrice.core.common.base.KeyValue;
import org.eclipse.etrice.core.common.base.LiteralArray;
import org.eclipse.etrice.core.common.base.RealLiteral;
import org.eclipse.etrice.core.common.base.SimpleAnnotationAttribute;
import org.eclipse.etrice.core.common.base.StringLiteral;
import org.eclipse.etrice.core.common.serializer.BaseSemanticSequencer;
import org.eclipse.etrice.core.config.ActorClassConfig;
import org.eclipse.etrice.core.config.ActorInstanceConfig;
import org.eclipse.etrice.core.config.AttrClassConfig;
import org.eclipse.etrice.core.config.AttrInstanceConfig;
import org.eclipse.etrice.core.config.ConfigModel;
import org.eclipse.etrice.core.config.ConfigPackage;
import org.eclipse.etrice.core.config.ConfigValueArray;
import org.eclipse.etrice.core.config.DynamicConfig;
import org.eclipse.etrice.core.config.EnumConfigValue;
import org.eclipse.etrice.core.config.LiteralConfigValue;
import org.eclipse.etrice.core.config.PortClassConfig;
import org.eclipse.etrice.core.config.PortInstanceConfig;
import org.eclipse.etrice.core.config.ProtocolClassConfig;
import org.eclipse.etrice.core.config.RefPath;
import org.eclipse.etrice.core.config.RefSegment;
import org.eclipse.etrice.core.config.SubSystemConfig;
import org.eclipse.etrice.core.services.ConfigGrammarAccess;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ConfigSemanticSequencer extends BaseSemanticSequencer {

	@Inject
	private ConfigGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BasePackage.ANNOTATION:
				sequence_Annotation(context, (Annotation) semanticObject); 
				return; 
			case BasePackage.ANNOTATION_TYPE:
				sequence_AnnotationType(context, (AnnotationType) semanticObject); 
				return; 
			case BasePackage.BOOLEAN_LITERAL:
				sequence_BooleanLiteral(context, (BooleanLiteral) semanticObject); 
				return; 
			case BasePackage.DOCUMENTATION:
				sequence_Documentation(context, (Documentation) semanticObject); 
				return; 
			case BasePackage.ENUM_ANNOTATION_ATTRIBUTE:
				sequence_EnumAnnotationAttribute(context, (EnumAnnotationAttribute) semanticObject); 
				return; 
			case BasePackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case BasePackage.INT_LITERAL:
				sequence_IntLiteral(context, (IntLiteral) semanticObject); 
				return; 
			case BasePackage.KEY_VALUE:
				sequence_KeyValue(context, (KeyValue) semanticObject); 
				return; 
			case BasePackage.LITERAL_ARRAY:
				sequence_LiteralArray(context, (LiteralArray) semanticObject); 
				return; 
			case BasePackage.REAL_LITERAL:
				sequence_RealLiteral(context, (RealLiteral) semanticObject); 
				return; 
			case BasePackage.SIMPLE_ANNOTATION_ATTRIBUTE:
				sequence_SimpleAnnotationAttribute(context, (SimpleAnnotationAttribute) semanticObject); 
				return; 
			case BasePackage.STRING_LITERAL:
				sequence_StringLiteral(context, (StringLiteral) semanticObject); 
				return; 
			}
		else if (epackage == ConfigPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ConfigPackage.ACTOR_CLASS_CONFIG:
				sequence_ActorClassConfig(context, (ActorClassConfig) semanticObject); 
				return; 
			case ConfigPackage.ACTOR_INSTANCE_CONFIG:
				sequence_ActorInstanceConfig(context, (ActorInstanceConfig) semanticObject); 
				return; 
			case ConfigPackage.ATTR_CLASS_CONFIG:
				sequence_AttrClassConfig(context, (AttrClassConfig) semanticObject); 
				return; 
			case ConfigPackage.ATTR_INSTANCE_CONFIG:
				sequence_AttrInstanceConfig(context, (AttrInstanceConfig) semanticObject); 
				return; 
			case ConfigPackage.CONFIG_MODEL:
				sequence_ConfigModel(context, (ConfigModel) semanticObject); 
				return; 
			case ConfigPackage.CONFIG_VALUE_ARRAY:
				sequence_ConfigValueArray(context, (ConfigValueArray) semanticObject); 
				return; 
			case ConfigPackage.DYNAMIC_CONFIG:
				sequence_DynamicConfig(context, (DynamicConfig) semanticObject); 
				return; 
			case ConfigPackage.ENUM_CONFIG_VALUE:
				sequence_EnumConfigValue(context, (EnumConfigValue) semanticObject); 
				return; 
			case ConfigPackage.LITERAL_CONFIG_VALUE:
				sequence_LiteralConfigValue(context, (LiteralConfigValue) semanticObject); 
				return; 
			case ConfigPackage.PORT_CLASS_CONFIG:
				sequence_PortClassConfig(context, (PortClassConfig) semanticObject); 
				return; 
			case ConfigPackage.PORT_INSTANCE_CONFIG:
				sequence_PortInstanceConfig(context, (PortInstanceConfig) semanticObject); 
				return; 
			case ConfigPackage.PROTOCOL_CLASS_CONFIG:
				sequence_ProtocolClassConfig(context, (ProtocolClassConfig) semanticObject); 
				return; 
			case ConfigPackage.REF_PATH:
				sequence_RefPath(context, (RefPath) semanticObject); 
				return; 
			case ConfigPackage.REF_SEGMENT:
				sequence_RefSegment(context, (RefSegment) semanticObject); 
				return; 
			case ConfigPackage.SUB_SYSTEM_CONFIG:
				sequence_SubSystemConfig(context, (SubSystemConfig) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ConfigElement returns ActorClassConfig
	 *     ActorClassConfig returns ActorClassConfig
	 *
	 * Constraint:
	 *     (actor=[ActorClass|FQN] attributes+=AttrClassConfig*)
	 */
	protected void sequence_ActorClassConfig(ISerializationContext context, ActorClassConfig semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConfigElement returns ActorInstanceConfig
	 *     ActorInstanceConfig returns ActorInstanceConfig
	 *
	 * Constraint:
	 *     (root=[LogicalSystem|FQN] subSystem=[SubSystemRef|ID] path=RefPath (attributes+=AttrInstanceConfig | ports+=PortInstanceConfig)*)
	 */
	protected void sequence_ActorInstanceConfig(ISerializationContext context, ActorInstanceConfig semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttrConfig returns AttrClassConfig
	 *     AttrClassConfig returns AttrClassConfig
	 *
	 * Constraint:
	 *     (attribute=[Attribute|ID] value=ConfigValueArray? min=NumberLiteral? max=NumberLiteral? attributes+=AttrClassConfig*)
	 */
	protected void sequence_AttrClassConfig(ISerializationContext context, AttrClassConfig semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttrConfig returns AttrInstanceConfig
	 *     AttrInstanceConfig returns AttrInstanceConfig
	 *
	 * Constraint:
	 *     (attribute=[Attribute|ID] value=ConfigValueArray? (dynConfig?='dynamic configuration' readOnly?='read'?)? attributes+=AttrInstanceConfig*)
	 */
	protected void sequence_AttrInstanceConfig(ISerializationContext context, AttrInstanceConfig semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConfigModel returns ConfigModel
	 *
	 * Constraint:
	 *     (name=FQN imports+=Import* configElements+=ConfigElement*)
	 */
	protected void sequence_ConfigModel(ISerializationContext context, ConfigModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConfigValueArray returns ConfigValueArray
	 *
	 * Constraint:
	 *     (values+=ConfigValue values+=ConfigValue*)
	 */
	protected void sequence_ConfigValueArray(ISerializationContext context, ConfigValueArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DynamicConfig returns DynamicConfig
	 *
	 * Constraint:
	 *     (filePath=STRING | (userCode1=STRING userCode2=STRING) | polling=TIME)+
	 */
	protected void sequence_DynamicConfig(ISerializationContext context, DynamicConfig semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConfigValue returns EnumConfigValue
	 *     EnumConfigValue returns EnumConfigValue
	 *
	 * Constraint:
	 *     (type=[EnumerationType|ID] value=[EnumLiteral|ID])
	 */
	protected void sequence_EnumConfigValue(ISerializationContext context, EnumConfigValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ConfigPackage.Literals.ENUM_CONFIG_VALUE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConfigPackage.Literals.ENUM_CONFIG_VALUE__TYPE));
			if (transientValues.isValueTransient(semanticObject, ConfigPackage.Literals.ENUM_CONFIG_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConfigPackage.Literals.ENUM_CONFIG_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnumConfigValueAccess().getTypeEnumerationTypeIDTerminalRuleCall_0_0_1(), semanticObject.getType());
		feeder.accept(grammarAccess.getEnumConfigValueAccess().getValueEnumLiteralIDTerminalRuleCall_2_0_1(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConfigValue returns LiteralConfigValue
	 *     LiteralConfigValue returns LiteralConfigValue
	 *
	 * Constraint:
	 *     value=Literal
	 */
	protected void sequence_LiteralConfigValue(ISerializationContext context, LiteralConfigValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ConfigPackage.Literals.LITERAL_CONFIG_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConfigPackage.Literals.LITERAL_CONFIG_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLiteralConfigValueAccess().getValueLiteralParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PortClassConfig returns PortClassConfig
	 *
	 * Constraint:
	 *     attributes+=AttrClassConfig*
	 */
	protected void sequence_PortClassConfig(ISerializationContext context, PortClassConfig semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PortInstanceConfig returns PortInstanceConfig
	 *
	 * Constraint:
	 *     (item=[InterfaceItem|ID] attributes+=AttrInstanceConfig*)
	 */
	protected void sequence_PortInstanceConfig(ISerializationContext context, PortInstanceConfig semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConfigElement returns ProtocolClassConfig
	 *     ProtocolClassConfig returns ProtocolClassConfig
	 *
	 * Constraint:
	 *     (protocol=[ProtocolClass|FQN] (regular=PortClassConfig | conjugated=PortClassConfig)*)
	 */
	protected void sequence_ProtocolClassConfig(ISerializationContext context, ProtocolClassConfig semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RefPath returns RefPath
	 *
	 * Constraint:
	 *     (refs+=RefSegment refs+=RefSegment*)
	 */
	protected void sequence_RefPath(ISerializationContext context, RefPath semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RefSegment returns RefSegment
	 *
	 * Constraint:
	 *     (ref=ID idx=INT?)
	 */
	protected void sequence_RefSegment(ISerializationContext context, RefSegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConfigElement returns SubSystemConfig
	 *     SubSystemConfig returns SubSystemConfig
	 *
	 * Constraint:
	 *     (root=[LogicalSystem|FQN] subSystem=[SubSystemRef|ID] dynConfig=DynamicConfig)
	 */
	protected void sequence_SubSystemConfig(ISerializationContext context, SubSystemConfig semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ConfigPackage.Literals.SUB_SYSTEM_CONFIG__ROOT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConfigPackage.Literals.SUB_SYSTEM_CONFIG__ROOT));
			if (transientValues.isValueTransient(semanticObject, ConfigPackage.Literals.SUB_SYSTEM_CONFIG__SUB_SYSTEM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConfigPackage.Literals.SUB_SYSTEM_CONFIG__SUB_SYSTEM));
			if (transientValues.isValueTransient(semanticObject, ConfigPackage.Literals.SUB_SYSTEM_CONFIG__DYN_CONFIG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ConfigPackage.Literals.SUB_SYSTEM_CONFIG__DYN_CONFIG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSubSystemConfigAccess().getRootLogicalSystemFQNParserRuleCall_1_0_1(), semanticObject.getRoot());
		feeder.accept(grammarAccess.getSubSystemConfigAccess().getSubSystemSubSystemRefIDTerminalRuleCall_3_0_1(), semanticObject.getSubSystem());
		feeder.accept(grammarAccess.getSubSystemConfigAccess().getDynConfigDynamicConfigParserRuleCall_5_0(), semanticObject.getDynConfig());
		feeder.finish();
	}
	
	
}
