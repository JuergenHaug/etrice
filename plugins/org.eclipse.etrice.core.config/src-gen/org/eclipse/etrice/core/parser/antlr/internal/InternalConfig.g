/*
* generated by Xtext
*/
grammar InternalConfig;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.etrice.core.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.etrice.core.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.etrice.core.services.ConfigGrammarAccess;

}

@parser::members {

 	private ConfigGrammarAccess grammarAccess;
 	
    public InternalConfigParser(TokenStream input, ConfigGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "ConfigModel";	
   	}
   	
   	@Override
   	protected ConfigGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleConfigModel
entryRuleConfigModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConfigModelRule()); }
	 iv_ruleConfigModel=ruleConfigModel 
	 { $current=$iv_ruleConfigModel.current; } 
	 EOF 
;

// Rule ConfigModel
ruleConfigModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConfigModelAccess().getActorClassConfigsActorClassConfigParserRuleCall_0_0()); 
	    }
		lv_actorClassConfigs_0_0=ruleActorClassConfig		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigModelRule());
	        }
       		add(
       			$current, 
       			"actorClassConfigs",
        		lv_actorClassConfigs_0_0, 
        		"ActorClassConfig");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigModelAccess().getActorInstanceConfigsActorInstanceConfigParserRuleCall_1_0()); 
	    }
		lv_actorInstanceConfigs_1_0=ruleActorInstanceConfig		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigModelRule());
	        }
       		add(
       			$current, 
       			"actorInstanceConfigs",
        		lv_actorInstanceConfigs_1_0, 
        		"ActorInstanceConfig");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleActorClassConfig
entryRuleActorClassConfig returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActorClassConfigRule()); }
	 iv_ruleActorClassConfig=ruleActorClassConfig 
	 { $current=$iv_ruleActorClassConfig.current; } 
	 EOF 
;

// Rule ActorClassConfig
ruleActorClassConfig returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ActorClassConfig' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getActorClassConfigAccess().getActorClassConfigKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getActorClassConfigRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getActorClassConfigAccess().getActorClassActorClassCrossReference_1_0()); 
	}

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getActorClassConfigAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getActorClassConfigAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleActorInstanceConfig
entryRuleActorInstanceConfig returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getActorInstanceConfigRule()); } 
	 iv_ruleActorInstanceConfig=ruleActorInstanceConfig 
	 { $current=$iv_ruleActorInstanceConfig.current.getText(); }  
	 EOF 
;

// Rule ActorInstanceConfig
ruleActorInstanceConfig returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='ActorInstanceConfig' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getActorInstanceConfigAccess().getActorInstanceConfigKeyword_0()); 
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getActorInstanceConfigAccess().getLeftCurlyBracketKeyword_1()); 
    }

	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getActorInstanceConfigAccess().getRightCurlyBracketKeyword_2()); 
    }
)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


