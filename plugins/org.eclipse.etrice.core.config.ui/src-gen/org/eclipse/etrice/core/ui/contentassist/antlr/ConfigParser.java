/*
* generated by Xtext
*/
package org.eclipse.etrice.core.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.etrice.core.services.ConfigGrammarAccess;

public class ConfigParser extends AbstractContentAssistParser {
	
	@Inject
	private ConfigGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.etrice.core.ui.contentassist.antlr.internal.InternalConfigParser createParser() {
		org.eclipse.etrice.core.ui.contentassist.antlr.internal.InternalConfigParser result = new org.eclipse.etrice.core.ui.contentassist.antlr.internal.InternalConfigParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getConfigElementAccess().getAlternatives(), "rule__ConfigElement__Alternatives");
					put(grammarAccess.getAttrConfigAccess().getAlternatives(), "rule__AttrConfig__Alternatives");
					put(grammarAccess.getImportAccess().getAlternatives_1(), "rule__Import__Alternatives_1");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getBooleanLiteralAccess().getAlternatives_1(), "rule__BooleanLiteral__Alternatives_1");
					put(grammarAccess.getNumberLiteralAccess().getAlternatives(), "rule__NumberLiteral__Alternatives");
					put(grammarAccess.getIntegerAccess().getAlternatives(), "rule__Integer__Alternatives");
					put(grammarAccess.getSignedIntegerAccess().getAlternatives_0(), "rule__SignedInteger__Alternatives_0");
					put(grammarAccess.getRealAccess().getAlternatives(), "rule__Real__Alternatives");
					put(grammarAccess.getDecimalAccess().getAlternatives_0(), "rule__Decimal__Alternatives_0");
					put(grammarAccess.getDotDecimalAccess().getAlternatives_0(), "rule__DotDecimal__Alternatives_0");
					put(grammarAccess.getDecimalDotAccess().getAlternatives_0(), "rule__DecimalDot__Alternatives_0");
					put(grammarAccess.getDecimalExpAccess().getAlternatives_0(), "rule__DecimalExp__Alternatives_0");
					put(grammarAccess.getDecimalExpAccess().getAlternatives_5(), "rule__DecimalExp__Alternatives_5");
					put(grammarAccess.getConfigModelAccess().getGroup(), "rule__ConfigModel__Group__0");
					put(grammarAccess.getActorClassConfigAccess().getGroup(), "rule__ActorClassConfig__Group__0");
					put(grammarAccess.getActorInstanceConfigAccess().getGroup(), "rule__ActorInstanceConfig__Group__0");
					put(grammarAccess.getAttrClassConfigAccess().getGroup(), "rule__AttrClassConfig__Group__0");
					put(grammarAccess.getAttrClassConfigAccess().getGroup_2(), "rule__AttrClassConfig__Group_2__0");
					put(grammarAccess.getAttrClassConfigAccess().getGroup_3(), "rule__AttrClassConfig__Group_3__0");
					put(grammarAccess.getAttrClassConfigAccess().getGroup_3_1_0(), "rule__AttrClassConfig__Group_3_1_0__0");
					put(grammarAccess.getAttrClassConfigAccess().getGroup_3_1_1(), "rule__AttrClassConfig__Group_3_1_1__0");
					put(grammarAccess.getAttrInstanceConfigAccess().getGroup(), "rule__AttrInstanceConfig__Group__0");
					put(grammarAccess.getAttrInstanceConfigAccess().getGroup_2(), "rule__AttrInstanceConfig__Group_2__0");
					put(grammarAccess.getRefPathAccess().getGroup(), "rule__RefPath__Group__0");
					put(grammarAccess.getRefPathAccess().getGroup_1(), "rule__RefPath__Group_1__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getImportAccess().getGroup_1_0(), "rule__Import__Group_1_0__0");
					put(grammarAccess.getImportedFQNAccess().getGroup(), "rule__ImportedFQN__Group__0");
					put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
					put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
					put(grammarAccess.getBooleanLiteralAccess().getGroup(), "rule__BooleanLiteral__Group__0");
					put(grammarAccess.getRealLiteralAccess().getGroup(), "rule__RealLiteral__Group__0");
					put(grammarAccess.getIntLiteralAccess().getGroup(), "rule__IntLiteral__Group__0");
					put(grammarAccess.getStringLiteralAccess().getGroup(), "rule__StringLiteral__Group__0");
					put(grammarAccess.getSignedIntegerAccess().getGroup(), "rule__SignedInteger__Group__0");
					put(grammarAccess.getDecimalAccess().getGroup(), "rule__Decimal__Group__0");
					put(grammarAccess.getDotDecimalAccess().getGroup(), "rule__DotDecimal__Group__0");
					put(grammarAccess.getDecimalDotAccess().getGroup(), "rule__DecimalDot__Group__0");
					put(grammarAccess.getDecimalExpAccess().getGroup(), "rule__DecimalExp__Group__0");
					put(grammarAccess.getConfigModelAccess().getImportsAssignment_0(), "rule__ConfigModel__ImportsAssignment_0");
					put(grammarAccess.getConfigModelAccess().getConfigElementsAssignment_1(), "rule__ConfigModel__ConfigElementsAssignment_1");
					put(grammarAccess.getActorClassConfigAccess().getActorAssignment_1(), "rule__ActorClassConfig__ActorAssignment_1");
					put(grammarAccess.getActorClassConfigAccess().getAttributesAssignment_3(), "rule__ActorClassConfig__AttributesAssignment_3");
					put(grammarAccess.getActorInstanceConfigAccess().getRootAssignment_1(), "rule__ActorInstanceConfig__RootAssignment_1");
					put(grammarAccess.getActorInstanceConfigAccess().getPathAssignment_3(), "rule__ActorInstanceConfig__PathAssignment_3");
					put(grammarAccess.getActorInstanceConfigAccess().getAttributesAssignment_5(), "rule__ActorInstanceConfig__AttributesAssignment_5");
					put(grammarAccess.getAttrClassConfigAccess().getAttributeAssignment_1(), "rule__AttrClassConfig__AttributeAssignment_1");
					put(grammarAccess.getAttrClassConfigAccess().getValueAssignment_2_1(), "rule__AttrClassConfig__ValueAssignment_2_1");
					put(grammarAccess.getAttrClassConfigAccess().getMinAssignment_3_1_0_2(), "rule__AttrClassConfig__MinAssignment_3_1_0_2");
					put(grammarAccess.getAttrClassConfigAccess().getMaxAssignment_3_1_1_2(), "rule__AttrClassConfig__MaxAssignment_3_1_1_2");
					put(grammarAccess.getAttrInstanceConfigAccess().getAttributeAssignment_1(), "rule__AttrInstanceConfig__AttributeAssignment_1");
					put(grammarAccess.getAttrInstanceConfigAccess().getValueAssignment_2_1(), "rule__AttrInstanceConfig__ValueAssignment_2_1");
					put(grammarAccess.getRefPathAccess().getRefsAssignment_0(), "rule__RefPath__RefsAssignment_0");
					put(grammarAccess.getRefPathAccess().getRefsAssignment_1_1(), "rule__RefPath__RefsAssignment_1_1");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1_0_0(), "rule__Import__ImportedNamespaceAssignment_1_0_0");
					put(grammarAccess.getImportAccess().getImportURIAssignment_2(), "rule__Import__ImportURIAssignment_2");
					put(grammarAccess.getBooleanLiteralAccess().getIsTrueAssignment_1_1(), "rule__BooleanLiteral__IsTrueAssignment_1_1");
					put(grammarAccess.getRealLiteralAccess().getValueAssignment_1(), "rule__RealLiteral__ValueAssignment_1");
					put(grammarAccess.getIntLiteralAccess().getValueAssignment_1(), "rule__IntLiteral__ValueAssignment_1");
					put(grammarAccess.getStringLiteralAccess().getValueAssignment_1(), "rule__StringLiteral__ValueAssignment_1");
					put(grammarAccess.getAttrClassConfigAccess().getUnorderedGroup_3_1(), "rule__AttrClassConfig__UnorderedGroup_3_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.etrice.core.ui.contentassist.antlr.internal.InternalConfigParser typedParser = (org.eclipse.etrice.core.ui.contentassist.antlr.internal.InternalConfigParser) parser;
			typedParser.entryRuleConfigModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ConfigGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ConfigGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
