/*
* generated by Xtext
*/
grammar InternalConfig;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.eclipse.etrice.core.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.etrice.core.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipse.etrice.core.services.ConfigGrammarAccess;

}

@parser::members {
 
 	private ConfigGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ConfigGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleConfigModel
entryRuleConfigModel 
:
{ before(grammarAccess.getConfigModelRule()); }
	 ruleConfigModel
{ after(grammarAccess.getConfigModelRule()); } 
	 EOF 
;

// Rule ConfigModel
ruleConfigModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConfigModelAccess().getGroup()); }
(rule__ConfigModel__Group__0)
{ after(grammarAccess.getConfigModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleActorClassConfig
entryRuleActorClassConfig 
:
{ before(grammarAccess.getActorClassConfigRule()); }
	 ruleActorClassConfig
{ after(grammarAccess.getActorClassConfigRule()); } 
	 EOF 
;

// Rule ActorClassConfig
ruleActorClassConfig
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActorClassConfigAccess().getGroup()); }
(rule__ActorClassConfig__Group__0)
{ after(grammarAccess.getActorClassConfigAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleActorInstanceConfig
entryRuleActorInstanceConfig 
:
{ before(grammarAccess.getActorInstanceConfigRule()); }
	 ruleActorInstanceConfig
{ after(grammarAccess.getActorInstanceConfigRule()); } 
	 EOF 
;

// Rule ActorInstanceConfig
ruleActorInstanceConfig
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActorInstanceConfigAccess().getGroup()); }
(rule__ActorInstanceConfig__Group__0)
{ after(grammarAccess.getActorInstanceConfigAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConfigModel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfigModel__Group__0__Impl
	rule__ConfigModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigModel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigModelAccess().getActorClassConfigsAssignment_0()); }
(rule__ConfigModel__ActorClassConfigsAssignment_0)*
{ after(grammarAccess.getConfigModelAccess().getActorClassConfigsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConfigModel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConfigModel__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigModel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigModelAccess().getActorInstanceConfigsAssignment_1()); }
(rule__ConfigModel__ActorInstanceConfigsAssignment_1)*
{ after(grammarAccess.getConfigModelAccess().getActorInstanceConfigsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ActorClassConfig__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActorClassConfig__Group__0__Impl
	rule__ActorClassConfig__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActorClassConfig__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorClassConfigAccess().getActorClassConfigKeyword_0()); }

	'ActorClassConfig' 

{ after(grammarAccess.getActorClassConfigAccess().getActorClassConfigKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActorClassConfig__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActorClassConfig__Group__1__Impl
	rule__ActorClassConfig__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ActorClassConfig__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorClassConfigAccess().getActorClassAssignment_1()); }
(rule__ActorClassConfig__ActorClassAssignment_1)
{ after(grammarAccess.getActorClassConfigAccess().getActorClassAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActorClassConfig__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActorClassConfig__Group__2__Impl
	rule__ActorClassConfig__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ActorClassConfig__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorClassConfigAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getActorClassConfigAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActorClassConfig__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActorClassConfig__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActorClassConfig__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorClassConfigAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getActorClassConfigAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ActorInstanceConfig__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActorInstanceConfig__Group__0__Impl
	rule__ActorInstanceConfig__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActorInstanceConfig__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorInstanceConfigAccess().getActorInstanceConfigKeyword_0()); }

	'ActorInstanceConfig' 

{ after(grammarAccess.getActorInstanceConfigAccess().getActorInstanceConfigKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActorInstanceConfig__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActorInstanceConfig__Group__1__Impl
	rule__ActorInstanceConfig__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ActorInstanceConfig__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorInstanceConfigAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getActorInstanceConfigAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActorInstanceConfig__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActorInstanceConfig__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActorInstanceConfig__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorInstanceConfigAccess().getRightCurlyBracketKeyword_2()); }

	'}' 

{ after(grammarAccess.getActorInstanceConfigAccess().getRightCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__ConfigModel__ActorClassConfigsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigModelAccess().getActorClassConfigsActorClassConfigParserRuleCall_0_0()); }
	ruleActorClassConfig{ after(grammarAccess.getConfigModelAccess().getActorClassConfigsActorClassConfigParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConfigModel__ActorInstanceConfigsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigModelAccess().getActorInstanceConfigsActorInstanceConfigParserRuleCall_1_0()); }
	ruleActorInstanceConfig{ after(grammarAccess.getConfigModelAccess().getActorInstanceConfigsActorInstanceConfigParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ActorClassConfig__ActorClassAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorClassConfigAccess().getActorClassActorClassCrossReference_1_0()); }
(
{ before(grammarAccess.getActorClassConfigAccess().getActorClassActorClassIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getActorClassConfigAccess().getActorClassActorClassIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getActorClassConfigAccess().getActorClassActorClassCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


