/**
 * generated by Xtext
 */
package org.eclipse.etrice.core.fsm.ui.quickfix;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.etrice.core.common.converter.BaseConverterService;
import org.eclipse.etrice.core.common.converter.CCStringConverter;
import org.eclipse.etrice.core.fsm.fSM.DetailCode;
import org.eclipse.etrice.core.fsm.validation.FSMJavaValidator;
import org.eclipse.xtext.formatting.ILineSeparatorInformation;
import org.eclipse.xtext.formatting.IWhitespaceInformationProvider;
import org.eclipse.xtext.nodemodel.ICompositeNode;
import org.eclipse.xtext.nodemodel.util.NodeModelUtils;
import org.eclipse.xtext.ui.editor.model.IXtextDocument;
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext;
import org.eclipse.xtext.ui.editor.model.edit.ISemanticModification;
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider;
import org.eclipse.xtext.ui.editor.quickfix.Fix;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;
import org.eclipse.xtext.validation.Issue;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

/**
 * Custom quickfixes.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#quickfixes
 */
@SuppressWarnings("all")
public class FSMQuickfixProvider extends DefaultQuickfixProvider {
  @Inject
  private BaseConverterService converterService;
  
  @Inject
  private IWhitespaceInformationProvider whitespaceProvider;
  
  @Fix(FSMJavaValidator.PLAIN_STRING_DETAILCODE)
  public void fixMultiLineDetailCode(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final ISemanticModification _function = new ISemanticModification() {
      @Override
      public void apply(final EObject element, final IModificationContext context) throws Exception {
        final Procedure1<DetailCode> _function = new Procedure1<DetailCode>() {
          @Override
          public void apply(final DetailCode it) {
            EList<String> _lines = it.getLines();
            Resource _eResource = it.eResource();
            URI _uRI = _eResource.getURI();
            ILineSeparatorInformation _lineSeparatorInformation = FSMQuickfixProvider.this.whitespaceProvider.getLineSeparatorInformation(_uRI);
            String _lineSeparator = _lineSeparatorInformation.getLineSeparator();
            final String ccString = IterableExtensions.join(_lines, _lineSeparator);
            ICompositeNode _findActualNodeFor = NodeModelUtils.findActualNodeFor(it);
            final Procedure1<ICompositeNode> _function = new Procedure1<ICompositeNode>() {
              @Override
              public void apply(final ICompositeNode it) {
                try {
                  IXtextDocument _xtextDocument = context.getXtextDocument();
                  int _offset = it.getOffset();
                  int _length = it.getLength();
                  CCStringConverter _cC_StringConverter = FSMQuickfixProvider.this.converterService.getCC_StringConverter();
                  String _addDelim = _cC_StringConverter.addDelim(ccString);
                  _xtextDocument.replace(_offset, _length, _addDelim);
                } catch (Throwable _e) {
                  throw Exceptions.sneakyThrow(_e);
                }
              }
            };
            ObjectExtensions.<ICompositeNode>operator_doubleArrow(_findActualNodeFor, _function);
          }
        };
        ObjectExtensions.<DetailCode>operator_doubleArrow(
          ((DetailCode) element), _function);
      }
    };
    acceptor.accept(issue, "Convert to smart string", "", "correction_change.gif", _function);
  }
}
