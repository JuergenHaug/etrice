/**
 * @author generated by eTrice
 *
 * Header File of ActorClass TrafficLight
 * 
 */

#ifndef _TRAFFICLIGHT_EXAMPLE_TRAFFICLIGHT_H_
#define _TRAFFICLIGHT_EXAMPLE_TRAFFICLIGHT_H_

#include "etDatatypes.h"
#include "messaging/etMessage.h"

#include "room/basic/service/tcp/DTcpControl.h"
#include "room/basic/service/tcp/PTcpControl.h"
#include "room/basic/service/tcp/PTcpPayload.h"
#include "room/basic/service/timing/PTimer.h"
#include "trafficlight/example/PTrafficLight.h"


typedef struct TrafficLight TrafficLight;

/* const part of ActorClass (ROM) */
typedef struct TrafficLight_const {
	/* simple ports */
	const PTrafficLightPort controller;
	const PTcpControlConjPort tcpCtrl;
	const PTcpPayloadConjPort tcpPayload;
	
	/* data receive ports */

	/* saps */
	const PTimerConjPort timeout;
	const PTimerConjPort blinkerTimeout;
	
	/* replicated ports */
	
	/* services */
} TrafficLight_const;


/* constant for state machine data */
#define TRAFFICLIGHT_HISTORY_SIZE 3

/* variable part of ActorClass (RAM) */
struct TrafficLight {
	const TrafficLight_const* const constData;
	
	/* data send ports */
	
	/*--------------------- attributes ---------------------*/
	DTcpControl ipConfig;
	
	
	/* state machine variables */
	etInt16 state;
	etInt16 history[TRAFFICLIGHT_HISTORY_SIZE];
};

void TrafficLight_init(TrafficLight* self);

void TrafficLight_receiveMessage(void* self, void* ifitem, const etMessage* msg);


/*--------------------- operations ---------------------*/
void TrafficLight_sendString(TrafficLight* self, charPtr text);


#endif /* _TRAFFICLIGHT_EXAMPLE_TRAFFICLIGHT_H_ */

