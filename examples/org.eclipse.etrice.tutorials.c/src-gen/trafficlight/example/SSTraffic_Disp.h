/**
 * @author generated by eTrice
 *
 * Dispatcher File of SubSystemClass SSTraffic
 * - one generated dispatcher for each MessageService (Thread)
 */

#include "messaging/etMessageReceiver.h"
#include "debugging/etLogger.h"
#include "debugging/etMSCLogger.h"

static void MsgDispatcher_Thread1_receiveMessage(const etMessage* msg){
	ET_MSC_LOGGER_SYNC_ENTRY("MsgDispatcher_Thread1", "receiveMessage")
	switch(msg->address){
	
		/* interface items of /LSTraffic/main/application */
		/* interface items of /LSTraffic/main/application/light1 */
		case 103:
		TrafficLight_receiveMessage((void*)&_LSTraffic_main_application_light1,(etPort*)&_LSTraffic_main_application_light1_const.controller, msg);
		break;
		case 104:
		TrafficLight_receiveMessage((void*)&_LSTraffic_main_application_light1,(etPort*)&_LSTraffic_main_application_light1_const.tcpCtrl, msg);
		break;
		case 105:
		TrafficLight_receiveMessage((void*)&_LSTraffic_main_application_light1,(etPort*)&_LSTraffic_main_application_light1_const.tcpPayload, msg);
		break;
		case 106:
		switch (msg->evtID){
		case PTimer_OUT_timeout:
			PTimerConjPort_timeout_receiveHandler((etPort *)&_LSTraffic_main_application_light1_const.timeout,msg,(void*)&_LSTraffic_main_application_light1,TrafficLight_receiveMessage);
		break;
		default: TrafficLight_receiveMessage((void*)&_LSTraffic_main_application_light1,(etPort*)&_LSTraffic_main_application_light1_const.timeout, msg);
		break;
		}
		break;
		case 107:
		switch (msg->evtID){
		case PTimer_OUT_timeout:
			PTimerConjPort_timeout_receiveHandler((etPort *)&_LSTraffic_main_application_light1_const.blinkerTimeout,msg,(void*)&_LSTraffic_main_application_light1,TrafficLight_receiveMessage);
		break;
		default: TrafficLight_receiveMessage((void*)&_LSTraffic_main_application_light1,(etPort*)&_LSTraffic_main_application_light1_const.blinkerTimeout, msg);
		break;
		}
		break;
		/* interface items of /LSTraffic/main/application/light1/trafficLightSocket */
		case 109:
		ATcpClient_receiveMessage((void*)&_LSTraffic_main_application_light1_trafficLightSocket,(etPort*)&_LSTraffic_main_application_light1_trafficLightSocket_const.ControlPort, msg);
		break;
		case 110:
		ATcpClient_receiveMessage((void*)&_LSTraffic_main_application_light1_trafficLightSocket,(etPort*)&_LSTraffic_main_application_light1_trafficLightSocket_const.PayloadPort, msg);
		break;
		/* interface items of /LSTraffic/main/application/light2 */
		case 112:
		TrafficLight_receiveMessage((void*)&_LSTraffic_main_application_light2,(etPort*)&_LSTraffic_main_application_light2_const.controller, msg);
		break;
		case 113:
		TrafficLight_receiveMessage((void*)&_LSTraffic_main_application_light2,(etPort*)&_LSTraffic_main_application_light2_const.tcpCtrl, msg);
		break;
		case 114:
		TrafficLight_receiveMessage((void*)&_LSTraffic_main_application_light2,(etPort*)&_LSTraffic_main_application_light2_const.tcpPayload, msg);
		break;
		case 115:
		switch (msg->evtID){
		case PTimer_OUT_timeout:
			PTimerConjPort_timeout_receiveHandler((etPort *)&_LSTraffic_main_application_light2_const.timeout,msg,(void*)&_LSTraffic_main_application_light2,TrafficLight_receiveMessage);
		break;
		default: TrafficLight_receiveMessage((void*)&_LSTraffic_main_application_light2,(etPort*)&_LSTraffic_main_application_light2_const.timeout, msg);
		break;
		}
		break;
		case 116:
		switch (msg->evtID){
		case PTimer_OUT_timeout:
			PTimerConjPort_timeout_receiveHandler((etPort *)&_LSTraffic_main_application_light2_const.blinkerTimeout,msg,(void*)&_LSTraffic_main_application_light2,TrafficLight_receiveMessage);
		break;
		default: TrafficLight_receiveMessage((void*)&_LSTraffic_main_application_light2,(etPort*)&_LSTraffic_main_application_light2_const.blinkerTimeout, msg);
		break;
		}
		break;
		/* interface items of /LSTraffic/main/application/light2/trafficLightSocket */
		case 118:
		ATcpClient_receiveMessage((void*)&_LSTraffic_main_application_light2_trafficLightSocket,(etPort*)&_LSTraffic_main_application_light2_trafficLightSocket_const.ControlPort, msg);
		break;
		case 119:
		ATcpClient_receiveMessage((void*)&_LSTraffic_main_application_light2_trafficLightSocket,(etPort*)&_LSTraffic_main_application_light2_trafficLightSocket_const.PayloadPort, msg);
		break;
		/* interface items of /LSTraffic/main/application/controller */
		case 121:
		TrafficController_receiveMessage((void*)&_LSTraffic_main_application_controller,(etPort*)&_LSTraffic_main_application_controller_const.light1, msg);
		break;
		case 122:
		TrafficController_receiveMessage((void*)&_LSTraffic_main_application_controller,(etPort*)&_LSTraffic_main_application_controller_const.light2, msg);
		break;
		case 123:
		switch (msg->evtID){
		case PTimer_OUT_timeout:
			PTimerConjPort_timeout_receiveHandler((etPort *)&_LSTraffic_main_application_controller_const.timeout,msg,(void*)&_LSTraffic_main_application_controller,TrafficController_receiveMessage);
		break;
		default: TrafficController_receiveMessage((void*)&_LSTraffic_main_application_controller,(etPort*)&_LSTraffic_main_application_controller_const.timeout, msg);
		break;
		}
		break;
		/* interface items of /LSTraffic/main/TimingService */
		case 125:
		ATimingService_receiveMessage((void*)&_LSTraffic_main_TimingService,(etPort*)&_LSTraffic_main_TimingService_const.timer.ports[0], msg);
		break;
		case 126:
		ATimingService_receiveMessage((void*)&_LSTraffic_main_TimingService,(etPort*)&_LSTraffic_main_TimingService_const.timer.ports[1], msg);
		break;
		case 127:
		ATimingService_receiveMessage((void*)&_LSTraffic_main_TimingService,(etPort*)&_LSTraffic_main_TimingService_const.timer.ports[2], msg);
		break;
		case 128:
		ATimingService_receiveMessage((void*)&_LSTraffic_main_TimingService,(etPort*)&_LSTraffic_main_TimingService_const.timer.ports[3], msg);
		break;
		case 129:
		ATimingService_receiveMessage((void*)&_LSTraffic_main_TimingService,(etPort*)&_LSTraffic_main_TimingService_const.timer.ports[4], msg);
		break;

		default:
			etLogger_logErrorF("MessageService_Thread1_receiveMessage: address %d does not exist ", msg->address);
		break;
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
