RoomModel trafficlight.connector {

	import room.basic.service.tcp.* from "../../../org.eclipse.etrice.modellib.java/model/TcpService.room"

	import room.basic.types.* from "../../../org.eclipse.etrice.modellib.java/model/Types.room"

	ActorClass TrafficLightInterface {
		Interface {
			conjugated Port payload: PTcpPayload
			conjugated Port control: PTcpControl
			Port fct: PTrafficLightInterface
		}
		Structure {
			external Port payload
			external Port control
			external Port fct
			Attribute tcpConfig : DTcpControl
		}
		Behavior {
			Operation sendString(data: string) {
				"payload.send(new DTcpPayload(1, data.length(), data.getBytes()));"
			}
			
			StateMachine {
				Transition init: initial -> Uninitialized { }
				Transition tr0: Uninitialized -> Initializing {
					triggers {
						<initialize: fct>
					}
					action {
						"control.open(tcpConfig);"
					}
				}
				Transition tr1: Initializing -> Running {
					triggers {
						<established: control>
					}
					action {
						"fct.initialized();"
					}
				}
				Transition tr2: Running -> Running {
					triggers {
						<pedRed: fct>
					}
					action {
						"sendString(new String(\"pedLights=red\\n\"));"
					}
				}
				Transition tr3: Running -> Running {
					triggers {
						<pedOff: fct>
					}
					action {
						"sendString(new String(\"pedLights=off\\n\"));"
					}
				}
				Transition tr4: Running -> Running {
					triggers {
						<pedGreen: fct>
					}
					action {
						"sendString(new String(\"pedLights=green\\n\"));"
					}
				}
				Transition tr5: Running -> Running {
					triggers {
						<carRed: fct>
					}
					action {
						"sendString(new String(\"carLights=red\\n\"));"
					}
				}
				Transition tr6: Running -> Running {
					triggers {
						<carYellow: fct>
					}
					action {
						"sendString(new String(\"carLights=yellow\\n\"));"
					}
				}
				Transition tr7: Running -> Running {
					triggers {
						<carGreen: fct>
					}
					action {
						"sendString(new String(\"carLights=green\\n\"));"
					}
				}
				Transition tr8: Running -> Running {
					triggers {
						<carOff: fct>
					}
					action {
						"sendString(new String(\"carLights=off\\n\"));"
					}
				}
				Transition tr9: Running -> Running {
					triggers {
						<receive: payload>
					}
					action {
						"fct.request();"
					}
				}
				State Uninitialized
				State Initializing
				State Running
			}
		}
	}

	ActorClass MqttWrapperActor {
		Interface {
			Port fct: PMqtt
		}
		Structure {
			
			usercode1 {"import de.protos.etrice.automation.m2m.mqtt.*;"}
			external Port fct
			Attribute connectionMQTT : MqttWrapper
			Attribute open : boolean
		}
		Behavior {
			Operation ~MqttWrapperActor(){
				"connectionMQTT.disconnect();"
			}
			
			StateMachine {
				Transition init: initial -> NotInitialized { }
				Transition tr0: NotInitialized -> cp cp0 {
					triggers {
						<connect: fct>
					}
					action {
						"open=false;"
						"connectionMQTT.connect(config.url, config.id);"
						"//connectionMQTT.connect(new DMqttConfig(\"tcp://m2m.eclipse.org:1883\", \"eTrice-Paho-Tester\"));"
						"open=true;"
					}
				}
				Transition tr1: cp cp0 -> NotInitialized
				Transition tr2: cp cp0 -> Connected {
					cond {
						"open==true"
					}
					action {
						"fct.connected();"
					}
				}
				Transition tr3: Connected -> Connected {
					triggers {
						<publish: fct>
					}
					action {
						"connectionMQTT.publishString(message.topic, message.payload, message.retained, message.qos);"
					}
				}
				ChoicePoint cp0
				State NotInitialized
				State Connected
			}
		}
	}

	ProtocolClass PTrafficLightInterface {
		incoming {
			Message initialize()
			Message pedRed()
			Message pedGreen()
			Message pedOff()
			Message carRed()
			Message carYellow()
			Message carGreen()
			Message carOff()
		}
		outgoing {
			Message initialized()
			Message request()
		}
	}

	ProtocolClass PMqtt {
		incoming {
			Message connect(config: DMqttConfig)
			Message publish(message: DMqttMessage)
		}
		outgoing  {
			Message connected ()
		}
	}

	DataClass DMqttConfig {
			Attribute url : string
			Attribute id : string
	}
	
	DataClass DMqttMessage {
		Attribute topic : string
		Attribute payload : string
		Attribute retained : boolean
		Attribute qos : int32
	}

	ExternalType MqttWrapper -> MqttWrapper
}