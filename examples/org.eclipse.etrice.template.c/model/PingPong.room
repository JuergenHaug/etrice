RoomModel PingPong_Model {
	
	import room.basic.types.* from "../../org.eclipse.etrice.modellib.c/model/Types.room"
	import room.basic.service.timing.* from "../../org.eclipse.etrice.modellib.c/model/TimingService.room"

	LogicalSystem LogSys {
		SubSystemRef subSystemRef:SubSysClass 
	}
	
	SubSystemClass SubSysClass {
		ActorRef rootActor: PingPongTop
		ActorRef timingService: ATimingService
		LayerConnection ref rootActor satisfied_by timingService.timer
		
		LogicalThread defaultThread
	}
	
	ActorClass PingPongTop {
		Structure {
			ActorRef sender: Sender
			ActorRef receiver: Receiver
			Binding receiver.sender and sender.receiver
		}
		Behavior { }
	}
	
	ActorClass Sender {
		Interface {
			conjugated Port receiver: PingPongProtocol
		}
		Structure {
			external Port receiver
		}
		Behavior {
			StateMachine {
				Transition init: initial -> SendingPing { }
				Transition tr0: SendingPing -> ReceivedPong {
					triggers {
						<pong: receiver>
					}
				}
				State SendingPing {
					entry {
						"receiver.ping();"
					}
				}
				State ReceivedPong
			}
		}
	}
	
	ActorClass Receiver {
		Interface {
			Port sender: PingPongProtocol
		}
		Structure {
			external Port sender
			SAP timing : PTimer
		}
		Behavior {
			StateMachine {
				Transition init: initial -> WaitingForPing { }
				Transition tr0: WaitingForPing -> WaitingForAWhile {
					triggers {
						<ping: sender>
					}
				}
				Transition tr1: WaitingForAWhile -> SentPong {
					triggers {
						<timeout: timing>
					}
				}
				State WaitingForPing
				State SentPong {
					entry {
						"sender.pong();"
					}
				}
				State WaitingForAWhile {
					entry {
						"timing.startTimeout(1000);"
					}
				}
			}
		}
	}
	
	ProtocolClass PingPongProtocol {
		incoming {
			Message ping()
		}
		outgoing {
			Message pong()
		}
	} 
	
}