/**
 * @author generated by eTrice
 *
 * Dispatcher File of Node node1 with SubSystem sys1
 * - one generated dispatcher for each MessageService (Thread)
 */

#include "messaging/etMessageReceiver.h"
#include "debugging/etLogger.h"
#include "debugging/etMSCLogger.h"

static void MsgDispatcher_PhysicalThread1_receiveMessage(const etMessage* msg){
	ET_MSC_LOGGER_SYNC_ENTRY("MsgDispatcher_PhysicalThread1", "receiveMessage")
	switch(msg->address){
	
		/* interface items of /LS/sys1/Receiver */
		case 104:
		Receiver_receiveMessage((void*)&_LS_sys1_Receiver,(etPort*)&_LS_sys1_Receiver_const.dataIn, msg);
		break;
		
		default:
			etLogger_logErrorF("MessageService_PhysicalThread1_receiveMessage: address %d does not exist ", msg->address);
		break;
	}
	ET_MSC_LOGGER_SYNC_EXIT
}

static void MsgDispatcher_PhysicalThread2_receiveMessage(const etMessage* msg){
	ET_MSC_LOGGER_SYNC_ENTRY("MsgDispatcher_PhysicalThread2", "receiveMessage")
	switch(msg->address){
	
		/* interface items of /LS/sys1/Sender */
		case 102:
		Sender_receiveMessage((void*)&_LS_sys1_Sender,(etPort*)&_LS_sys1_Sender_const.dataOut, msg);
		break;
		
		default:
			etLogger_logErrorF("MessageService_PhysicalThread2_receiveMessage: address %d does not exist ", msg->address);
		break;
	}
	ET_MSC_LOGGER_SYNC_EXIT
}
