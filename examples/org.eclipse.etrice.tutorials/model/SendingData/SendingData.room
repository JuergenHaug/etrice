RoomModel SendingData {

	LogicalSystem SendingData_LogSystem {
		SubSystemRef SendingDataAppl: SendingData_SubSystem
	}

	SubSystemClass SendingData_SubSystem {
		ActorRef SendigDataTopRef: SendingDataTop
	}

	ActorClass SendingDataTop {
		Structure {
			ActorRef ref0: MrPing
			ActorRef ref1: MrPong
			Binding ref0.PingPongPort and ref1.PingPongPort
		}
		Behavior { }
	}

	ActorClass MrPing {
		Interface {
			conjugated Port PingPongPort: PingPongProtocol
		}
		Structure {
			external Port PingPongPort
		}
		Behavior {
						
			Operation printData(d: DemoData) : void {
						"System.out.printf(\"d.int32Val: %d\\n\",d.int32Val);"
						"System.out.printf(\"d.float64Val: %f\\n\",d.float64Val);"
						"System.out.printf(\"d.int8Array: \");"
						"for(int i = 0; i<d.int8Array.length; i++) {"
						"System.out.printf(\"%d \",d.int8Array[i]);}"
						"System.out.printf(\"\\nd.stringVal: %s\\n\",d.stringVal);"
					}
					
			StateMachine {
				Transition wait2: waitForPong -> waitForPong {
					triggers {
						<pong: PingPongPort>
					}
					action {
						"printData(data);"
					}
				}
				Transition wait1: waitForPongSimple -> waitForPongSimple {
					triggers {
						<pongSimple: PingPongPort guard {
							"data < 10"
						}>
					}
					action {
						"// keep in mind that MrPong increments"
						"PingPongPort.pingSimple(data);"
						"System.out.printf(\"data: %d\\n\",data);"
					}
				}
				Transition next: waitForPongSimple -> waitForPong {
					triggers {
						<pongSimple: PingPongPort>
					}
					action {
						"System.out.printf(\"data: %d\\n\",data);"
						""
						"DemoData d = new DemoData();"
						"// send the default values"
						"PingPongPort.ping(d);"
						"d.int32Val=815;"
						"for (int i = 0; i<d.int8Array.length;i++){"
						"\td.int8Array[i]=(byte)(i+100);"
						"\t}"
						"d.stringVal=\"some contents\";"
						"d.float64Val=3.141234;"
						"PingPongPort.ping(d);"
					}
				}
				Transition init0: initial -> waitForPongSimple {
					action {
						"PingPongPort.pingSimple(0);"
					}
				}
				State waitForPong
				State waitForPongSimple
			}
		}
	}

	ActorClass MrPong {
		Interface {
			Port PingPongPort: PingPongProtocol
		}
		Structure {
			external Port PingPongPort
		}
		Behavior {
			StateMachine {
				Transition init: initial -> looping { }
				Transition tr0: looping -> looping {
					triggers {
						<ping: PingPongPort>
					}
					action {
						"PingPongPort.pong(data);"
					}
				}
				Transition tr1: looping -> looping {
					triggers {
						<pingSimple: PingPongPort>
					}
					action {
						"PingPongPort.pongSimple(data+1);"
					}
				}
				State looping
			}
		}
	}

	ProtocolClass PingPongProtocol {
		incoming {
			Message ping(data: DemoData)
			Message pingSimple(data: int32)
		}
		outgoing {
			Message pong(data: DemoData)
			Message pongSimple(data: int32)
		}
	}

	DataClass DemoData {
		Attribute int32Val: int32 = "4711"
		Attribute int8Array [ 10 ]: int8 = "{1,2,3,4,5,6,7,8,9,10}"
		Attribute float64Val: float64 = "0.0"
		Attribute stringVal: string = "\"empty\""
	}
}