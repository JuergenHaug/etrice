RoomModel PingPong {

	import room.basic.service.timing.* from "../../../org.eclipse.etrice.modellib/models/TimingService.room"

	LogicalSystem System_PingPong {
		SubSystemRef subsystem: SubSystem_PingPong
	}

	SubSystemClass SubSystem_PingPong {
		ActorRef application: PingPongTop
		ActorRef services: ATimingService
		LayerConnection ref application satisfied_by services.timer
		LayerConnection ref application satisfied_by services.timeout
		LogicalThread mrPingThread prio=5 {application.MrPing}
		LogicalThread mrPong1Thread prio=5  {application.MrPong1}
//		LogicalThread mrPong2Thread prio=5 {application.MrPong2}
	}

	// automatically inserted App_SubSystem_PedLightController
	ActorClass PingPongTop {
		Structure {
			ActorRef MrPing: MrPingActor
			ActorRef MrPong1: MrPongActor1
	//		ActorRef MrPong2: MrPongActor2
			Binding MrPing.PingPongPort and MrPong1.PingPongPort
		}
	}

	ActorClass MrPingActor {
		Interface {
			conjugated Port PingPongPort [2]: PingPongProtocol
		}
		Structure {
			external Port PingPongPort 
			SAP timer: PTimeout
		}
		Behavior {
			StateMachine {
				Transition tr0: initial -> waitForTimer {
					action {
						"timer.Start(1000);"
					}
				}
				Transition tr1: waitForTimer -> waitForPong {
					triggers {
						<timeoutTick: timer>
					}
					action {
						"PingPongPort.ping();"
					}
				}
				Transition tr2: waitForPong -> waitForTimer {
					triggers {
						<pong: PingPongPort>
					}
					action {
						"timer.Start(1000);"
					}
				}
				State waitForTimer { }
				State waitForPong { }
			}
		}
	}

	ActorClass MrPongActor1 {
		Interface {
			Port PingPongPort: PingPongProtocol
		}
		Structure {
			external Port PingPongPort
		}
		Behavior {
			StateMachine {
				Transition tr0: initial -> waitForPing { }
				Transition myTrigger: waitForPing -> waitForPing {
					triggers {
						<ping: PingPongPort>
					}
					action {
						"PingPongPort.pong();"
					}
				}
				State waitForPing { }
			}
		}
	}
	
/*	ActorClass MrPongActor2 {
		Interface {
			Port PingPongPort: PingPongProtocol
		}
		Structure {
			external Port PingPongPort
		}
		Behavior {
			StateMachine {
				Transition tr0: initial -> waitForPing { }
				Transition myTrigger: waitForPing -> waitForPing {
					triggers {
						<ping: PingPongPort>
					}
					action {
						"PingPongPort.pong();"
					}
				}
				State waitForPing { }
			}
		}
	}*/
	
	ProtocolClass PingPongProtocol {
		incoming {
			Message ping()
		}
		outgoing {
			Message pong()
		}
	}

}