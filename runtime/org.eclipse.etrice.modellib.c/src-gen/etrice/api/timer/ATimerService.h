/**
 * @author generated by eTrice
 *
 * Header File of ActorClass ATimerService
 *
 */

#ifndef _ETRICE_API_TIMER_ATIMERSERVICE_H_
#define _ETRICE_API_TIMER_ATIMERSERVICE_H_

#include "etDatatypes.h"
#include "messaging/etMessage.h"

/* include all referenced room classes */
#include "etrice/api/timer/PTimer.h"
#include "etrice/api/timer/PTimerSupervisionControl.h"

/*--------------------- begin user code ---------------------*/
#include "osal/etTime.h" 
#define ET_NB_OF_TCBS 70
typedef struct etTCB etTimerControlBlock; 
struct etTCB {
	etTime expTime;
	etTime pTime;
	int32 portIdx;
	etTimerControlBlock* next;
	};

/*--------------------- end user code ---------------------*/

typedef struct ATimerService ATimerService;

/* const part of ActorClass (ROM) */
typedef struct ATimerService_const {
	const char* instName;

	/* simple ports */

	/* data receive ports */

	/* saps */

	/* replicated ports */

	/* services */
	const etReplPort timer;
	const etReplPort supervisionControl;
} ATimerService_const;


/* constant for state machine data */
#define ATIMERSERVICE_HISTORY_SIZE 2

/* variable part of ActorClass (RAM) */
struct ATimerService {
	const ATimerService_const* ET_CONST_MEMBER constData;

	/* data send ports */

	/*--------------------- attributes ---------------------*/
	 etTimerControlBlock tcbs[70]
	;
	 etTimerControlBlock* usedTcbsRoot;
	 etTimerControlBlock* freeTcbsRoot;
	 etTime timerDeviationHighWaterMark;


	/* state machine variables */
	etInt16 state;
	etInt16 history[ATIMERSERVICE_HISTORY_SIZE];
};

void ATimerService_init(ATimerService* self);

void ATimerService_receiveMessage(void* self, const void* ifitem, const etMessage* msg);

void ATimerService_execute(ATimerService* self);

/*--------------------- user constructor/destructor ---------------------*/

/*--------------------- operations ---------------------*/
 void ATimerService_returnTcb(ATimerService* self, etTimerControlBlock* block);
 void ATimerService_putTcbToUsedList(ATimerService* self, etTimerControlBlock* block);
 void ATimerService_addTime(ATimerService* self, etTime* t1, etTime* t2);
 etTimerControlBlock* ATimerService_getTcb(ATimerService* self);
 void ATimerService_removeTcbFromUsedList(ATimerService* self, int32 idx);
 bool ATimerService_isTimeGreater(ATimerService* self, etTime* t1, etTime* t2);
 void ATimerService_subTime(ATimerService* self, etTime* t1, etTime* t2);


#endif /* _ETRICE_API_TIMER_ATIMERSERVICE_H_ */

