/**
 * @author generated by eTrice
 *
 * Header File of ActorClass ATimingService
 * 
 */

#ifndef _ATIMINGSERVICE_H_
#define _ATIMINGSERVICE_H_

#include "etDatatypes.h"
#include "messaging/etMessage.h"

#include "PTimer.h"

/*--------------------- begin user code ---------------------*/

			#include "platform/etTimer.h" 
			#define ET_NB_OF_TCBS 10
			typedef struct etTCB etTimerControlBlock; 
			struct etTCB {
				etTargetTime_t expTime;
				etTargetTime_t pTime;
				int32 portIdx;
				etTimerControlBlock* next;
				};
			
/*--------------------- end user code ---------------------*/

typedef struct ATimingService ATimingService;

/* const part of ActorClass (ROM) */
typedef struct ATimingService_const {
	/* simple ports */
	
	/* data receive ports */

	/* saps */
	
	/* replicated ports */
	
	/* services */
	const etReplPort timer;
} ATimingService_const;


/* constant for state machine data */
#define ATIMINGSERVICE_HISTORY_SIZE 2

/* variable part of ActorClass (RAM) */
struct ATimingService {
	const ATimingService_const* const constData;
	
	/* data send ports */

	/*--------------------- attributes ---------------------*/
	etTimerControlBlock tcbs[10];
	etTimerControlBlock* usedTcbsRoot;
	etTimerControlBlock* freeTcbsRoot;
	
	
		/* state machine variables */
		etInt16 state;
		etInt16 history[ATIMINGSERVICE_HISTORY_SIZE];
};

void ATimingService_init(ATimingService* self);

void ATimingService_receiveMessage(void* self, void* ifitem, const etMessage* msg);

void ATimingService_execute(ATimingService* self);

/*--------------------- operations ---------------------*/
etTimerControlBlock* ATimingService_getTcb(ATimingService* self);
void ATimingService_returnTcb(ATimingService* self, etTimerControlBlock* block);
void ATimingService_removeTcbFromUsedList(ATimingService* self, int32 idx);
void ATimingService_putTcbToUsedList(ATimingService* self, etTimerControlBlock* block);
boolean ATimingService_isTimeGreater(ATimingService* self, etTargetTime_t* t1, etTargetTime_t* t2);
void ATimingService_addTime(ATimingService* self, etTargetTime_t* t1, etTargetTime_t* t2);
void ATimingService_printList(ATimingService* self);

/*--------------------- begin user code ---------------------*/
//uc2
/*--------------------- end user code ---------------------*/

#endif /* _ATIMINGSERVICE_H_ */

