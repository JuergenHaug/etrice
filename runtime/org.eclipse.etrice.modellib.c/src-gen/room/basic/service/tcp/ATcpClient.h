/**
 * @author generated by eTrice
 *
 * Header File of ActorClass ATcpClient
 * 
 */

#ifndef _ROOM_BASIC_SERVICE_TCP_ATCPCLIENT_H_
#define _ROOM_BASIC_SERVICE_TCP_ATCPCLIENT_H_

#include "etDatatypes.h"
#include "messaging/etMessage.h"

#include "room/basic/service/tcp/PTcpControl.h"
#include "room/basic/service/tcp/PTcpPayload.h"

/*--------------------- begin user code ---------------------*/
#include "platform/etTcpSockets.h"
/*--------------------- end user code ---------------------*/

typedef struct ATcpClient ATcpClient;

/* const part of ActorClass (ROM) */
typedef struct ATcpClient_const {
	/* simple ports */
	const PTcpControlPort ControlPort;
	const PTcpPayloadPort PayloadPort;
	
	/* data receive ports */

	/* saps */
	
	/* replicated ports */
	
	/* services */
} ATcpClient_const;


/* constant for state machine data */
#define ATCPCLIENT_HISTORY_SIZE 2

/* variable part of ActorClass (RAM) */
	struct ATcpClient {
		const ATcpClient_const* const constData;
		
		/* data send ports */

		/*--------------------- attributes ---------------------*/
		int32 lastError;
		DTcpPayload payload;
		etSocketConnectionData* client;
		
		
			/* state machine variables */
			etInt16 state;
			etInt16 history[ATCPCLIENT_HISTORY_SIZE];
	};

void ATcpClient_init(ATcpClient* self);

void ATcpClient_receiveMessage(void* self, void* ifitem, const etMessage* msg);


/*--------------------- operations ---------------------*/
void ATcpClient_ctor(ATcpClient* self);
void ATcpClient_dtor(ATcpClient* self);
void ATcpClient_stopUser(ATcpClient* self);


#endif /* _ROOM_BASIC_SERVICE_TCP_ATCPCLIENT_H_ */

